<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神社的储物间</title>
  <icon>https://mxts.jiujiuer.xyz/icon.png</icon>
  <subtitle>*节操消失了*</subtitle>
  <link href="https://mxts.jiujiuer.xyz/atom.xml" rel="self"/>
  
  <link href="https://mxts.jiujiuer.xyz/"/>
  <updated>2025-03-12T15:31:34.803Z</updated>
  <id>https://mxts.jiujiuer.xyz/</id>
  
  <author>
    <name>xeonds</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux-nmtui配置双网口网络</title>
    <link href="https://mxts.jiujiuer.xyz/2025/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/linux-nmtui%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8F%A3%E7%BD%91%E7%BB%9C/"/>
    <id>https://mxts.jiujiuer.xyz/2025/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/linux-nmtui%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8F%A3%E7%BD%91%E7%BB%9C/</id>
    <published>2025-03-07T07:11:12.000Z</published>
    <updated>2025-03-12T15:31:34.803Z</updated>
    
    <content type="html"><![CDATA[<p>服务器有两个网口，一个拨号一个局域网，想着两个网络应该都能从各自的内网ip访问，但是一直出现了只能从eno0访问而无法从ppp0访问的异常。遂查看路由表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xeonds@ark-station-server:~$ ip route show    </span><br><span class="line">default via 10.19.19.81 dev eno0 proto dhcp metric 103  <span class="comment"># 优先级高（metric=103）</span></span><br><span class="line">default via 10.194.255.254 dev ppp0 proto static metric 104  <span class="comment"># 优先级低（metric=104）</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>能看出来什么问题吗？是的，服务器同时连接了两个网口，但是系统的出流量会优先选择优先级（也就是Metrics）高的出口，这会导致系统出现<strong>非对称路由</strong>：来自ppp0的请求被服务器接收后，会从eno0发出（因为 eno0 的默认路由优先级更高）。这种情况下，两个网络如果不互通的话，响应包就会被丢弃。</p><p>所以一个简单的解决方案就是，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection modify eno0 ipv4.never-default <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>去掉eno0的默认网关，这样出流量都会走ppp0，从而消除了非对称路由的问题。eno0也仅保留本地子网的路由，因此仍然能通过子网的其他设备访问服务器。</p><h2 id="另一种解法"><a href="#另一种解法" class="headerlink" title="另一种解法"></a>另一种解法</h2><ul><li><strong>出站流量负载均衡</strong>：随机选择 eno0 或 ppp0 访问互联网。</li><li><strong>入站流量双向可达</strong>：通过 eno0 或 ppp0 的 IP 均能访问服务器。</li></ul><p><strong>解决方案：策略路由（Policy-Based Routing）</strong></p><p>需手动配置路由表和规则，根据源 IP 或其它条件选择出口。以下是具体步骤：</p><hr><h3 id="步骤-1：为每个接口创建独立路由表"><a href="#步骤-1：为每个接口创建独立路由表" class="headerlink" title="步骤 1：为每个接口创建独立路由表"></a><strong>步骤 1：为每个接口创建独立路由表</strong></h3><p>编辑 <code>/etc/iproute2/rt_tables</code>，添加两个自定义路由表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;100 eno0_route&quot;</span> &gt;&gt; /etc/iproute2/rt_tables</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;200 ppp0_route&quot;</span> &gt;&gt; /etc/iproute2/rt_tables</span><br></pre></td></tr></table></figure><hr><h3 id="步骤-2：为每个接口配置路由和规则"><a href="#步骤-2：为每个接口配置路由和规则" class="headerlink" title="步骤 2：为每个接口配置路由和规则"></a><strong>步骤 2：为每个接口配置路由和规则</strong></h3><h4 id="eno0-配置"><a href="#eno0-配置" class="headerlink" title="eno0 配置"></a><strong>eno0 配置</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 eno0 的路由表</span></span><br><span class="line">ip route add 10.19.19.0/24 dev eno0 table eno0_route</span><br><span class="line">ip route add default via 10.19.19.81 dev eno0 table eno0_route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加规则：来自 eno0 IP 的流量使用 eno0_route 表</span></span><br><span class="line">ip rule add from 10.19.19.8/24 table eno0_route</span><br></pre></td></tr></table></figure><h4 id="ppp0-配置"><a href="#ppp0-配置" class="headerlink" title="ppp0 配置"></a><strong>ppp0 配置</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 ppp0 的路由表</span></span><br><span class="line">ip route add default via 10.194.255.254 dev ppp0 table ppp0_route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加规则：来自 ppp0 IP 的流量使用 ppp0_route 表</span></span><br><span class="line">ip rule add from 1.2.3.4 table ppp0_route</span><br></pre></td></tr></table></figure><hr><h3 id="步骤-3：启用负载均衡（可选）"><a href="#步骤-3：启用负载均衡（可选）" class="headerlink" title="步骤 3：启用负载均衡（可选）"></a><strong>步骤 3：启用负载均衡（可选）</strong></h3><p>如果希望出站流量完全随机选择接口（不依赖源 IP），需配置 <code>multipath</code> 路由：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip route add default \</span><br><span class="line">    nexthop via 10.19.19.81 dev eno0 weight 1 \</span><br><span class="line">    nexthop via 10.194.255.254 dev ppp0 weight 1</span><br></pre></td></tr></table></figure><hr><h3 id="步骤-4：配置-NetworkManager-持久化"><a href="#步骤-4：配置-NetworkManager-持久化" class="headerlink" title="步骤 4：配置 NetworkManager 持久化"></a><strong>步骤 4：配置 NetworkManager 持久化</strong></h3><p>上述命令重启后会失效，需通过 NetworkManager 持久化配置。</p><h4 id="eno0-连接配置（-x2F-etc-x2F-NetworkManager-x2F-system-connections-x2F-eno0-nmconnection）"><a href="#eno0-连接配置（-x2F-etc-x2F-NetworkManager-x2F-system-connections-x2F-eno0-nmconnection）" class="headerlink" title="eno0 连接配置（&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;eno0.nmconnection）"></a><strong>eno0 连接配置（&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;eno0.nmconnection）</strong></h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[ipv4]</span></span><br><span class="line"><span class="attr">method</span>=manual</span><br><span class="line"><span class="attr">address1</span>=<span class="number">10.19</span>.<span class="number">19.8</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">route-table</span>=<span class="number">100</span>  <span class="comment"># 指向自定义路由表</span></span><br><span class="line"><span class="attr">routing-rule1</span>=priority <span class="number">100</span> from <span class="number">10.19</span>.<span class="number">19.8</span> table <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="ppp0-连接配置（-x2F-etc-x2F-NetworkManager-x2F-system-connections-x2F-ppp0-nmconnection）"><a href="#ppp0-连接配置（-x2F-etc-x2F-NetworkManager-x2F-system-connections-x2F-ppp0-nmconnection）" class="headerlink" title="ppp0 连接配置（&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;ppp0.nmconnection）"></a><strong>ppp0 连接配置（&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;ppp0.nmconnection）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ipv4]</span><br><span class="line">method=auto</span><br><span class="line">route-table=200  <span class="comment"># 指向自定义路由表</span></span><br><span class="line">routing-rule1=priority 200 from 1.2.3.4 table 200</span><br></pre></td></tr></table></figure><hr><h3 id="最终验证"><a href="#最终验证" class="headerlink" title="最终验证"></a><strong>最终验证</strong></h3><ol><li><strong>入站访问测试：</strong></li></ol><ul><li>从 eno0 的子网 ping <code>10.19.19.8</code>。</li><li>从 ppp0 的子网 ping <code>1.2.3.4</code>。</li></ul><ol><li><strong>出站负载均衡测试：</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪外网访问路径（如 8.8.8.8）</span></span><br><span class="line">traceroute 8.8.8.8</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">- 观察出口是否交替使用 eno0 和 ppp0。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">### **故障排查**</span></span><br><span class="line"></span><br><span class="line">- **检查路由表和规则：**</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">ip route show table eno0_route</span><br><span class="line">ip route show table ppp0_route</span><br><span class="line">ip rule list</span><br></pre></td></tr></table></figure><ul><li><strong>检查连接跟踪：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conntrack -L -d 8.8.8.8  <span class="comment"># 查看 NAT 会话状态</span></span><br></pre></td></tr></table></figure><p>通过以上配置，你的服务器将实现双网口负载均衡和双向可达。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)感谢d指导</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx+vue项目部署后无法加载资源</title>
    <link href="https://mxts.jiujiuer.xyz/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nginx+vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%90%8E%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90/"/>
    <id>https://mxts.jiujiuer.xyz/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nginx+vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%90%8E%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90/</id>
    <published>2025-03-02T11:40:46.000Z</published>
    <updated>2025-03-12T15:31:34.802Z</updated>
    
    <content type="html"><![CDATA[<p>项目使用的<code>nginx.conf</code>如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend:8010/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">300s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端在加载时会出现如下报错：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load module script: Expected a JavaScript module script but the server responded with a MIME type of &quot;text/plain&quot;. Strict MIME type checking is enforced for module scripts per HTML spec.</span><br></pre></td></tr></table></figure><p>解读下大概是服务端对于请求的资源的MIME类型返回错误，导致浏览器能接收到文件，但是因为MIME类型错误所以拒绝加载。</p><p>nginx对于任意请求的资源的响应类型都是text&#x2F;plain，而前端要求MIME和文件后缀匹配，因此才会出现这个问题。</p><p>nginx安装后会有mime.types文件，其中存储了大部分常见的后缀-MIME类型对应关系。所以我们作如下修改：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"><span class="addition">+    include mime.types;</span></span><br><span class="line"><span class="addition">+    default_type application/octet-stream;</span></span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样nginx就能返回正确的类型了。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2024之梦</title>
    <link href="https://mxts.jiujiuer.xyz/2024/12/25/%E6%96%87%E5%AD%A6/%E6%9D%82%E8%B0%88/2024%E4%B9%8B%E6%A2%A6/"/>
    <id>https://mxts.jiujiuer.xyz/2024/12/25/%E6%96%87%E5%AD%A6/%E6%9D%82%E8%B0%88/2024%E4%B9%8B%E6%A2%A6/</id>
    <published>2024-12-25T18:34:14.000Z</published>
    <updated>2025-03-12T15:31:34.798Z</updated>
    
    <content type="html"><![CDATA[<p>最近到了做毕设的时间，导师和我联系上之后，就先让我们毕设小组的同学先写一份周为单位的毕设时间安排，同时每周上交周记。</p><p>其实换个尺度看时间很有意思，365天来看的话一年很多，52周来看的话一年又不那么多了。</p><p>时间就像……不管了，反正不同的切法会有不同的感觉。按半年分，经常会有种转折感和分界感；按四季分，会给时间赋予四季的色彩；按月分，一年就像是12次轮回，每个轮回都会见到不同的人或事；按周分，应该是作为学生最熟悉的尺度了：周内是上课，周末是放松<del>或者实验作业</del>；按天算，那么就是365次充满无穷可能性的轮回——直到一年之末，坍缩为一个确定的未来。</p><p>一年的时间，足够发生很多有趣的事情了。</p><hr><p>年初和两个同校朋友去了翠华山玩，一人徒步，一人双板，我单板。滑雪时一一边怕的要死一边高速冲下山的感觉挺妙不可言的，行头一整也挺像那么回事。单板学着也挺快，只要会摔会站起来能换刃就行，一个来小时就出新手区了。<del>就是如果最后没有被鱼雷撞飞起来就更好了</del>。</p><p>一周之后，和发小闪现去了青岛，开始了为期一周的旅行。详细日志见青岛之旅，实际上不止青岛，还有山东济南和山东淄博（实际上是因为寒冷原因没去威海）。海边就是最大的惊喜，海鸟是最有趣的风景线。冬日的冷洗刷了澄澈的心灵，也洗刷出青岛澄澈的冬日景色，虽然但是还是<del>建议别冬天去北方沿海冷得要死</del>。</p><p><img src="/img/1736011102564.jpg"></p><p>二月是新年。去覆雪的秦岭转了一圈，真的很好看。</p><p><img src="/img/1736011273427.jpg"></p><p>月初跟同学回各自的高中看了看，顺便小小宣讲了一下泥电，也当是给学弟们加油打气。</p><p>还有奶龙这玩意怎么年初就在追我草</p><p><img src="/img/1736011378672.jpg"></p><p>之后就是春节了。平平淡淡，无事最好。家里人变少了之后新年也越来越没年味了，还是说是我长大了？或者说，时代终于是变成了这个阶段。之后又是和同学的几次匆忙的小聚，于是，各自所奔赴的未来交错相映，编织出属于我们一代的未来。</p><p>今年年初的雪很大，直到二月下旬才开始消融于暖阳之下。2.24，倒数第三次回到了学校，开始了倒数第三个学期。这一学期的体育课选了<del>江可泽民亦可</del>赛艇，确实有效锻炼了身体。最后一学期的体育课吃上了乐跑，以还算不错的身体素质拿下了。也是以这个选择为契机，今年算是正式开始了比较频繁的运动。</p><p>三月，上了最喜欢的编译原理，在逐渐收敛的未来间踌躇不定。和遇到的新朋友一起入坑了中二节奏的坑。中下旬，海棠的樱花林开了花，浪摄了不少。顺便整了这个iris.al的域名。因为犹豫错过了Google Summer of Code。因为换新键盘手残+备份失效删了~&#x2F;不少东西，好在没有什么特别重要的。</p><p>四月，生命力回归北方大地。月初在dimole的邀请下，去了西北文化巡展，陪他见到了现如今漫展许多有趣的东西，也是第一次知道了西安地铁还有地上段。一次早起，去学校的各个角落逛了逛，见到了许多平时不会见到的风景，第一次知道了学校还有个不再开放的南门<del>以及那里会刷新卖菜卖水果的小贩</del>。中旬跟同学出去植物园拍照，回看那会的照片，初夏的光影，如梦似幻。顺便见到了一个80+高龄的退休真·老法师，学习到了不少构图经验和摄影思想，算是成了忘年交？</p><p><img src="/img/1736011567165.jpg"><img src="/img/1736011485608.jpeg"><img src="/img/1736011500845.jpg"></p><p>月中是B测，磨合新的开发技术，flutter+go一个人秒了。以及跟着智能软件实验室的学长做的项目也日渐步入正轨，开发一路顺利。没想到的是这个带我打了不少竞赛的项目居然来年反手帮我拿下学校的竞赛奖励，<del>感谢大自然的馈赠</del>。和同学逛了几回小寨，真就西北秋叶原。</p><p>比较曲折地把大创结题了。</p><p>月底入坑了葬送的芙莉莲，然后就卡坑里出不去了。</p><p>五一回了家，和同学上塬逛了一圈，发现了生活圈之外的风景。回到学校之后，在一个雨夜漫步了校园，清冷，雨声反衬出的静谧，微弱的路灯，甜美的梦。在一个小登的介绍下有幸尝试了一下兵击，真踏马帅。中旬逐渐习惯了跑步，甚至配速心肺也上来了，顺便练的引体也能比较标准地拉起来12个了。服务器很省心，跑各种服务同时作为存储服务器一直挺稳定。</p><p>五月中旬看了隔壁西工大的青空祭，有被震撼到。筹备并参与了泥电的晒你祭，顺便做了服务外包的国赛答辩，虽然只有三等奖，但是那天和同学玩的很开心。以及板子替我参与了一整天的引诱区活动，这辈子有了.jpg</p><p>这月也三度复刻了西电湖人：赛艇课下水了几回。虽然只有大活小小的人工湖，但是也挺开心的。</p><p>哦还有，在泥电大活湖里摸到蚌了：</p><p><img src="/img/1736009358563.jpg"></p><p>就到这了.jpg</p><p>月底收了辆毕业老哥的山地，然后骑了5个月，陪伴了我近2000公里，见证了西安南郊到宝鸡的山山水水，也为我开启了一片新的旷野。</p><blockquote><p>本来以为2000公里很长的直到我发现有人月跑量都1200km了。</p><p>人比人气死人.jpg</p></blockquote><p>六月开幕，练习时长两年半的鸡哥，坠机了。原罪在12700H上，CPU集成南桥，故障率上天。修电脑花了两月，耽误了不少事。骑行主线也开图到昆明池和隔壁西工大长安校区了。月中，送走了20级老登，也意识到明年这时就轮到我们了。</p><p><img src="/img/1736009983028.jpg"></p><p>然后某天晚上骑行的时候被路政的隐形外侧凸出水泥路肩给爆了。提醒各位晚上别骑车，注意观察路况</p><p>下旬和浪潮和的学长们道了别，聊了聊未来，某天凌晨在操场遇到一群在南操畅聊，已经毕业的学长们，第二天见到了学校的祝福：</p><p><img src="/img/1736010316521.jpg"></p><p><strong>今日同风起，归来仍少年</strong></p><p>月底好像蜜雪冰城出了那个火了一个夏天的糯香柠檬茶。</p><p>和骑行群的群u们第一次也是这学期最后一次骑行活动，见到了223老哥的两次零速摔<del>不过第二次（好像）只有我看到</del>，终归是走上了<del>紧身衣变态的</del>不归路。</p><p><img src="/img/1736010602872.jpg"></p><hr><p>暑假开头折腾了一阵子磁带机，给自己的数据盘冷备了一下（然后就没碰过磁带机了qaq）</p><p>7月初陪<del>原批</del>哥们吃了kfc的原神联动，各家餐厅还是意料之中的爆满。只能说原这游戏的体量真的下沉到底了。</p><p>之后一段时间经常过几天出去骑一圈，不过因为夏天雨多的问题，去了好几回沣峪口都没进去过分水，雨天路况太危险了。不过幸运的是也拍到不少很值得纪念的美景：</p><p><img src="/img/1736703892710.jpg"><img src="/img/1736704230105.jpg"><img src="/img/1736704259849.jpg"><img src="/img/1736704278625.jpg"><img src="/img/1736704300078.jpg"><img src="/img/1736704774451.jpg"></p><p>夏天雨骑挺爽，但是车估计不怎么爽，洗车也更是不爽。之后有一回被大暴雨硬控到半夜12点多，电闪雷鸣+大风更是上强度。</p><p>除去骑车以外，暑假偶尔还游泳跑步，也算是放开玩了。</p><p>月底电脑修好了，继续肝了一阵子项目就回家了，但是没想到差点被山洪偷家，好在片区受损情况很轻，就是几公里之外的地方就伤亡惨重了，山洪下来的时候，去地库挪车的人有不少没逃出来的……对于大部分人来说，生命第一，其他的暂且往后排排吧。</p><p>顺便和同学聚餐了一回，之后莫名其妙就开始现场开黑猴了。浅试了一下果不其然被卡在虎先锋了（。</p><p>暑假回家的时候带上了自行车，顺便和群u一块线下约骑了一波<del>虽然果不其然跟不上人家</del>，于是回学校的时候并没有坐火车，而是骑回学校去<del>虽然对泥电大部分单车佬来说180km这个距离强度也不算太高</del>，毕竟头一回骑长距离也是有点忐忑，好在最后坚持下来了。</p><p>连带休息，花了将近12个小时，走过了178公里，晚上9点才到了学校，好在缓了一晚上就差不多恢复了。其实骑长途又无聊又累又危险<del>但是耐不住太想试试了新手别学</del></p><p><img src="/img/1736706648937.jpg"></p><p>暑假还学了学做饭，试着整了整自己设想中的各种料理，结果还不赖。回来头几天还看到小登们军训，感觉比我们老登那会强度大一些。好像那几天军训还出过几个乐子？</p><p>开学。去了米哈游的校招会，和哥们现场抽奖莫名其妙一等奖+二等奖满载而归（？）</p><p>之后又拿到了学长送的总裁签名版龙芯开发板，玩了一阵子，<del>贡献了些微资料</del>。参加了小米的校招，但是准备不充分，笔试被刷了。和同学坐了西安新开的云巴，这玩意甚至路过一些地方的时候光电玻璃还会变成不透明的。和骑行群的群u们团练了几次，只能说大火都挺有实力的。</p><p>月底的百团大战（社团招新）也吸引到不少新生<del>还有一些老登</del>；捡到一只仓鼠，被同学带回去养了；以及月底，地铁开了，泥电的门禁也变严了。</p><p>国庆又骑了一回，就是晚上降温有点大，回去就发烧了。</p><p><img src="/img/1736707899818.jpg"></p><p>帮同学装了台机，玩了玩单片机物联网开发，填上了以前留的一个坑。顺便，报了考研，虽然心里早已有了答案，但是机会放在眼前，还是很难不去尝试一次。那段时间想了很久，最终选择将一切交给时间。</p><p><img src="/img/1736708050607.jpg"></p><p>10月底，牢林发力了：</p><p><img src="/img/1736708319162.png"></p><p>现在看来，后续好像也没什么更大的浪花了；或者说，大部分人已经默认或是不再关心后续发展了。</p><p>然后10月底又出去骑游了一圈太平峪：</p><p><img src="/img/1736708580113.jpg"></p><p>11月初，学校对面也新开了几个店，先是面包店，再是kfc，之后又是兰湘子和霸王茶姬。</p><p>赶上好时代了.jpg</p><p>海棠餐厅门口还办了暴雪校园行，遗憾的是我的游戏涉猎太浅薄了。这月的昆明池倒是风景不错：</p><p><img src="/img/1736708909511.jpg"></p><p>哎我拍的都是些什么玩意.jpg</p><p>和pda开发者们一起聚了餐，感谢szgg和他的专辑qaq</p><p>月中骑行服到了，不过也没时间了，只去了一趟祥峪。最后在月末抓住最后的时机和哥们出去骑游了一圈<del>其实还去了趟分水但是起晚了没登顶</del>。还有其实今年确实是下了雪的，但是仅限山上：</p><p><img src="/img/1736709327781.jpg"></p><p>月底骑行群群u团建测功率，太菜了就没好意思测。</p><p>12月初被同学推荐了那个清体小麦茶，有一说一还可以。然后又被<del>原批</del>哥们带去泥电瑞幸整原神联名饮料<del>不是原神你天天联动的吗</del>。</p><p>之后？开题报告，毕业设计，考研，每周汇报，<del>错过了开源社区的线下活动</del>，巧合认识了泥电的robomaster战队，电脑又小问题不断了，<del>骑车被学妹撞了</del>，陪小登骑车去了eva线下活动，有幸参加了泥电的新年音乐会，偶遇和西电同龄的教授，祝健康<code>(&gt;v&lt;)</code></p><p><img src="/img/1736710584843.jpg"></p><p>试乘了八号线，rua到了隔壁瓜大的猫猫，</p><p>最后，和朋友们一起，一起跨过了2024。</p><p><img src="/img/1736710523523.jpg"></p><hr><p>这一年做了很多的梦，见证了许多人和事。去年的愿望是：</p><blockquote><p>希望明年写流水账的时候，能来点更精彩的。</p></blockquote><p>虽然今年大部分时候都陷入了对未来的迷茫中，经常不自觉地逃避，但是同时，那些容纳我心灵的事物，也让我重新审视自己，面对未来。</p><p>自然的馈赠（物理），学校创造的条件，同学和朋友们的陪伴，还有<del>奋力（并不）</del>向前的我，让这篇本该是流水账的东西变得有那么些可说的，甚至能配几张图，万幸，感谢。</p><p>正如开头所说，对时间使用不同的尺度，你会得到不同的观感：从最大的，到最小的，人们有很多度量时间的单位。为什么呢？时间是绝对的，无论喜怒哀乐悲欢离合，它只是在反复递增，与每一个人的意志并不相干。</p><p>因此，人们创造了从小到大的许多时间的度量单位，来延拓人们的认知，试图对抗永恒前进的时时刻刻。每个我们日常使用的单位，或多或少包含着使用者不同的期许：想要明天出去玩，今年过年想要xxx，这周周末一起去xxx，这个月立个小目标，<del>中午吃啥</del>，诸如此类。这些期许穿插在永恒前进的时间长河中，为我们定下人性的锚点，最终使得”我们”成为我们。曾有一些瞬间，我几近溺亡在时间的长河中，是这些锚点让我顺着时间走到了现在。</p><p>又是一年循环之始。该说你好吗，2025？新的一年既是轮回，也是前进；此刻，我将愿望托付给未来的自己，希望最终回应我的，不再是一片虚空。</p>]]></content>
    
    
    <summary type="html">唯有时间永恒</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>龙芯久久派Plus折腾笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E9%BE%99%E8%8A%AF%E4%B9%85%E4%B9%85%E6%B4%BEPlus%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/09/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E9%BE%99%E8%8A%AF%E4%B9%85%E4%B9%85%E6%B4%BEPlus%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2024-09-12T07:41:18.000Z</published>
    <updated>2025-03-12T15:31:34.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>感谢尚宇学长送的开发板，希望龙芯以后发展越来越好&lt;(&#x3D;w&#x3D;)&gt;</p></blockquote><p>这回折腾用到的主要有：</p><ul><li>本体：2k0300 久久派_Plus_V1.0</li><li>开发设备：Linux环境笔记本电脑</li><li>串口转接器：用一个老51开发板糊弄过去了（</li><li>路由器：提供稳定网络连接和局域网</li></ul><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p><img src="/img/Pasted%20image%2020240912154924.png"></p><p><img src="/img/Pasted%20image%2020240912155406.png"></p><p>尊贵的总裁签名版（虽然看不太清）↑</p><p><img src="/img/Pasted%20image%2020240912154938.png"></p><p>接口丰富度没得说，两个RJ45，两个USB2.0，一个3.5mm音频接口，UART，ADC，JTAG和Type-C供电，还有个MicroSD卡插槽。</p><p>这规格，只要三位数出头的价格，<del>它就是炸了我都夸它炸得好听</del>。稳定性跟功耗也没得说，ABI2.0的龙架构让它能拥有开源社区的支持，基本所有开源软件都可以通过交叉编译在这个板子上使用，未来可期属于是。</p><h2 id="上电"><a href="#上电" class="headerlink" title="上电"></a>上电</h2><p>手头刚好没USB转串口，想到个幽默办法。掏出以前的51单片机开发板HC6800MS，给ST89C52RC薅下来，TX，RX，GND分别接到开发板的RXD0，TXD0，GND上：</p><p><img src="/img/Pasted%20image%2020240912161052.png"></p><p>然后给那个老板子插电脑上：</p><p><img src="/img/Pasted%20image%2020240912160313.png"></p><p>诶，这不就有了吗。</p><p>现在就能用<code>screen</code>从串口连接上开发板了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo screen /dev/ttyUSB0 115200</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/img/Pasted%20image%2020240912161227.png"></p><p>板子上电之后会默认启动WiFi热点，配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/hostapd.conf</span></span><br><span class="line">interface=wlan0  </span><br><span class="line">driver=nl80211  </span><br><span class="line">ssid=LoongsonWIFI  </span><br><span class="line">hw_mode=g  </span><br><span class="line">channel=6  </span><br><span class="line">macaddr_acl=0  </span><br><span class="line">auth_algs=1  </span><br><span class="line">ignore_broadcast_ssid=0  </span><br><span class="line">wpa=2  </span><br><span class="line">wpa_passphrase=loongson123456  </span><br><span class="line">wpa_key_mgmt=WPA-PSK  </span><br><span class="line">wpa_pairwise=TKIP  </span><br><span class="line">rsn_pairwise=CCMP</span><br></pre></td></tr></table></figure><p>虽然可以连上WiFi，但是它的<code>sshd</code>进程好像是默认不开启的。</p><p>哦它没有openssh啊。</p><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><blockquote><p><a href="https://wszqkzqk.github.io/2024/08/08/devtools-loong64/">在x86设备上跨架构构建龙芯的Arch Linux软件包 - 星外之神的博客 | wszqkzqk Blog</a><br><a href="https://wiki.archlinuxcn.org/wiki/Pacman/%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7#%E4%BB%8E_CD/DVD_%E6%88%96_U_%E7%9B%98%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85">pacman&#x2F;提示和技巧 - Arch Linux 中文维基</a><br><a href="https://wiki.archlinuxcn.org/wiki/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85">离线安装 - Arch Linux 中文维基</a><br><a href="https://wiki.archlinuxcn.org/wiki/%E4%BB%8E%E7%8E%B0%E6%9C%89_Linux_%E5%8F%91%E8%A1%8C%E7%89%88%E5%AE%89%E8%A3%85_Arch_Linux#%E5%9C%A8%E5%AE%BF%E4%B8%BB%E7%B3%BB%E7%BB%9F%E4%B8%8A%E8%BF%90%E8%A1%8C_pacman">从现有 Linux 发行版安装 Arch Linux - Arch Linux 中文维基</a></p></blockquote><p>参数，来自xdosc的佬@chi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS=<span class="string">&#x27;--with-arch=loongarch64 --with-tune=la464 --with-abi=lp64d --with-simd=none --disable-threads&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h3><p>准备目录.&#x2F;openssh并进入，下载源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.8p  </span><br><span class="line">1.tar.gz</span><br><span class="line">wget http://www.zlib.net/zlib-1.3.1.tar.gz</span><br><span class="line">wget https://github.com/openssl/openssl/releases/download/openssl-3.3.  </span><br><span class="line">2/openssl-3.3.2.tar.gz</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> $(<span class="built_in">ls</span> ./);<span class="keyword">do</span> tar -zxvf <span class="variable">$item</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>创建目录.&#x2F;openssh&#x2F;install<br>创建脚本env.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/path/to/cross-tools/bin&quot;</span></span><br></pre></td></tr></table></figure><p>上面指向的是交叉编译工具链的路径，提前准备。</p><p>准备环境：<code>source ~/env.sh</code></p><p>编译zlib：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zlib-1.3.1/</span><br><span class="line">prefix=<span class="variable">$HOME</span>/2k300/openssh/zlib CC=loongarch64-unknown-linux-gnu-gcc AR=loongarch64-unknown-linux-gnu-ar ./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编译<code>openssl</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openssl-3.3.2/</span><br><span class="line">./Configure linux64-loongarch64 --cross-compile-prefix=loongarch64-unknown-linux-gnu- --prefix=<span class="variable">$HOME</span>/2k300/openssh/install/openssl shared no-asm</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编译openssh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure --host=loongarch64-unknown-linux-gnu --prefix=<span class="variable">$HOME</span>/2k300/openssh/install/openssh --with-ssl-dir=<span class="variable">$HOME</span>/2k300/openssh/install/openssl --with-zlib=<span class="variable">$HOME</span>  </span><br><span class="line">/2k300/openssh/install/zlib LDFLAGS=<span class="string">&quot;-static -pthread&quot;</span> --sysconfdir=/etc/ssh --disable-strip</span><br><span class="line">make</span><br><span class="line">make install-files</span><br></pre></td></tr></table></figure><blockquote><p>注意 此处使用<code>~</code>概率会导致编译异常，使用<code>$HOME</code>代替</p></blockquote><p>这里因为没找到在哪指定strip工具的位置而禁用了strip，所以产物会稍微有丶大。</p><p>编译结束之后，产物可以在<code>$HOME/2k300/openssh/install/openssh</code>中找到。直接把文件传输到99pi对应的目录里即可。</p><p>传输方法可以使用tty串口传输，不过速度太慢：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server-side</span></span><br><span class="line">uuencode [filename-in-99pi] &lt; [file] &gt; /dev/ttyUSB0</span><br><span class="line"><span class="comment"># 99pi-side</span></span><br><span class="line">uudecode &lt; /dev/ttyS0 </span><br></pre></td></tr></table></figure><p>也可以使用tftp传输：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server-side:</span></span><br><span class="line">sudo uftpd -n -o ftp=0,tftp=69 ./</span><br><span class="line"><span class="comment"># 99pi-side</span></span><br><span class="line">tftp -g -l ssh-xxx -r openssh/bin/ssh-xxx [114.5.1.4]</span><br></pre></td></tr></table></figure><p>剩下的后面说。</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>ncurses: <a href="https://ftp.gnu.org/gnu/ncurses/ncurses-6.5.tar.gz">https://ftp.gnu.org/gnu/ncurses/ncurses-6.5.tar.gz</a></li><li>vim: <a href="https://github.com/vim/vim">https://github.com/vim/vim</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ncurses-6.5.tar.gz &amp;&amp; <span class="built_in">rm</span> ncurses-6.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ncurses-6.5/</span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/2k300/vim/nc_install --host=loongarch64-unknown-linux-gnu --without-cxx-binding --without-ada --without-progs --without-tests --with-shared</span><br><span class="line">make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TARGET=loongarch64-unknown-linux-gnu</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h3><blockquote><p>参考文档：龙芯2K300.软件uboot用户手册0.2</p></blockquote><p>把linux6.9源码里的</p><ul><li><code>arch/loongarch/boot/dts</code></li><li><code>include/dts-bindings</code></li></ul><p>复制到新的内核源码的对应位置，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=loongarch CROSS_COMPILE=loongarch64-unknown-linux-gnu- ls2k0300_99_pai_wifi_defconfig</span><br><span class="line">make ARCH=loongarch CROSS_COMPILE=loongarch64-unknown-linux-gnu- -j8</span><br></pre></td></tr></table></figure><p>产物：</p><ul><li><code>arch/loongarch/boot/vmlinux.bin</code></li><li><code>System.map</code></li></ul><p>现在制作<code>vmlinux.bin.lzma</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lzma -k ./linux-6.11/arch/loongarch/boot/vmlinux.bin</span><br><span class="line"><span class="built_in">mv</span> ./linux-6.11/arch/loongarch/boot/vmlinux.bin.lzma ./</span><br></pre></td></tr></table></figure><p>创建文件：multi.its，并更新其中的</p><ul><li><code>images/kernel-1/entry</code>：为<code>./linux-6.11/System.map</code>中的<code>kernel_entry</code>的地址，格式参考下方</li><li><code>images/kernel-1/data</code>：为lzma文件相对于当前文件的路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* U-Boot uImage <span class="built_in">source</span> file with multiple kernels and ramdisks blobs</span><br><span class="line">*/</span><br><span class="line">/dts-v1/;</span><br><span class="line">/&#123;</span><br><span class="line">    description = <span class="string">&quot;Various kernels and ramdisks blobs&quot;</span>;</span><br><span class="line">    <span class="comment">#address-cells = &lt;2&gt;;</span></span><br><span class="line">    images &#123;</span><br><span class="line">        kernel-1 &#123;</span><br><span class="line">            description = <span class="string">&quot;vmlinux&quot;</span>;</span><br><span class="line">            data = /incbin/(<span class="string">&quot;vmlinux.bin.lzma&quot;</span>);</span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&quot;kernel&quot;</span>;</span><br><span class="line">            <span class="built_in">arch</span> = <span class="string">&quot;loongarch&quot;</span>;</span><br><span class="line">            os = <span class="string">&quot;linux&quot;</span>;</span><br><span class="line">            compression = <span class="string">&quot;lzma&quot;</span>;</span><br><span class="line">            load = &lt;0x90000000 0x00200000&gt;;</span><br><span class="line">            entry = &lt;0x90000000 0x01348000&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    configurations &#123;</span><br><span class="line">        default = <span class="string">&quot;config-1&quot;</span>;</span><br><span class="line">        config-1 &#123;</span><br><span class="line">            description = <span class="string">&quot;vanilla-2.6.23 configuration&quot;</span>;</span><br><span class="line">            kernel = <span class="string">&quot;kernel-1&quot;</span>;</span><br><span class="line">            loadables = <span class="string">&quot;kernel-1&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>生成<code>uImage</code>镜像：<code>mkimage -f multi.its uImage</code></p><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><p>主要原因是aur比较香，而且软件分发也相对简单，反正pacman作为包管理够用。</p><p>北大的LCPU整了个LA64的AUR镜像源：</p><p><a href="https://loongarchlinux.lcpu.dev/">Arch Linux for Loongarch64</a></p><p>arch安装的核心就是准备一个能跑起来pacstrap的环境，然后就能用pacstrap去准备arch的rootfs了。</p><blockquote><p>意外发现原来有LA64的arch安装iso，这下不用自己准备rootfs了，好耶<br>居然忘了3A6000已经能用Arch了</p></blockquote><blockquote><p>哦，忘了，3A6000的abi跟2K0300不太一样，果然最后还是翻车了</p></blockquote><p>解压发现其中的<code>airootfs.sfs</code>，arch下安装<code>squashfs-tools</code>后，使用<code>sudo unsquashfs airootfs.sfs</code>解压rootfs。完成后编译一个<code>uImage</code>，丢到rootfs的<code>/boot</code>下。</p><p>准备一个ext4的U盘，将rootfs复制到其中。U盘插入99pi，启动并进入uboot cli，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ext4load usb 0 <span class="variable">$&#123;loadaddr&#125;</span> boot/uImage</span><br><span class="line">bootm <span class="variable">$&#123;loadaddr&#125;</span></span><br></pre></td></tr></table></figure><p>手动启动系统。</p><p>不过启动失败了，查报错感觉问题可能出在指令集不兼容上了，似乎是LA64的SIMD指令在2k300上用不了。</p><p>下一步应该就是手动编译一个arch rootfs再安装了。</p><h2 id="刷uboot"><a href="#刷uboot" class="headerlink" title="刷uboot"></a>刷uboot</h2><p>可以借助tftp刷入，也可以usb刷入。我用了后一种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主系统</span></span><br><span class="line">mkfs.ext2 /dev/sdb    <span class="comment"># 格式化U盘</span></span><br><span class="line">mount /dev/sdb ./tmp</span><br><span class="line"><span class="built_in">cp</span> u-boot-spl-gz.bin ./tmp/</span><br><span class="line">umount ./tmp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 99pi</span></span><br><span class="line"><span class="comment"># 插入U盘</span></span><br><span class="line"><span class="comment"># 启动时多次按c进入PMON控制台</span></span><br><span class="line">fload /dev/fs/ext2@usb0/u-boot-spl-gz.bin</span><br></pre></td></tr></table></figure><p>下面是输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PMON&gt; fload /dev/fs/ext2@usb0/u-boot-spl-gz.bin                                                            /  </span><br><span class="line">Loading file: /dev/fs/ext2@usb0/u-boot-spl-gz.bin dl_offset 900000000f800000 addr 900000000f800000  </span><br><span class="line">(bin)                                                                                                      |  </span><br><span class="line">Loaded 580432 bytes  </span><br><span class="line">  </span><br><span class="line">Programming flash 900000000f800000:8db50 into 800000001c000000  </span><br><span class="line">Erase end!                                                                                                 /  </span><br><span class="line">Programming end!  </span><br><span class="line">Verifying FLASH. No Errors found.  </span><br><span class="line">PMON&gt;</span><br></pre></td></tr></table></figure><p>此时就完成了，可以重启了。</p><h3 id="配置uboot参数"><a href="#配置uboot参数" class="headerlink" title="配置uboot参数"></a>配置uboot参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs console=ttyS0,115200n8 root=/dev/sda1 rootdelay=3</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure><h2 id="编译busybox最小系统"><a href="#编译busybox最小系统" class="headerlink" title="编译busybox最小系统"></a>编译busybox最小系统</h2><p>流程很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ./&#123;src,&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>编译失败</li></ul><p>不知道为啥，换<code>musl-gcc</code>就可以了。</p><ul><li><code>make menuconfig</code>总是会失败</li></ul><p>刚开始以为确实是依赖问题，把能想到的玩意都装了一圈之后觉得不对劲上Arch Wiki搜了一下：</p><p><a href="https://bbs.archlinux.org/viewtopic.php?id=295859">[已解决] make menuconfig 和 ncurses 库的问题 &#x2F; 新手 &#x2F; Arch Linux 论坛</a><br><a href="https://aur.archlinux.org/cgit/aur.git/tree/esp8266-rtos-sdk-aur-ncurses-fix.patch?h=esp8266-rtos-sdk">esp8266-rtos-sdk-aur-ncurses-fix.patch - aur.git - AUR Package Repositories</a></p><p>最后发现是<code>./scripts/kconfig/lxdialog/check-lxdialog.sh</code>的锅。里边的<code>check()</code>函数对main的写法有问题：应该在下图的main()前面加上int才能正常check到是否安装了ncurses库。</p><p><img src="/img/Pasted%20image%2020240920214920.png"></p><ul><li>启动失败</li></ul><p>我这里是因为menuconfig总是失败所以没法开<strong>Build static binary</strong>，开开就能跑了。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>磁带机入坑小记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%A1%AC%E4%BB%B6/%E7%A3%81%E5%B8%A6%E6%9C%BA%E5%85%A5%E5%9D%91%E5%B0%8F%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%A1%AC%E4%BB%B6/%E7%A3%81%E5%B8%A6%E6%9C%BA%E5%85%A5%E5%9D%91%E5%B0%8F%E8%AE%B0/</id>
    <published>2024-07-08T03:39:09.000Z</published>
    <updated>2025-03-12T15:31:34.804Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世上只有两种人：不备份数据的人和丢失过数据的人</p></blockquote><p>坑是去年入的，机是今年才用的，数据是才备份好的，磁带是热乎的。</p><h2 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h2><p>这个磁带机是我怂恿Ray一块合买的一个戴尔的LTO4磁带机。机器成色看着可以，这东西最大的问题是，这个价格只能买到走SAS连接的版本。所以在这之外还整了个HBA板卡用来把这东西接入主机的PCIE连接。</p><p>此外为了实现一些神奇的操作，我俩还整了个PCIE延长插槽，最后<del>转换器插转换器插转换器</del>成功给这玩意插到Ray的老ThinkPad上的Express插槽上了（Think.jpg</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一个电源，一个sas接口，都插上就完事了。就是得注意启动顺序，磁带机得在电脑之前上电启动。</p><p>Windows底下应该能在设备管理器底下找到磁带机的影子，Linux底下看看<code>/dev</code>底下有没有<code>st0, nst0</code>之类的字符设备就行，有就是连上了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只要你不是命令行恐惧症，我一律推荐你直接上Linux用GNU tar作为数据备份工具。Windows上那依托数据备份软件又贵又不好用，不如直接tar。</p><p>具体来说，插上磁带机之后，开机启动，系统里的<code>/dev</code>下应该会出现几个新的字符设备，一般有这么几个：<code>st0, nst0</code>之类的。这两个表示一个设备的两个模式，前者在操作完成后会自动倒带，后者则不会自动倒带。</p><p>Linux的文件模型将所有设备视为文件进行管理，对于磁带机同理。我们可以像使用其他设备一样使用磁带机，甚至可以直接用重定向符把输出流重定向到磁带机，或者直接用<code>dd</code>把数据写入磁带机设备。</p><p>另外由于数据IO作为系统调用，它一旦因为一些奇怪的原因失败有概率会导致系统内核因为死锁挂掉，症状就是其他的文件IO操作都会失败。这种时候只能重启了。</p><p>Win上我就不列出了，用过一个L开头的备份软件，又要收费又不好用。Linux上常用的有tar,dd,cpio等。这里只介绍tar和一个磁带机管理工具。另外<em>tar适用单磁带备份</em>，多磁带备份可以自行了解cpio。</p><h3 id="tar使用笔记"><a href="#tar使用笔记" class="headerlink" title="tar使用笔记"></a>tar使用笔记</h3><table><thead><tr><th align="left">操作</th><th align="left">指令</th></tr></thead><tbody><tr><td align="left">全盘覆盖从头写入</td><td align="left"><code>tar cvf /dev/st0 files/dirs</code></td></tr><tr><td align="left">附加模式写入磁带后部</td><td align="left"><code>tar rvf /dev/st0 files/dirs</code></td></tr><tr><td align="left">获取磁带文件列表</td><td align="left"><code>tar tvf /dev/st0 &gt; filelist.txt</code></td></tr><tr><td align="left">从磁带恢复文件列表到当前目录</td><td align="left"><code>tar xvf /dev/st0 [files/dirs]</code></td></tr></tbody></table><p>这里没列全，tar还有很多用法，比如增量备份，文件恢复</p><p>注意，磁带是线性文件系统，在LTFS出现之前的版本（比如LTO4），上面的操作都是很耗时的。</p><h3 id="mt-st使用笔记"><a href="#mt-st使用笔记" class="headerlink" title="mt-st使用笔记"></a>mt-st使用笔记</h3><p><code>mt-st</code>就是<em>Manage Tape</em>的缩写。它是用来管理磁带机的工具。</p><table><thead><tr><th align="left">操作</th><th align="left">指令</th></tr></thead><tbody><tr><td align="left"><code>mt-st -f /dev/st0 status</code></td><td align="left">获取设备状态</td></tr><tr><td align="left"><code>mt-st -f /dev/st0 rewind</code></td><td align="left">倒带</td></tr><tr><td align="left"><code>mt-st -f /dev/st0 eject</code></td><td align="left">弹出磁带</td></tr><tr><td align="left"><code>mt-st -f /dev/st0 erase</code></td><td align="left"><strong>慎用，对磁带有损伤且一般无必要</strong> 擦除磁带所有数据</td></tr></tbody></table><h3 id="其他玩法"><a href="#其他玩法" class="headerlink" title="其他玩法"></a>其他玩法</h3><p>刚说过了，磁带机作为一个字符设备，使用方式和其他设备一样，都是把输出数据流重定向到它在<code>/dev</code>下对应的字符设备。那玩法就多了。</p><p>首先，数据流可以从远端传过来：</p><ul><li>所以磁带机完全可以供多人<strong>远程使用</strong>，只要本地留个人插拔磁带就彳亍。比如通过ssh将自己的数据传入磁带机，实现远程数据备份。</li><li>局域网（比如校园局域网)底下这么玩很爽</li></ul><p>另外不光能远程，这个数据流还可以从别的进程传过来。比如可以从你的OBS推流里传过来，可以从你的其他设备传过来（比如摄像头之类的数据采集设备），可以从你的文件下载进程里传过来，还可以从任何数据处理进程里传过来。</p><p>反正最后都是花式数据备份嘛。实在闲得没事了还可以写个自助备份系统给别人用用。</p><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>每次掏出来磁带机就有人说这东西随机读写性能不行，傻逼才买。先不说某些人的教养问题，单说抛开需求和使用场景来看设备那不纯耍流氓。</p><p>一个纯用来冷备份的设备，作为长期数据储存的设备，真的有人会需要这玩意的随机读写能力？一般使用不都是数据丢失了，插上磁带开始全盘&#x2F;指定文件列表开始数据恢复嘛。当然你要想的是在这里边<del>下原神</del>打游戏那当我没说。</p><p>而且随机读写性能不等于读写性能，这玩意读写是能跑到<strong>100+MiBps，也就是800+Mbps</strong>的，一般手机下载文件&#x2F;普通U盘文件传输连续读写都跑不到这速度，而且<strong>LTO4的磁带15r&#x2F;盘，容量800GiB（不开压缩）~1600GiB（开压缩）</strong>，LTO4磁带机价格也下来了，拿来冷备份的成本和<strong>可靠性</strong>都远比机械&#x2F;固态优秀。</p><p>不过这玩意小众还是有原因的，最大的原因是这玩意一般不面向普通个人消费者，而是大型数据中心。其次是这玩意价格普遍很贵，特别是磁带机。只有那些相对落后几代的产品才有对比普通存储介质备份方案很明显的性价比优势。</p><p>嘛，本来想说下素质问题，想了下没必要，都那样了，还是顺从吧：”啊对对对“。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.gnu.org/software/tar/manual/html_section/Using-Multiple-Tapes.html">GNU tar 1.35: 9.6 Using Multiple Tapes</a></li><li><a href="https://www.gnu.org/software/tar/manual/html_chapter/Media.html">GNU tar 1.35: 9 Tapes and Other Archive Media</a></li><li><a href="https://www.cnblogs.com/amadeuslee/p/3799484.html">Linux 磁带机备份完全攻略 - 李济宏（Amadeus） - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/659337882">Arch Linux下使用HPE LTO5磁带机（含LTFS）记录 - 知乎</a></li><li><a href="https://blog.itpub.net/223653/viewspace-1301748/">Linux、UNIX下磁带机的管理和使用 （作者：张亚宁） - ITPUB博客</a></li><li><a href="http://www.01-datastorage.com/c/keep.html">{LTO磁带寿命预估}{怎样计算LTO磁带寿命}{如何让LTO磁带寿命更长}</a></li></ul>]]></content>
    
    
    <summary type="html">世上只有两种人：不备份数据的人和丢失过数据的人</summary>
    
    
    
    
    <category term="存储" scheme="https://mxts.jiujiuer.xyz/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="备份" scheme="https://mxts.jiujiuer.xyz/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Linux上的ESP32+MicroPython开发手记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/07/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Linux%E4%B8%8A%E7%9A%84ESP32+MicroPython%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/07/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Linux%E4%B8%8A%E7%9A%84ESP32+MicroPython%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/</id>
    <published>2024-07-05T06:03:13.000Z</published>
    <updated>2025-03-12T15:31:34.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ref:<a href="https://www.cnblogs.com/orangeQWJ/p/17762992.html">ESP32-MicroPython 开发环境 - orangeQWJ - 博客园</a></p></blockquote><p>之前一直想在Linux上玩玩手头的ESP32板子，但是奈何开发工具（好像叫Thonny）兼容Win，也懒得在Linux上再装一个。最近有空了才研究了一下，发现把板子插上，系统里是会出现一个字符设备的。不过大前提是<strong>ESP32的板子是MicroPython固件</strong>应该才行。</p><h2 id="连接终端"><a href="#连接终端" class="headerlink" title="连接终端"></a>连接终端</h2><blockquote><p><a href="https://www.cnblogs.com/muahao/articles/5673282.html">[转载]各种终端 &#x2F;dev&#x2F;tty - 苏小北1024 - 博客园</a></p></blockquote><p>既然设备在<code>/dev</code>底下显示了，那肯定就能连上。在Win上的时候IDE会自动连接上设备的MicroPython的repl解释器。Linux底下根据参考资料应该是可以借助<code>screen</code>连接。我的设备显示为<code>/dev/ttyUSB0</code>，那么就使用下面的指令以115200的波特率连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen /dev/ttyUSB0 115200</span><br></pre></td></tr></table></figure><p>连接后能看到确实是MicroPython的repl。</p><p>这里补充一下screen的使用，这里的<code>C-x</code>指的是<code>Ctrl+x</code>这样的组合键：</p><ul><li><code>C-a d</code>：断开当前screen的连接</li><li><code>C-a k</code>：终止当前screen的连接。完成repl交互的时候务必终止，不然会阻碍ampy的连接</li><li><code>screen -R</code>：恢复screen的连接</li></ul><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><p>虽然能用repl的<code>os.listdir()</code>和文件操作查看源码和其他文件的内容，但是还是不太方便。搜了一下发现Adafruit提供了一个用于在MicroPythhon兼容设备上文件管理的工具。我这里直接从AUR安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ampy</span><br></pre></td></tr></table></figure><p>装好之后，可以先设置一下环境变量，省得每次都要指定端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export AMPY_PORT=/dev/ttyUSB0&quot;</span> &gt;&gt; <span class="variable">$HOME</span>/.bashrc</span><br></pre></td></tr></table></figure><p>之后就不用指定下面所有的<code>--port /dev/ttyUSB0</code>参数了。</p><ul><li><code>ampy --port &lt;PORT&gt; ls [REMOTE_DIR]</code>：列出文件</li><li><code>ampy --port &lt;PORT&gt; get &lt;REMOTE_FILE&gt; [LOCAL_FILE]</code>：下载文件，输出到stdout&#x2F;本地文件</li><li><code>ampy --port &lt;PORT&gt; put &lt;FILE&gt;</code>：上传文件</li><li><code>ampy --port &lt;PORT&gt; rm &lt;REMOTE_FILE&gt;</code>：删除文件</li><li><code>ampy --port &lt;PORT&gt; mkdir &lt;DIR&gt;</code>：创建文件夹</li><li><code>ampy --port &lt;PORT&gt; run &lt;REMOTE_SCRIPT&gt;</code>：执行远程脚本</li></ul><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><p>MicroPython固件会在开机时先执行<code>/boot.py</code>，再执行<code>/main.py</code>主程序。如何编写就看程序的设计了。</p><hr><blockquote><p>PS：为了快速复制引用的网页还抽了半个小时做了个插件：<a href="https://github.com/xeonds/tab-clip?tab=readme-ov-file">xeonds&#x2F;tab-clip: Extension for clip the site info in markdown url format</a><br>虽然感觉有点傻就是了）</p></blockquote>]]></content>
    
    
    <summary type="html">非常好ESP32+EC800M，使我系统兼容</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenWRT折腾笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/OpenWRT%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/OpenWRT%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-30T19:54:58.000Z</published>
    <updated>2025-03-12T15:31:34.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多拨"><a href="#多拨" class="headerlink" title="多拨"></a>多拨</h2><blockquote><p>ref: <a href="https://www.red-yellow.net/%E5%8D%95%E7%BA%BF%E5%A4%9A%E6%8B%A8%E5%9C%A8openwrt%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html">单线多拨在OpenWrt系统中的实现方法 - 路由智态</a></p></blockquote><ul><li>在openwrt网页删除原来的wan网口，记住网口对应的接口</li><li>ssh到路由器，用命令创建接口的vlan（想拨几个创建几个接口）并启动</li><li>到openwrt网页从那几个vlan创建对应的wan_n，并给这几个vlan设备设置不同的metric（我这边不知道怎么会是翻译成“跃点“了）</li><li>完事，设置负载均衡</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><a href="https://zorz.cc/post/openwrt-macvlan.html">openwrt 单线多拨及IPV6策略路由&#x2F;分流&#x2F;负载均衡 - 网络资源 - 宅…orz</a></li><li><a href="https://www.red-yellow.net/openwrt%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8A%E5%A4%9A%E7%BA%BF%E5%A4%9A%E6%8B%A8%E6%8E%A7%E5%88%B6%E5%BA%94%E7%94%A8mwan3.html">OpenWrt的负载均衡及多线多拨控制应用mwan3 - 路由智态</a></li><li><a href="https://blog.x-wrt.com/docs/xwan/">多拨和负载均衡配置教程 | All about X-Wrt</a></li><li><a href="https://www.jiqw.com/gj/31897.jhtml">如何设置OpenWrt多拨的负载均衡策略-xiaowei-极全网</a></li><li><a href="https://myth.cx/p/openwrt-macvlan-mwan3/">OpenWrt 路由器 MacVLAN+MWAN3 校园网多拨超详细指南</a></li></ul><h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="OpenWRT拨号失败"><a href="#OpenWRT拨号失败" class="headerlink" title="OpenWRT拨号失败"></a>OpenWRT拨号失败</h3><p>今天换了OpenWRT，在WAN端口设置拨号后发现拨号失败，报错为<code>USER_REQUEST</code>。试了下<a href="https://jkboy.com/archives/44971.html">这个</a>解决方案：强制给端口指定MAC地址之后，发现拨号成功了。。</p><p>具体操作：网络管理端启用ssh，通过ssh连接路由器后，执行下面的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>然后，在<code>config interface &#39;wan&#39;</code>块的下面添加一行指派MAC地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option macaddr <span class="string">&#x27;a0:23:36:a8:8d:9e&#x27;</span></span><br></pre></td></tr></table></figure><p>然后重启WAN端口，发现拨号成功。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用OCaml编写一个SQL解释器</title>
    <link href="https://mxts.jiujiuer.xyz/2024/05/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%94%A8OCaml%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AASQL%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://mxts.jiujiuer.xyz/2024/05/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%94%A8OCaml%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AASQL%E8%A7%A3%E9%87%8A%E5%99%A8/</id>
    <published>2024-05-13T15:01:35.000Z</published>
    <updated>2025-03-12T15:31:34.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词法-amp-语法分析"><a href="#词法-amp-语法分析" class="headerlink" title="词法&amp;语法分析"></a>词法&amp;语法分析</h2><p>这两部分使用ocamllex和ocamlyacc就能完成。手写parser和lexer也可以，lexer没啥说的，<del>parser写个递归下降的版本应付一下也够用</del>。下面贴一下代码</p><blockquote><p>说实话，抛开编译原理，只是写语法的话，还是很简单的。先写好token识别器，确定好语言由哪些单词组成，再写好结构化的语法定义，然后丢给lex&#x2F;yacc&#x2F;bison之类的东西让它照着编译原理给你codegen出来一个能用的lexer和parser就行。</p></blockquote><p>首先是<code>lexer.mll</code>，这部分感觉基本跟ocaml的语法没啥区别：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">open</span> <span class="type">Parser</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exception</span> <span class="type">Lexing_error</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> whitespace = [<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\t&#x27;</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;\r&#x27;</span>]+</span><br><span class="line"><span class="keyword">let</span> digit = [<span class="string">&#x27;0&#x27;</span>-<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> alpha = [<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;z&#x27;</span> <span class="string">&#x27;A&#x27;</span>-<span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> alphanum = alpha | digit</span><br><span class="line"></span><br><span class="line">rule token = parse</span><br><span class="line">  | whitespace &#123; token lexbuf &#125; <span class="comment">(* Ignore whitespace *)</span></span><br><span class="line">  | digit+ <span class="keyword">as</span> num &#123; <span class="type">INT</span> (int_of_string num) &#125;</span><br><span class="line">  | digit+ <span class="string">&quot;.&quot;</span> digit* <span class="keyword">as</span> num &#123; <span class="type">FLOAT</span> (float_of_string num) &#125;</span><br><span class="line">  | (alpha | <span class="string">&#x27;_&#x27;</span>) (alphanum | <span class="string">&#x27;_&#x27;</span>)* <span class="keyword">as</span> id &#123; </span><br><span class="line">    <span class="keyword">match</span> <span class="type">String</span>.lowercase_ascii id <span class="keyword">with</span></span><br><span class="line">    | <span class="string">&quot;create&quot;</span> -&gt; <span class="type">CREATE</span> </span><br><span class="line">    | <span class="string">&quot;use&quot;</span>   -&gt; <span class="type">USE</span> </span><br><span class="line">    | <span class="string">&quot;show&quot;</span>  -&gt; <span class="type">SHOW</span> </span><br><span class="line">    | <span class="string">&quot;insert&quot;</span> -&gt; <span class="type">INSERT</span> </span><br><span class="line">    | <span class="string">&quot;into&quot;</span>  -&gt; <span class="type">INTO</span> </span><br><span class="line">    | <span class="string">&quot;select&quot;</span> -&gt; <span class="type">SELECT</span> </span><br><span class="line">    | <span class="string">&quot;update&quot;</span> -&gt; <span class="type">UPDATE</span> </span><br><span class="line">    | <span class="string">&quot;set&quot;</span>   -&gt; <span class="type">SET</span> </span><br><span class="line">    | <span class="string">&quot;drop&quot;</span>  -&gt; <span class="type">DROP</span> </span><br><span class="line">    | <span class="string">&quot;delete&quot;</span> -&gt; <span class="type">DELETE</span> </span><br><span class="line">    | <span class="string">&quot;from&quot;</span>   -&gt; <span class="type">FROM</span> </span><br><span class="line">    | <span class="string">&quot;where&quot;</span>  -&gt; <span class="type">WHERE</span> </span><br><span class="line">    | <span class="string">&quot;exit&quot;</span>   -&gt; <span class="type">EXIT</span> </span><br><span class="line">    | <span class="string">&quot;database&quot;</span> -&gt; <span class="type">DATABASE</span> </span><br><span class="line">    | <span class="string">&quot;databases&quot;</span> -&gt; <span class="type">DATABASES</span> </span><br><span class="line">    | <span class="string">&quot;tables&quot;</span> -&gt; <span class="type">TABLES</span> </span><br><span class="line">    | <span class="string">&quot;table&quot;</span> -&gt; <span class="type">TABLE</span> </span><br><span class="line">    | <span class="string">&quot;values&quot;</span> -&gt; <span class="type">VALUES</span> </span><br><span class="line">    | <span class="string">&quot;join&quot;</span>  -&gt; <span class="type">JOIN</span></span><br><span class="line">    | <span class="string">&quot;on&quot;</span>    -&gt; <span class="type">ON</span></span><br><span class="line">    | <span class="string">&quot;as&quot;</span>    -&gt; <span class="type">AS</span></span><br><span class="line">    | <span class="string">&quot;order&quot;</span> -&gt; <span class="type">ORDER</span></span><br><span class="line">    | <span class="string">&quot;begin&quot;</span> -&gt; <span class="type">BEGIN</span></span><br><span class="line">    | <span class="string">&quot;transaction&quot;</span> -&gt; <span class="type">TRANSACTION</span></span><br><span class="line">    | <span class="string">&quot;commit&quot;</span> -&gt; <span class="type">COMMIT</span></span><br><span class="line">    | <span class="string">&quot;rollback&quot;</span> -&gt; <span class="type">ROLLBACK</span></span><br><span class="line">    | <span class="string">&quot;lock&quot;</span> -&gt; <span class="type">LOCK</span></span><br><span class="line">    | <span class="string">&quot;unlock&quot;</span> -&gt; <span class="type">UNLOCK</span></span><br><span class="line">    | <span class="string">&quot;view&quot;</span> -&gt; <span class="type">VIEW</span></span><br><span class="line">    | <span class="string">&quot;index&quot;</span> -&gt; <span class="type">INDEX</span></span><br><span class="line">    | <span class="string">&quot;log&quot;</span> -&gt; <span class="type">LOG</span></span><br><span class="line">    | <span class="string">&quot;int&quot;</span> -&gt; <span class="type">INT_TYPE</span> </span><br><span class="line">    | <span class="string">&quot;string&quot;</span> -&gt; <span class="type">STRING_TYPE</span> </span><br><span class="line">    | <span class="string">&quot;float&quot;</span> -&gt; <span class="type">FLOAT_TYPE</span> </span><br><span class="line">    | <span class="string">&quot;bool&quot;</span> -&gt; <span class="type">BOOL_TYPE</span> </span><br><span class="line">    | <span class="string">&quot;and&quot;</span> -&gt; <span class="type">AND</span> </span><br><span class="line">    | <span class="string">&quot;or&quot;</span> -&gt; <span class="type">OR</span> </span><br><span class="line">    | <span class="string">&quot;not&quot;</span> -&gt; <span class="type">NOT</span> </span><br><span class="line">    | <span class="string">&quot;true&quot;</span> -&gt; <span class="type">BOOL</span> <span class="literal">true</span> </span><br><span class="line">    | <span class="string">&quot;false&quot;</span> -&gt; <span class="type">BOOL</span> <span class="literal">false</span> </span><br><span class="line">    | _ -&gt; <span class="type">IDENTIFIER</span> id</span><br><span class="line">  &#125;</span><br><span class="line">  | <span class="string">&#x27;&quot;&#x27;</span>[^<span class="string">&#x27;&quot;&#x27;</span>]*<span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">as</span> str &#123; <span class="type">STRING</span> (<span class="type">String</span>.sub str <span class="number">1</span> (<span class="type">String</span>.length str - <span class="number">2</span>)) &#125;</span><br><span class="line">  | <span class="string">&quot;*&quot;</span>     &#123; <span class="type">STAR</span> &#125;</span><br><span class="line">  | <span class="string">&quot;,&quot;</span>     &#123; <span class="type">COMMA</span> &#125;</span><br><span class="line">  | <span class="string">&quot;;&quot;</span>     &#123; <span class="type">SEMICOLON</span> &#125;</span><br><span class="line">  | <span class="string">&quot;.&quot;</span>     &#123; <span class="type">DOT</span> &#125;</span><br><span class="line">  | <span class="string">&quot;=&quot;</span>     &#123; <span class="type">EQUALS</span> &#125;</span><br><span class="line">  | <span class="string">&quot;&lt;&quot;</span>     &#123; <span class="type">LESS</span> &#125;</span><br><span class="line">  | <span class="string">&quot;&gt;&quot;</span>     &#123; <span class="type">GREATER</span> &#125;</span><br><span class="line">  | <span class="string">&quot;&lt;=&quot;</span>    &#123; <span class="type">LESS_EQUAL</span> &#125;</span><br><span class="line">  | <span class="string">&quot;&gt;=&quot;</span>    &#123; <span class="type">GREATER_EQUAL</span> &#125;</span><br><span class="line">  | <span class="string">&quot;&lt;&gt;&quot;</span>    &#123; <span class="type">NOT_EQUAL</span> &#125;</span><br><span class="line">  | <span class="string">&quot;+&quot;</span>     &#123; <span class="type">PLUS</span> &#125;</span><br><span class="line">  | <span class="string">&quot;-&quot;</span>     &#123; <span class="type">MINUS</span> &#125;</span><br><span class="line">  | <span class="string">&quot;/&quot;</span>     &#123; <span class="type">DIVIDE</span> &#125;</span><br><span class="line">  | <span class="string">&quot;%&quot;</span>     &#123; <span class="type">MOD</span> &#125;</span><br><span class="line">  | <span class="string">&quot;(&quot;</span>     &#123; <span class="type">LPAREN</span> &#125;</span><br><span class="line">  | <span class="string">&quot;)&quot;</span>     &#123; <span class="type">RPAREN</span> &#125;</span><br><span class="line">  | eof     &#123; <span class="type">EOF</span> &#125;</span><br><span class="line">  | _ <span class="keyword">as</span> c  &#123; raise (<span class="type">Lexing_error</span> (<span class="type">Printf</span>.sprintf <span class="string">&quot;Unexpected character: %c&quot;</span> c)) &#125;</span><br></pre></td></tr></table></figure><p>注释用<code>(* 注释 *)</code>分割。标头和标尾是会远原样复制到输出的部分，使用一对大括号包围起来，是可选部分。</p><p>然后是正则表达式，使用let定义。</p><p>接着是入口点定义，每个入口点都w会是一个接受n+1个参数的ocaml函数。</p><p>然后是<code>parser.mly</code>，语法也很简单，就不说了。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="type">Ast</span></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%token &lt;<span class="built_in">string</span>&gt; <span class="type">IDENTIFIER</span></span><br><span class="line">%token &lt;<span class="built_in">int</span>&gt; <span class="type">INT</span></span><br><span class="line">%token &lt;<span class="built_in">string</span>&gt; <span class="type">STRING</span></span><br><span class="line">%token &lt;<span class="built_in">float</span>&gt; <span class="type">FLOAT</span></span><br><span class="line">%token &lt;<span class="built_in">bool</span>&gt; <span class="type">BOOL</span></span><br><span class="line">%token <span class="type">CREATE</span> <span class="type">USE</span> <span class="type">SHOW</span> <span class="type">INSERT</span> <span class="type">INTO</span> <span class="type">SELECT</span> <span class="type">UPDATE</span> <span class="type">SET</span> <span class="type">DROP</span> <span class="type">DELETE</span> <span class="type">FROM</span> <span class="type">WHERE</span> <span class="type">EXIT</span></span><br><span class="line">%token <span class="type">DATABASES</span> <span class="type">DATABASE</span> <span class="type">TABLES</span> <span class="type">TABLE</span> <span class="type">VALUES</span> <span class="type">JOIN</span> <span class="type">ON</span> <span class="type">AS</span></span><br><span class="line">%token <span class="type">BEGIN</span> <span class="type">TRANSACTION</span> <span class="type">COMMIT</span> <span class="type">ROLLBACK</span> <span class="type">LOCK</span> <span class="type">UNLOCK</span></span><br><span class="line">%token <span class="type">VIEW</span> <span class="type">INDEX</span> <span class="type">LOG</span></span><br><span class="line">%token <span class="type">LPAREN</span> <span class="type">RPAREN</span> <span class="type">COMMA</span> <span class="type">SEMICOLON</span></span><br><span class="line">%token <span class="type">STAR</span> <span class="type">DOT</span> <span class="type">MOD</span> <span class="type">EQUALS</span> <span class="type">LESS</span> <span class="type">GREATER</span> <span class="type">LESS_EQUAL</span> <span class="type">GREATER_EQUAL</span> <span class="type">NOT_EQUAL</span> <span class="type">PLUS</span> <span class="type">MINUS</span> <span class="type">TIMES</span> <span class="type">DIVIDE</span></span><br><span class="line">%token <span class="type">EOF</span></span><br><span class="line">%token <span class="type">INT_TYPE</span> <span class="type">STRING_TYPE</span> <span class="type">FLOAT_TYPE</span> <span class="type">BOOL_TYPE</span></span><br><span class="line">%token <span class="type">AND</span> <span class="type">OR</span> <span class="type">NOT</span> <span class="type">ORDER</span> <span class="type">BY</span> <span class="type">LIMIT</span></span><br><span class="line"></span><br><span class="line">%start main</span><br><span class="line">%<span class="keyword">type</span> &lt;<span class="type">Ast</span>.expr&gt; main</span><br><span class="line"></span><br><span class="line">%% /* <span class="type">Grammar</span> rules <span class="keyword">and</span> actions */</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">  | statement <span class="type">SEMICOLON</span> &#123; $<span class="number">1</span> &#125;</span><br><span class="line">  | <span class="type">EOF</span> &#123; <span class="type">Exit</span> &#125;</span><br><span class="line"></span><br><span class="line">statement:</span><br><span class="line">  | <span class="type">SELECT</span> columns <span class="type">FROM</span> <span class="type">IDENTIFIER</span> opt_where &#123; <span class="type">Select</span>($<span class="number">2</span>, $<span class="number">4</span>, $<span class="number">5</span>) &#125;</span><br><span class="line">  | <span class="type">CREATE</span> <span class="type">DATABASE</span> <span class="type">IDENTIFIER</span> &#123; <span class="type">CreateDatabase</span> $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="type">USE</span> <span class="type">DATABASE</span> <span class="type">IDENTIFIER</span> &#123; <span class="type">UseDatabase</span> $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="type">CREATE</span> <span class="type">TABLE</span> <span class="type">IDENTIFIER</span> <span class="type">LPAREN</span> table_columns <span class="type">RPAREN</span> &#123; <span class="type">CreateTable</span>($<span class="number">3</span>, $<span class="number">5</span>) &#125;</span><br><span class="line">  | <span class="type">SHOW</span> <span class="type">TABLES</span> &#123; <span class="type">ShowTables</span> &#125;</span><br><span class="line">  | <span class="type">SHOW</span> <span class="type">DATABASES</span> &#123; <span class="type">ShowDatabases</span> &#125;</span><br><span class="line">  | <span class="type">INSERT</span> <span class="type">INTO</span> <span class="type">IDENTIFIER</span> <span class="type">LPAREN</span> columns <span class="type">RPAREN</span> <span class="type">VALUES</span> values &#123; <span class="type">InsertInto</span>($<span class="number">3</span>, $<span class="number">5</span>, $<span class="number">8</span>) &#125;</span><br><span class="line">  | <span class="type">UPDATE</span> <span class="type">IDENTIFIER</span> <span class="type">SET</span> <span class="type">IDENTIFIER</span> <span class="type">EQUALS</span> <span class="keyword">value</span> opt_where &#123; <span class="type">Update</span>($<span class="number">2</span>, $<span class="number">4</span>, $<span class="number">6</span>, $<span class="number">7</span>) &#125;</span><br><span class="line">  | <span class="type">DELETE</span> <span class="type">FROM</span> <span class="type">IDENTIFIER</span> opt_where &#123; <span class="type">Delete</span>($<span class="number">3</span>, $<span class="number">4</span>) &#125;</span><br><span class="line">  | <span class="type">DROP</span> <span class="type">TABLE</span> <span class="type">IDENTIFIER</span> &#123; <span class="type">DropTable</span> $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="type">DROP</span> <span class="type">DATABASE</span> <span class="type">IDENTIFIER</span> &#123; <span class="type">DropDatabase</span> $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="type">EXIT</span> &#123; <span class="type">Exit</span> &#125;</span><br><span class="line"></span><br><span class="line">table_columns:</span><br><span class="line">  | column_def <span class="type">COMMA</span> table_columns &#123; $<span class="number">1</span> :: $<span class="number">3</span> &#125;</span><br><span class="line">  | column_def &#123; [$<span class="number">1</span>] &#125;</span><br><span class="line"></span><br><span class="line">column_def:</span><br><span class="line">  | <span class="type">IDENTIFIER</span> data_type &#123; ($<span class="number">1</span>, $<span class="number">2</span>) &#125;</span><br><span class="line"></span><br><span class="line">columns:</span><br><span class="line">  | <span class="type">STAR</span> &#123; <span class="literal">[]</span> &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">COMMA</span> columns &#123; $<span class="number">1</span> :: $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> &#123; [$<span class="number">1</span>] &#125;</span><br><span class="line"></span><br><span class="line">values:</span><br><span class="line">  | <span class="type">LPAREN</span> values_def <span class="type">RPAREN</span> values &#123; $<span class="number">2</span> :: $<span class="number">4</span> &#125;</span><br><span class="line">  | <span class="type">LPAREN</span> values_def <span class="type">RPAREN</span> &#123; [$<span class="number">2</span>] &#125;</span><br><span class="line"></span><br><span class="line">values_def:</span><br><span class="line">  | <span class="keyword">value</span> <span class="type">COMMA</span> values_def &#123; $<span class="number">1</span> :: $<span class="number">3</span> &#125;</span><br><span class="line">  | <span class="keyword">value</span> &#123; [$<span class="number">1</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">value</span>:</span><br><span class="line">  | <span class="type">INT</span> &#123; <span class="type">IntValue</span> $<span class="number">1</span> &#125;</span><br><span class="line">  | <span class="type">STRING</span> &#123; <span class="type">StringValue</span> $<span class="number">1</span> &#125;</span><br><span class="line">  | <span class="type">FLOAT</span> &#123; <span class="type">FloatValue</span> $<span class="number">1</span> &#125;</span><br><span class="line">  | <span class="type">BOOL</span> &#123; <span class="type">BoolValue</span> $<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">data_type:</span><br><span class="line">  | <span class="type">INT_TYPE</span> &#123; <span class="type">IntType</span> &#125;</span><br><span class="line">  | <span class="type">STRING_TYPE</span> &#123; <span class="type">StringType</span> &#125;</span><br><span class="line">  | <span class="type">FLOAT_TYPE</span> &#123; <span class="type">FloatType</span> &#125;</span><br><span class="line">  | <span class="type">BOOL_TYPE</span> &#123; <span class="type">BoolType</span> &#125;</span><br><span class="line"></span><br><span class="line">opt_where:</span><br><span class="line">  | <span class="type">WHERE</span> condition &#123; <span class="type">Some</span> $<span class="number">2</span> &#125;</span><br><span class="line">  | &#123; <span class="type">None</span> &#125;</span><br><span class="line"></span><br><span class="line">condition:</span><br><span class="line">  | <span class="type">LPAREN</span> condition <span class="type">RPAREN</span> &#123; $<span class="number">2</span> &#125;</span><br><span class="line">  | <span class="type">NOT</span> condition &#123; <span class="type">Not</span> $<span class="number">2</span> &#125;</span><br><span class="line">  | condition <span class="type">AND</span> condition &#123; <span class="type">And</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | condition <span class="type">OR</span> condition &#123; <span class="type">Or</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">LESS</span> <span class="keyword">value</span> &#123; <span class="type">LessThan</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">GREATER</span> <span class="keyword">value</span> &#123; <span class="type">GreaterThan</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">LESS_EQUAL</span> <span class="keyword">value</span> &#123; <span class="type">LessEqual</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">GREATER_EQUAL</span> <span class="keyword">value</span> &#123; <span class="type">GreaterEqual</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">NOT_EQUAL</span> <span class="keyword">value</span> &#123; <span class="type">NotEqual</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br><span class="line">  | <span class="type">IDENTIFIER</span> <span class="type">EQUALS</span> <span class="keyword">value</span> &#123; <span class="type">Equal</span>($<span class="number">1</span>, $<span class="number">3</span>) &#125;</span><br></pre></td></tr></table></figure><p>可以看出来我就没支持多少功能，是的<del>因为我懒</del>。</p><p>然后是上面提到的<code>ast.ml</code>，里面是各种类型声明，包括存储引擎的函数原型，存储引擎支持的数据类型和表达式的类型等：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> data_type = <span class="type">IntType</span> | <span class="type">StringType</span> | <span class="type">FloatType</span> | <span class="type">BoolType</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">value</span> =</span><br><span class="line">  | <span class="type">IntValue</span> <span class="keyword">of</span> <span class="built_in">int</span></span><br><span class="line">  | <span class="type">StringValue</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">  | <span class="type">FloatValue</span> <span class="keyword">of</span> <span class="built_in">float</span></span><br><span class="line">  | <span class="type">BoolValue</span> <span class="keyword">of</span> <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> expr =</span><br><span class="line">  | <span class="type">CreateDatabase</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">  | <span class="type">UseDatabase</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">  | <span class="type">CreateTable</span> <span class="keyword">of</span> <span class="built_in">string</span> * (<span class="built_in">string</span> * data_type) <span class="built_in">list</span></span><br><span class="line">  | <span class="type">ShowTables</span></span><br><span class="line">  | <span class="type">ShowDatabases</span></span><br><span class="line">  | <span class="type">InsertInto</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="built_in">string</span> <span class="built_in">list</span> * <span class="keyword">value</span> <span class="built_in">list</span> <span class="built_in">list</span></span><br><span class="line">  | <span class="type">Select</span> <span class="keyword">of</span> <span class="built_in">string</span> <span class="built_in">list</span> * <span class="built_in">string</span> * (condition option)</span><br><span class="line">  | <span class="type">Update</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="built_in">string</span> * <span class="keyword">value</span> * (condition option)</span><br><span class="line">  | <span class="type">Delete</span> <span class="keyword">of</span> <span class="built_in">string</span> * (condition option)</span><br><span class="line">  | <span class="type">DropTable</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">  | <span class="type">DropDatabase</span> <span class="keyword">of</span> <span class="built_in">string</span></span><br><span class="line">  | <span class="type">Exit</span></span><br><span class="line"><span class="keyword">and</span> condition =</span><br><span class="line">  | <span class="type">LessThan</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">GreaterThan</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">LessEqual</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">GreaterEqual</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">NotEqual</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">Equal</span> <span class="keyword">of</span> <span class="built_in">string</span> * <span class="keyword">value</span></span><br><span class="line">  | <span class="type">And</span> <span class="keyword">of</span> condition * condition</span><br><span class="line">  | <span class="type">Or</span> <span class="keyword">of</span> condition * condition</span><br><span class="line">  | <span class="type">Not</span> <span class="keyword">of</span> condition</span><br></pre></td></tr></table></figure><p>这部分也是简单写了下，没打算整太复杂的。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>语义分析这部分的目的是为了codegen，不过我写的版本比较简单，就不考虑优化了。直接让系统去用存储引擎执行解析好的AST就ok。</p><p>每个语句对应的AST对存储引擎的调用方法都是在设计parser的时候设计好的。所以这部分没难度，最后产物的程序一定会按照你写的语法规则对应的结构去一个一个调用存储引擎的接口实现具体的存储功能。</p><p>虽然一次丢上来快300行的代码块比较谔谔，但是反正我注释也写的挺清楚的就这样吧（</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="type">Ast</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 当前使用的数据库路径 *)</span></span><br><span class="line"><span class="keyword">let</span> current_db = <span class="built_in">ref</span> <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 创建数据库目录 *)</span></span><br><span class="line"><span class="keyword">let</span> create_database db_name =</span><br><span class="line">  <span class="keyword">if</span> <span class="type">Sys</span>.file_exists db_name <span class="keyword">then</span></span><br><span class="line">    <span class="type">Printf</span>.printf <span class="string">&quot;Database %s already exists.\n&quot;</span> db_name</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="type">Unix</span>.mkdir db_name <span class="number">0o755</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 切换数据库 *)</span></span><br><span class="line"><span class="keyword">let</span> use_database db_name =</span><br><span class="line">  <span class="keyword">if</span> <span class="type">Sys</span>.file_exists db_name &amp;&amp; <span class="type">Sys</span>.is_directory db_name <span class="keyword">then</span> (</span><br><span class="line">    current_db := <span class="type">Some</span> db_name;</span><br><span class="line">    <span class="type">Printf</span>.printf <span class="string">&quot;Switched to database %s.\n&quot;</span> db_name)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="type">Printf</span>.printf <span class="string">&quot;Database %s does not exist.\n&quot;</span> db_name</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 类型名转类型 *)</span></span><br><span class="line"><span class="keyword">let</span> type_of_name = <span class="keyword">function</span></span><br><span class="line">  | <span class="string">&quot;INT&quot;</span> -&gt; <span class="type">IntType</span></span><br><span class="line">  | <span class="string">&quot;STRING&quot;</span> -&gt; <span class="type">StringType</span></span><br><span class="line">  | <span class="string">&quot;FLOAT&quot;</span> -&gt; <span class="type">FloatType</span></span><br><span class="line">  | <span class="string">&quot;BOOL&quot;</span> -&gt; <span class="type">BoolType</span></span><br><span class="line">  | _ -&gt; raise (<span class="type">Invalid_argument</span> <span class="string">&quot;Invalid type&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 类型转类型名 *)</span></span><br><span class="line"><span class="keyword">let</span> name_of_type = <span class="keyword">function</span></span><br><span class="line">  | <span class="type">IntType</span> -&gt; <span class="string">&quot;INT&quot;</span></span><br><span class="line">  | <span class="type">StringType</span> -&gt; <span class="string">&quot;STRING&quot;</span></span><br><span class="line">  | <span class="type">FloatType</span> -&gt; <span class="string">&quot;FLOAT&quot;</span></span><br><span class="line">  | <span class="type">BoolType</span> -&gt; <span class="string">&quot;BOOL&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 创建表（CSV文件） *)</span></span><br><span class="line"><span class="keyword">let</span> create_table table_name columns =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span></span><br><span class="line">      <span class="type">Printf</span>.printf <span class="string">&quot;Table %s already exists.\n&quot;</span> table_name</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">let</span> csv = <span class="type">Csv</span>.to_channel (open_out table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> col_names, col_types = <span class="type">List</span>.split columns <span class="keyword">in</span></span><br><span class="line">      <span class="type">Csv</span>.output_record csv col_names;</span><br><span class="line">      <span class="type">Csv</span>.output_record csv (<span class="type">List</span>.map(<span class="keyword">fun</span> t -&gt; <span class="keyword">match</span> t <span class="keyword">with</span></span><br><span class="line">        | <span class="type">IntType</span> -&gt; <span class="string">&quot;INT&quot;</span></span><br><span class="line">        | <span class="type">StringType</span> -&gt; <span class="string">&quot;STRING&quot;</span></span><br><span class="line">        | <span class="type">FloatType</span> -&gt; <span class="string">&quot;FLOAT&quot;</span></span><br><span class="line">        | <span class="type">BoolType</span> -&gt; <span class="string">&quot;BOOL&quot;</span>) col_types);</span><br><span class="line">      <span class="type">Csv</span>.close_out csv</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 显示当前数据库中的表 *)</span></span><br><span class="line"><span class="keyword">let</span> show_tables <span class="literal">()</span> =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt; <span class="keyword">let</span> files = <span class="type">Sys</span>.readdir db_name <span class="keyword">in</span> <span class="type">Array</span>.iter (<span class="keyword">fun</span> f -&gt; <span class="keyword">if</span> <span class="type">Filename</span>.check_suffix f <span class="string">&quot;.csv&quot;</span> <span class="keyword">then</span> <span class="type">Printf</span>.printf <span class="string">&quot;%s\n&quot;</span> (<span class="type">Filename</span>.chop_suffix f <span class="string">&quot;.csv&quot;</span>)) files</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 显示所有数据库 *)</span></span><br><span class="line"><span class="keyword">let</span> show_databases <span class="literal">()</span> =</span><br><span class="line">  <span class="keyword">match</span> <span class="type">Sys</span>.readdir <span class="string">&quot;.&quot;</span> <span class="keyword">with</span></span><br><span class="line">  | files -&gt; <span class="type">Array</span>.iter (<span class="keyword">fun</span> f -&gt; <span class="keyword">if</span> <span class="type">Sys</span>.is_directory f <span class="keyword">then</span> <span class="type">Printf</span>.printf <span class="string">&quot;%s\n&quot;</span> f) files</span><br><span class="line">  | <span class="keyword">exception</span> <span class="type">Sys_error</span> msg -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;Error: %s\n&quot;</span> msg</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 将value转换为字符串 *)</span></span><br><span class="line"><span class="keyword">let</span> string_of_value = <span class="keyword">function</span></span><br><span class="line">  | <span class="type">IntValue</span> v -&gt; string_of_int v</span><br><span class="line">  | <span class="type">StringValue</span> v -&gt; v</span><br><span class="line">  | <span class="type">FloatValue</span> v -&gt; string_of_float v</span><br><span class="line">  | <span class="type">BoolValue</span> v -&gt; string_of_bool v</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 将字符串转换为value *)</span></span><br><span class="line"><span class="keyword">let</span> value_of_string = <span class="keyword">function</span></span><br><span class="line">  | <span class="string">&quot;true&quot;</span> -&gt; <span class="type">BoolValue</span> <span class="literal">true</span></span><br><span class="line">  | <span class="string">&quot;false&quot;</span> -&gt; <span class="type">BoolValue</span> <span class="literal">false</span></span><br><span class="line">  | s -&gt; <span class="keyword">match</span> int_of_string_opt s <span class="keyword">with</span></span><br><span class="line">    | <span class="type">Some</span> i -&gt; <span class="type">IntValue</span> i</span><br><span class="line">    | <span class="type">None</span> -&gt; <span class="keyword">match</span> float_of_string_opt s <span class="keyword">with</span></span><br><span class="line">      | <span class="type">Some</span> f -&gt; <span class="type">FloatValue</span> f</span><br><span class="line">      | <span class="type">None</span> -&gt; <span class="type">StringValue</span> s</span><br><span class="line"><span class="comment">(* 获取字符串对应的数据的类型 *)</span></span><br><span class="line"><span class="keyword">let</span> type_of_string <span class="built_in">string</span> = <span class="keyword">match</span> value_of_string <span class="built_in">string</span> <span class="keyword">with</span></span><br><span class="line">  | <span class="type">IntValue</span> _ -&gt; <span class="type">IntType</span></span><br><span class="line">  | <span class="type">StringValue</span> _ -&gt; <span class="type">StringType</span></span><br><span class="line">  | <span class="type">FloatValue</span> _ -&gt; <span class="type">FloatType</span></span><br><span class="line">  | <span class="type">BoolValue</span> _ -&gt; <span class="type">BoolType</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 获取数据的类型 *)</span></span><br><span class="line"><span class="keyword">let</span> type_of_data data = <span class="keyword">match</span> data <span class="keyword">with</span></span><br><span class="line">  | <span class="type">IntValue</span> _ -&gt; <span class="type">IntType</span></span><br><span class="line">  | <span class="type">StringValue</span> _ -&gt; <span class="type">StringType</span></span><br><span class="line">  | <span class="type">FloatValue</span> _ -&gt; <span class="type">FloatType</span></span><br><span class="line">  | <span class="type">BoolValue</span> _ -&gt; <span class="type">BoolType</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 条件表达式求值，摆烂了 *)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> eval_cond cond row headers = <span class="keyword">match</span> cond <span class="keyword">with</span></span><br><span class="line">  | <span class="type">LessThan</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) &lt; v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) &lt; v</span><br><span class="line">    | _, _ -&gt; <span class="literal">false</span>)</span><br><span class="line">  | <span class="type">GreaterThan</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) &gt; v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) &gt; v</span><br><span class="line">    | _, _ -&gt; <span class="literal">false</span>)</span><br><span class="line">  | <span class="type">LessEqual</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) &lt;= v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) &lt;= v</span><br><span class="line">    | _, _ -&gt; <span class="literal">false</span>)</span><br><span class="line">  | <span class="type">GreaterEqual</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) &gt;= v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) &gt;= v</span><br><span class="line">    | _, _ -&gt; <span class="literal">false</span>)</span><br><span class="line">  | <span class="type">Equal</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) = v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) = v</span><br><span class="line">    | i, <span class="type">StringValue</span> v -&gt; <span class="type">List</span>.nth row i = v</span><br><span class="line">    | i, <span class="type">BoolValue</span> v -&gt; bool_of_string (<span class="type">List</span>.nth row i) = v)</span><br><span class="line">  | <span class="type">NotEqual</span> (col, <span class="keyword">value</span>) -&gt; (<span class="keyword">match</span> <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers), <span class="keyword">value</span> <span class="keyword">with</span></span><br><span class="line">    | i, <span class="type">IntValue</span> v -&gt; int_of_string (<span class="type">List</span>.nth row i) &lt;&gt; v</span><br><span class="line">    | i, <span class="type">FloatValue</span> v -&gt; float_of_string (<span class="type">List</span>.nth row i) &lt;&gt; v</span><br><span class="line">    | i, <span class="type">StringValue</span> v -&gt; <span class="type">List</span>.nth row i &lt;&gt; v</span><br><span class="line">    | i, <span class="type">BoolValue</span> v -&gt; bool_of_string (<span class="type">List</span>.nth row i) &lt;&gt; v)</span><br><span class="line">  | <span class="type">And</span> (cond1, cond2) -&gt; (eval_cond cond1 row headers) &amp;&amp; (eval_cond cond2 row headers)</span><br><span class="line">  | <span class="type">Or</span> (cond1, cond2) -&gt; (eval_cond cond1 row headers) || (eval_cond cond2 row headers)</span><br><span class="line">  | <span class="type">Not</span> cond -&gt; not (eval_cond cond row headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 插入数据到表中，校验了类型信息，支持默认填充空值 *)</span></span><br><span class="line"><span class="keyword">let</span> insert_into table_name columns values =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> csvIn = <span class="type">Csv</span>.of_channel (open_in table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> csvOut = <span class="type">Csv</span>.to_channel (open_out_gen [<span class="type">Open_append</span>] <span class="number">0o666</span> table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> headers = <span class="type">Csv</span>.next csvIn <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> types = <span class="type">List</span>.map2 (<span class="keyword">fun</span> h t -&gt; (h, type_of_name t)) headers (<span class="type">Csv</span>.next csvIn) <span class="keyword">in</span></span><br><span class="line">      <span class="type">List</span>.iteri (<span class="keyword">fun</span> row <span class="keyword">value</span> -&gt; <span class="type">Csv</span>.output_record csvOut (<span class="type">List</span>.map (<span class="keyword">fun</span> header -&gt; </span><br><span class="line">        <span class="keyword">match</span> <span class="type">List</span>.assoc_opt header (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) columns) <span class="keyword">with</span></span><br><span class="line">        | <span class="type">Some</span> index -&gt; (</span><br><span class="line">          <span class="keyword">let</span> _,t = <span class="type">List</span>.nth types index <span class="keyword">in</span></span><br><span class="line">          <span class="keyword">let</span> tt = type_of_data (<span class="type">List</span>.nth <span class="keyword">value</span> index) <span class="keyword">in</span> </span><br><span class="line">          <span class="keyword">if</span> t != tt <span class="keyword">then</span> <span class="type">Printf</span>.printf <span class="string">&quot;Type mismatch for row %d, column %s\n; Replaced with default value&quot;</span> row header;</span><br><span class="line">          <span class="keyword">if</span> t == tt <span class="keyword">then</span> string_of_value(<span class="type">List</span>.nth <span class="keyword">value</span> index)</span><br><span class="line">            <span class="keyword">else</span> string_of_value (<span class="keyword">match</span> t <span class="keyword">with</span></span><br><span class="line">              | <span class="type">IntType</span> -&gt; <span class="type">IntValue</span> <span class="number">0</span></span><br><span class="line">              | <span class="type">FloatType</span> -&gt; <span class="type">FloatValue</span> <span class="number">0.0</span></span><br><span class="line">              | <span class="type">StringType</span> -&gt; <span class="type">StringValue</span> <span class="string">&quot;&quot;</span></span><br><span class="line">              | <span class="type">BoolType</span> -&gt; <span class="type">BoolValue</span> <span class="literal">false</span>))</span><br><span class="line">        | <span class="type">None</span> -&gt; string_of_value (<span class="keyword">match</span> <span class="type">List</span>.assoc header types <span class="keyword">with</span></span><br><span class="line">          | <span class="type">IntType</span> -&gt; <span class="type">IntValue</span> <span class="number">0</span></span><br><span class="line">          | <span class="type">FloatType</span> -&gt; <span class="type">FloatValue</span> <span class="number">0.0</span></span><br><span class="line">          | <span class="type">StringType</span> -&gt; <span class="type">StringValue</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          | <span class="type">BoolType</span> -&gt; <span class="type">BoolValue</span> <span class="literal">false</span>)) headers)) values;</span><br><span class="line">      <span class="type">Csv</span>.close_in csvIn;</span><br><span class="line">      <span class="type">Csv</span>.close_out csvOut;</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Table %s does not exist.\n&quot;</span> table_name</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 选择数据（简化实现，没做更细的校验了） *)</span></span><br><span class="line"><span class="keyword">let</span> select columns table_name condition =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> csv = <span class="type">Csv</span>.of_channel (open_in table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="comment">(* Read header *)</span></span><br><span class="line">      <span class="keyword">let</span> headers = <span class="type">Csv</span>.next csv <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> _ = <span class="type">Csv</span>.next csv <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> col_indices = <span class="type">List</span>.map (<span class="keyword">fun</span> col -&gt; <span class="type">List</span>.assoc col (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers)) (<span class="keyword">match</span> columns <span class="keyword">with</span> </span><br><span class="line">        | <span class="literal">[]</span> -&gt; headers</span><br><span class="line">        | _ -&gt; columns) <span class="keyword">in</span></span><br><span class="line">      <span class="comment">(* Filter and print rows *)</span></span><br><span class="line">      <span class="type">Csv</span>.iter ~f:(<span class="keyword">fun</span> row -&gt;</span><br><span class="line">        <span class="keyword">let</span> selected_values = <span class="type">List</span>.map (<span class="keyword">fun</span> i -&gt; <span class="type">List</span>.nth row i) col_indices <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> row_match_cond = <span class="keyword">match</span> condition <span class="keyword">with</span></span><br><span class="line">          | <span class="type">None</span> -&gt; <span class="literal">true</span></span><br><span class="line">          | <span class="type">Some</span> cond -&gt; (eval_cond cond row headers) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> row_match_cond <span class="keyword">then</span> <span class="type">Printf</span>.printf <span class="string">&quot;%s\n&quot;</span> (<span class="type">String</span>.concat <span class="string">&quot;, &quot;</span> selected_values)</span><br><span class="line">        <span class="keyword">else</span> <span class="literal">()</span>) csv;</span><br><span class="line">      <span class="type">Csv</span>.close_in csv</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Table %s does not exist.\n&quot;</span> table_name</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 更新数据 *)</span></span><br><span class="line"><span class="keyword">let</span> update_table table_name column <span class="keyword">value</span> condition =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> data_origin = <span class="type">Csv</span>.load table_path <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> headers = <span class="type">List</span>.hd data_origin <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> types = <span class="type">List</span>.hd (<span class="type">List</span>.tl data_origin) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> records = <span class="type">List</span>.tl (<span class="type">List</span>.tl data_origin) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> col_index = <span class="type">List</span>.assoc column (<span class="type">List</span>.mapi (<span class="keyword">fun</span> i h -&gt; (h, i)) headers) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> data_updated = <span class="type">List</span>.mapi (<span class="keyword">fun</span> _ row -&gt; </span><br><span class="line">        <span class="keyword">let</span> row_match_cond = <span class="keyword">match</span> condition <span class="keyword">with</span></span><br><span class="line">          | <span class="type">None</span> -&gt; <span class="literal">true</span></span><br><span class="line">          | <span class="type">Some</span> cond -&gt; (eval_cond cond row headers) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> row_match_cond <span class="keyword">then</span> <span class="type">List</span>.mapi (<span class="keyword">fun</span> j v -&gt; <span class="keyword">if</span> j == col_index <span class="keyword">then</span> string_of_value <span class="keyword">value</span> <span class="keyword">else</span> v) row</span><br><span class="line">        <span class="keyword">else</span> row) records <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> csv = <span class="type">Csv</span>.to_channel (open_out table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="type">Csv</span>.output_record csv headers;</span><br><span class="line">      <span class="type">Csv</span>.output_record csv types;</span><br><span class="line">      <span class="type">List</span>.iter (<span class="keyword">fun</span> row -&gt; <span class="type">Csv</span>.output_record csv row) data_updated;</span><br><span class="line">      <span class="type">Csv</span>.close_out csv</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Table %s does not exist.\n&quot;</span> table_name</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 删除数据 *)</span></span><br><span class="line"><span class="keyword">let</span> delete_from table_name condition =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> data_origin = <span class="type">Csv</span>.load table_path <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> headers = <span class="type">List</span>.hd data_origin <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> types = <span class="type">List</span>.hd (<span class="type">List</span>.tl data_origin) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> records = <span class="type">List</span>.tl (<span class="type">List</span>.tl data_origin) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> data_deleted = <span class="type">List</span>.mapi (<span class="keyword">fun</span> _ row -&gt; <span class="keyword">if</span> (</span><br><span class="line">        <span class="keyword">match</span> condition <span class="keyword">with</span></span><br><span class="line">        | <span class="type">None</span> -&gt; <span class="literal">true</span></span><br><span class="line">        | <span class="type">Some</span> cond -&gt; (eval_cond cond row headers)</span><br><span class="line">      ) <span class="keyword">then</span> <span class="type">None</span> <span class="keyword">else</span> <span class="type">Some</span> row) records <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> csv = <span class="type">Csv</span>.to_channel (open_out table_path) <span class="keyword">in</span></span><br><span class="line">      <span class="type">Csv</span>.output_record csv headers;</span><br><span class="line">      <span class="type">Csv</span>.output_record csv types;</span><br><span class="line">      <span class="type">List</span>.iter (<span class="keyword">fun</span> row -&gt; <span class="keyword">match</span> row <span class="keyword">with</span></span><br><span class="line">        | <span class="type">Some</span> r -&gt; <span class="type">Csv</span>.output_record csv r</span><br><span class="line">        | <span class="type">None</span> -&gt; <span class="literal">()</span>) data_deleted;</span><br><span class="line">      <span class="type">Csv</span>.close_out csv</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Table %s does not exist.\n&quot;</span> table_name</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 删除数据库目录，慎用，路径注入利用会删不该删的东西 *)</span></span><br><span class="line"><span class="keyword">let</span> drop_database db_name =</span><br><span class="line">  <span class="keyword">if</span> <span class="type">Sys</span>.file_exists db_name <span class="keyword">then</span></span><br><span class="line">    <span class="type">Sys</span>.command (<span class="type">Printf</span>.sprintf <span class="string">&quot;rm -rf %s&quot;</span> db_name) |&gt; ignore</span><br><span class="line">  <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Database %s does not exist.\n&quot;</span> db_name</span><br><span class="line"></span><br><span class="line"><span class="comment">(* 删除表（CSV文件）。同上 *)</span></span><br><span class="line"><span class="keyword">let</span> drop_table table_name =</span><br><span class="line">  <span class="keyword">match</span> !current_db <span class="keyword">with</span></span><br><span class="line">  | <span class="type">Some</span> db_name -&gt;</span><br><span class="line">    <span class="keyword">let</span> table_path = <span class="type">Filename</span>.concat db_name (table_name ^ <span class="string">&quot;.csv&quot;</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Sys</span>.file_exists table_path <span class="keyword">then</span> <span class="type">Sys</span>.remove table_path</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Printf</span>.printf <span class="string">&quot;Table %s does not exist.\n&quot;</span> table_name</span><br><span class="line">  | <span class="type">None</span> -&gt; <span class="type">Printf</span>.printf <span class="string">&quot;No database selected.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 退出程序 *)</span></span><br><span class="line"><span class="keyword">let</span> exit_program <span class="literal">()</span> =</span><br><span class="line">  <span class="type">Printf</span>.printf <span class="string">&quot;Exiting...\n&quot;</span>;</span><br><span class="line">  exit <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* 表达式求值，根据表达式类型和表达式的参数列表调用相关的存储引擎实现 *)</span></span><br><span class="line"><span class="keyword">let</span> eval_expr = <span class="keyword">function</span></span><br><span class="line">  | <span class="type">CreateDatabase</span> name -&gt; create_database name</span><br><span class="line">  | <span class="type">UseDatabase</span> name -&gt; use_database name</span><br><span class="line">  | <span class="type">CreateTable</span> (name, cols) -&gt; create_table name cols</span><br><span class="line">  | <span class="type">ShowDatabases</span> -&gt; show_databases <span class="literal">()</span></span><br><span class="line">  | <span class="type">ShowTables</span> -&gt; show_tables <span class="literal">()</span></span><br><span class="line">  | <span class="type">InsertInto</span> (table, cols, vals) -&gt; insert_into table cols vals</span><br><span class="line">  | <span class="type">Select</span> (cols, table, cond) -&gt; select cols table cond</span><br><span class="line">  | <span class="type">Update</span> (table, col, <span class="keyword">value</span>, cond) -&gt; update_table table col <span class="keyword">value</span> cond</span><br><span class="line">  | <span class="type">Delete</span> (table, cond) -&gt; delete_from table cond</span><br><span class="line">  | <span class="type">DropTable</span> name -&gt; drop_table name</span><br><span class="line">  | <span class="type">DropDatabase</span> name -&gt; drop_database name</span><br><span class="line">  | <span class="type">Exit</span> -&gt; exit_program <span class="literal">()</span></span><br></pre></td></tr></table></figure><p>实现看源码就行，OCaml编程体验确实一绝，一个强大的类型系统+不可变数据类型+纯函数可以解决很多状态变化导致的神必bug。</p><p>时间-精力原因，大概就做了上面那么一点。更多什么视图，锁之类的东西本身我也不太熟，也就没做。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>所以说，从实现上来说没什么难点，比较困难的部分就是工程难度：sql语句太多了，可能的组合也很多。而且sql本身也是上下文相关语法，对于存储引擎的调用也会存在需要记录复杂状态的情况，要把这依托东西完整实现出来需要不少时间。能看出来我现在的实现并不支持那些长的一批的sql语句，它现在基本就是个只能一句一句执行的简单而且不灵活的解释器，不过这些都是努努力就能解决的。</p><p>另外就是存储引擎。这部分提供具体功能实现，先不说性能，就实现上的准确无误就较难做到，因为涉及存储这种复杂状态过程，出问题不是概率问题，是频率问题。具体实现要规范数据表文件的结构，而且还要考虑到基于现代fs实现时面对的各种操作的时间复杂度问题来衡量和决定表文件结构的设计，挺麻烦的。</p><p>这两部分做完之后肯定不得劲，毕竟能用，但是性能不一定会好，甚至大概率会很差，特别是真实世界的数据库用法很多，当数据量足够大之后，基本就先是技术上追求各种算法，再抽象一层就是追求各种工程领域和实践的结合，在时间&#x2F;空间&#x2F;硬件技术之间做各种的trade off了。</p><p>优化是一个能一直做下去的玩意，完成上面的毛坯房之后，先给存储引擎的实现换成B+树，再针对前端parse出来的AST结果做各种变换来优化查询过程，还得确保优化前后的无歧义。再说具体的数据处理部分，又能用各种ISA的专有指令进行平台特异的并行化加速。还没完，数据库系统前后端分离降低了开发领域的耦合度，相应的导致了前后端优化的空间限制在自己的区域，那就可以把前端parse出来的AST传给后端，让后端根据指令上下文再做点优化，尽量把IO和处理器性能吃满，把idle压到最小。实现方法有传统的tcs方法，还有现在的典中典各种ai，比如什么根据各种场景搞具体性能分析，再得到优化经验，再丢给ai让ai当AST&#x2F;后端指令序列优化器，上限也就到这了（？）。</p><p>关系数据库理论的内核是关系代数，sql是用户友好版本。所以实在闲得没事，可以再从前端语言的角度设计个新语法，提升提升用户体验，顺便可以搞搞架构上的设计，把那些应用层经常造的东西顺便给它集成进来，优化优化架构和开发效率之类的。</p><p>再闲得没事可以改造改造存储引擎，充分利用利用现有的(btr)fs整点新活。数据库的trade off还做不爽了可以再做做分布式数据库，又是更大的依托trade off。</p><h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>项目本身是编译原理大作业。也满足了我写一个编译器的目标，顺便写了个存储引擎，也算有意思吧。OCaml的类型系统和语法实在是印象深刻，已经喜欢上了。</p>]]></content>
    
    
    <summary type="html">鸽了好久，补上。</summary>
    
    
    
    
    <category term="SQL" scheme="https://mxts.jiujiuer.xyz/tags/SQL/"/>
    
    <category term="OCaml" scheme="https://mxts.jiujiuer.xyz/tags/OCaml/"/>
    
  </entry>
  
  <entry>
    <title>在Wayland中使用无线副屏</title>
    <link href="https://mxts.jiujiuer.xyz/2024/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%9C%A8Wayland%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BA%BF%E5%89%AF%E5%B1%8F/"/>
    <id>https://mxts.jiujiuer.xyz/2024/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%9C%A8Wayland%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BA%BF%E5%89%AF%E5%B1%8F/</id>
    <published>2024-05-04T03:58:02.000Z</published>
    <updated>2025-03-12T15:31:34.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>之前在Windows上用过米全家桶，体验一般。这回回家带了电脑和板子，写分布式作业的时候突然想把板子当副屏用，但是让我切回Windows写代码还是饶了我吧QAQ</p><p>不过切成Wayland以后，基于xrdp的方法也没法用，还好有新的替代：krfb</p><blockquote><p>KDE: Krfb 桌面共享是一个可以让您与另一个在其他机器上的用户共享当前会话的服务器程序，他可以使用VNC 客户端来查看甚至控制桌面。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>截止2024.05.04，aur中的最新版在RVNC Viewer客户端连接时会崩溃，故本文使用<code>krfb-22.12.3-1-x86_64</code>。</p><p>首先将系统的PulseAudio切换为PipeWire：在Arch下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pipewire pipewire-pulse pipewire-alsa wireplumber</span><br></pre></td></tr></table></figure><p>随后pacman会询问是否卸载PulseAudio，输入y回车即可。安装完成后，重启一次。</p><p>接着安装Krfb，因为我使用了历史的pkg包，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U krfb-22.12.3-1-x86_64.pkg.tar.zst</span><br></pre></td></tr></table></figure><p>现在就可以正常使用了。你可以使用这个配置试试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">krfb-virtualmonitor --name Pad --resolution 1920x1080 --password password --port 5900</span><br></pre></td></tr></table></figure><p>现在打开板子上的VNC，连接电脑的IP试试吧。</p><p><img src="/img/Pasted%20image%2020240504123041.png"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://forum.manjaro.org/t/android-tablet-as-second-monitor/114841/2">Android tablet as a second monitor - Manjaro Forum</a></li><li><a href="https://tatsumin.dev/posts/switch-from-pulseaudio-to-pipwire/">Arch Linux 音频服务器从PulseAudio 切换到 Pipewire</a></li></ul>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
    <category term="Linux" scheme="https://mxts.jiujiuer.xyz/tags/Linux/"/>
    
    <category term="Wayland" scheme="https://mxts.jiujiuer.xyz/tags/Wayland/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎学习笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-27T13:12:15.000Z</published>
    <updated>2025-03-12T15:31:34.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>搜索引擎是从文档集合中查找出匹配单词、问题等构成的信息需求的系统&#x2F;软件的总称。</p><p>不过现代的搜索引擎的索引范围早已经超过文档，比如对邮件&#x2F;专利信息的搜索引擎等。变化的是作为文档的对象，不变的是基础架构。</p><p>搜索引擎一般有四个部分：</p><ul><li>索引管理器 Index Manager<ul><li>索引是一种该诉检索特化的数据结构，对其访问借助索引管理器完成</li></ul></li><li>索引检查器 Index Searcher<ul><li>利用索引进行全文搜索处理的组件</li></ul></li><li>索引构建器 Indexer<ul><li>从文本文档中生成索引的组件。它的行为是将文档分解为单词序列，再转换为索引结构</li></ul></li><li>文档管理器 Document Manager<ul><li>管理作为检索对象的文档，并对于作为查询结果的文档进行摘要的生成</li></ul></li></ul><p>这几部分的工作方式：文档作为索引构建器的输入，将输出内容交给索引管理器和文档管理器，最后，用户使用检索应用程序，后者和索引检查器交互，使用信息需求获得结果。</p><p>还有其他不是组成部分，但是相关的组件：</p><ul><li>爬虫-Crawler： 收集Web上HTML等文件的自动系统。</li><li>搜索排序系统： 给作为检索对象的文档打分的系统。</li></ul><h2 id="全文搜素"><a href="#全文搜素" class="headerlink" title="全文搜素"></a>全文搜素</h2><p>全文搜索分为：利用全扫描进行全文搜索，和利用索引进行全文搜索的方法。</p><p>第一种方法因为和grep使用的方法一致，也称为grep型搜索。优点是文档不需要事先处理，缺点是文档数量和检索时间成正相关。因此仅适用于少量&#x2F;暂时性的文档。相关算法有KMP和BM等算法。</p><p>另一种是利用索引进行全文搜索的方法。事先需要为文档建立索引，然后利用索引搜索字符串。优点是搜索时间不会随文档数增多大幅下降，缺点是需要预先建立索引。</p><p>全文搜索的索引结构中，较为常用的结构是倒排索引。</p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>倒排表和书籍后的关键词索引原理一致。将关键词列出在书籍最后，并在每个关键词后面标注它出现的地方，并将这个表按照关键词首字母顺序排序。</p><p>它的构建方法大致如下：首先需要一个二维数组，行为所有出现过的单词（需要将这个维度压缩地尽可能小，比如忽略复数形式，忽略大小写等），列是页码。数组单元则是某页出现某单词的记录。</p><p>完成后，将行列反转，得到每个单词出现在每一页上的表。这个操作称为倒排，完成后的表格称为倒排表（Postings List），能用于关键字全文检索。</p><p>另，所谓的页码实际上是和网页编号对应的。一行记录称为一个倒排项（Posting）。</p><p>倒排索引，是单词的集合“词典”和倒排列表的集合“倒排文件”构成的。二者对应关系大致相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">倒排词典    -&gt;  倒排文件</span><br><span class="line">-----------------------</span><br><span class="line">Google      -&gt;  2</span><br><span class="line">I           -&gt;  1,2</span><br><span class="line">...         -&gt;  ...</span><br></pre></td></tr></table></figure><p>这是一个松散的结构，每个单词的倒排文件可以从该单词的元信息获取。</p><p>查找的单词有多个时，对各个单词分别执行索引，取结果交集即是查找结果。</p><p>单词级倒排文件：在记录文档单词信息之外，额外记录该单词在文档出现的编号。</p><p>短语查找：借助单词级倒排文件，可以查找短语级别的内容：在取完交集之后，过滤掉结果中search和engine相对偏移量不为-1的项目。</p><p>对于中文等语言而言，搜索引擎的构造方法一样，不同在于语义化分割（Tokenization）中文的连续的句子。</p><p>中文的句子单词序列化分割方法常用的有两种：</p><ul><li>词素解析分割法<ul><li>将句子按照其中的语义，分割为词素（token）单元的方法，但是实现难度极高，近几年一般借助机器学习方法（隐马尔科夫模型&#x2F;条件随机场等方法）处理。</li></ul></li><li>N-gram分割法<ul><li>将句子分割成由N个字符组成的片段序列的方法，每个片段称作一个N-gram。M字的句子进行N-gram分割方法，能产生<code>M-N+1</code>个N-gram。</li></ul></li></ul><p>二者的优缺点都很明确，前者精准且节省空间，从而检索速度也快，但是可能会发生检索遗漏的问题。后者的优点是结果完整，因此检索速度相对较慢。并且可能会检索到无关词汇，比如检索华山得到九华山。</p><h3 id="词典的实现"><a href="#词典的实现" class="headerlink" title="词典的实现"></a>词典的实现</h3><p>一般使用哈希表、树等结构，常用的属性结构有二叉查找树BST、字典树Trie，B+树等。</p><p>这部分之所以使用超过一种数据结构，一个是因为存储金字塔结构：往往不能一次性将词典完整加载到内存中，另一个是因为块设备的读写单位是块，并且耗时很高，需要针对读写慢但是一次读写量大专门优化的数据结构。</p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>检索模型指代各种检索方法&#x2F;机制。使用逻辑谓词AND&#x2F;OR&#x2F;NOT指导的检索就是<strong>布尔检索</strong>。</p><p>该模型的检索流程：</p><ol><li>获取所有检索单词的倒排列表</li><li>根据布尔检索获取符合条件的文档编号</li><li>计算符合条件的文档和查询匹配度</li><li>根据匹配度&#x2F;其他排序参数，获取前k个文档</li></ol><p>因为逻辑比较简单，伪代码就不贴了</p><h2 id="关联度计算"><a href="#关联度计算" class="headerlink" title="关联度计算"></a>关联度计算</h2><p>策略一般是按照文档与查询的关联度对检索结果进行排序。算法则有：</p><ul><li>余弦相似度<ul><li>将文档和查询映射到以单词（token）为维度的向量空间，并计算二者向量的夹角，夹角越小则关联度越高</li></ul></li><li>Okapi BM25<ul><li>文档是否匹配查询是由概率决定：根据单词的出现频率计算关联概率。</li></ul></li></ul><p>信息检索是全文搜索的学术领域，这个检索领域目的是找出与信息需求匹配的文档，故可认定匹配的文章不必包含查询，只需要计算整个文档的关联度，将高关联度文档作为作为检索结果即可。</p><p>关联度计算是计算密集任务，因此有必要先得到符合检索条件的子集后再计算关联度进行排序。从而，针对不同的检索应用，设计不同的检索模型能提高性能和质量。</p><h2 id="构建倒排索引"><a href="#构建倒排索引" class="headerlink" title="构建倒排索引"></a>构建倒排索引</h2><p>因为数据的稀疏性质，它适用于使用链表进行存储。当内存用量过大时，可以使用二级链表进行存储。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Emmet学习笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Emmet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Emmet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-19T03:42:50.000Z</published>
    <updated>2025-03-12T15:31:34.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大半夜刷到的…老早就想学学这玩意了，奈何不知道名字是啥一直没法搜。</p></blockquote><p>参考资料：<a href="https://docs.emmet.io/abbreviations/syntax/">Abbreviations Syntax | Emmet Doc</a></p><p>Abbreviations are the heart of the Emmet toolkit: these special expressions are parsed in runtime and transformed into structured code block, HTML for example. The abbreviation’s syntax looks like CSS selectors with a few extensions specific to code generation. So every web-developer already knows how to use it. </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>html定义的所有标签均可以直接由标签名称补全：比如<code>div</code>-&gt;<code>&lt;div&gt;&lt;/div&gt;</code></p><h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><p>二元运算符<code>&gt;</code>标记标注前一元素的子元素，例如<code>div&gt;ul</code>-&gt;<code>&lt;div&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;</code></p><h3 id="同级元素"><a href="#同级元素" class="headerlink" title="同级元素"></a>同级元素</h3><p>二元运算符<code>+</code>标识元素的同级元素，例如<code>div+p</code>-&gt;<code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></p><h3 id="返回上一级"><a href="#返回上一级" class="headerlink" title="返回上一级"></a>返回上一级</h3><p><code>^</code>标识指引当前缩进层次往上一级，例如<code>div&gt;p^span</code>-&gt;<div><p></p></div><span></span>&#96;</p><h3 id="数量算符"><a href="#数量算符" class="headerlink" title="数量算符"></a>数量算符</h3><p>二元运算符<code>*</code>指示左侧元素数量为右侧整数个，例如<code>div*5</code>-&gt;<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>可以使用<code>()</code>对符号进行分组：<code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code>-&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，括号可以嵌套：<code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code>-&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>理论上你可以用一个缩写来编写一整页，但是实际最好不要这么做。</p><h3 id="属性选项"><a href="#属性选项" class="headerlink" title="属性选项"></a>属性选项</h3><p>对于标签，可以使用<code>.</code>标记添加class，<code>#</code>添加id，<code>[a=&quot;xxx&quot; b=&quot;3&quot;]</code>添加自定义标签。</p><h3 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h3><p>使用<code>*</code>操作符时，可以在元素名称，属性名称，属性值插入<code>$</code>来加入从1开始的序号。连续的<code>$</code>出现时，高位默认填0。比如：<code>ul&gt;li.item$*5</code>-&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外在<code>$</code>操作符后，可以用<code>@</code>修改起始值，递增&#x2F;递减。语法为：<code>$@-3</code>，<code>$@-</code>，<code>$@3</code>。得到的结果分别为序号递减到3，序号递减到1,序号从3递增。</p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>用<code>&#123;&#125;</code>包裹文本，可以将文本包含在元素标签对中：<code>a&#123;click me&#125;</code>&#x3D;&#x3D;<code>a&gt;&#123;click me&#125;</code>-&gt;<code>&lt;a href=&quot;&quot;&gt;click me&lt;/a&gt;</code></p><p>但是注意，第一种写法的优先级最高，第二种写法中，<code>&#123;&#125;</code>和一般标签等价。</p><h3 id="终结符"><a href="#终结符" class="headerlink" title="终结符"></a>终结符</h3><p>空格是Emmet的默认终结符，因此，不能用空格提升可读性。此外，Emmet可以在任何位置使用，不一定是空行开头。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li><code>snippets.json</code>中包含Emmet的数据，也可以在这里定义自己的别名</li><li>部分标签（例如<code>div.content</code>）可省略标签名，Emmet可直接推导出</li><li>Lorem lpsum生成工具：<code>lorem</code>可直接扩展为占位文本，也可以使用<code>lorem10</code>等控制占位文字数量</li></ol><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>Emmet还有CSS的snippets，不过我用的不多就没去看。</p>]]></content>
    
    
    <summary type="html">用了好久才知道div.class1#id&gt;button这种写法是Emmet的语法...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>开发手记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/04/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/04/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/</id>
    <published>2024-04-14T07:54:33.000Z</published>
    <updated>2025-03-12T15:31:34.802Z</updated>
    
    <content type="html"><![CDATA[<p>大概计算了一下，我在GitHub上所有的代码行数早已超过100k行了。三年下来，我在开发上的投入越来越大块，甚至已经吞噬了我的许多其他活动，甚至到了我很多次反思这到底是不是应该在大学期间干的事。</p><p>虽然如此我还是义无反顾地干下来了。兴趣所在，原因不明。</p><h2 id="经验1-量变引起质变"><a href="#经验1-量变引起质变" class="headerlink" title="经验1-量变引起质变"></a>经验1-量变引起质变</h2><p>说是重复练习积累经验也对，说是重复的过程中找到新的规律从中创新也对。总之，开发活动本身也是一种渐进式的活动。从一开始的编写Hello, World到后来编写一个完整的项目，这中间增长的是复杂度，一同增长的也有开发者自身对于代码的掌控力，以及对于复杂度的控制能力。</p><p>大量代码必然大块重复，其上的思考有助于抽离重复部分，丰富复用代码片段库。</p><p>增长的复用片段库最终会形成新的范式，或者新的工具，乃至思想。</p><h2 id="经验2-测试驱动开发（TDD）"><a href="#经验2-测试驱动开发（TDD）" class="headerlink" title="经验2-测试驱动开发（TDD）"></a>经验2-测试驱动开发（TDD）</h2><p>开发难点在于代码正确性验证，以及消除undefined behavior。测试驱动的开发一方面帮助我们消除ub，另一方面帮我们快速验证和开发模块。好处是，开发进度明确，并且开发完成之后可用程度基本拉满。</p><p>同时对比以前的完整编译再运行整个系统的做法，TDD更加敏捷。同时编写测试用例能帮我们理解自己的代码行为和逻辑。</p><h2 id="经验3-文档与工具"><a href="#经验3-文档与工具" class="headerlink" title="经验3-文档与工具"></a>经验3-文档与工具</h2><p>文档的必要性在于对整个代码的形式规约——文档本身也是一种应对复杂度的手段。文档的编写，构建和发布值得我们好好打磨。从注释生成，还是代码即注释，这些都可以，根据情况决定。</p><p>好的工具值得我们花费时间熟悉，看起来古老的工具，比如Vim，build-essentials，gnu core-utils以及bash都值得学习。并不是因为它们强大，而是让你学会如何使用基于这些工具构建的现代IDE&#x2F;构建流程背后的逻辑，思想以及原理，同时让你不被任何现代IDE约束于其中，能完成几乎所有超出IDE能力的任务。</p><h2 id="经验3-组合优于继承"><a href="#经验3-组合优于继承" class="headerlink" title="经验3-组合优于继承"></a>经验3-组合优于继承</h2><p>不仅适用于代码编写，也适用于工具哲学。继承是严格的约束，组合是松散的，约定大于规范的约束。pipe，xargs和gnu core-utils等工具能构建出让人难以置信的工具。KISS，同时只做一件事并把它做好，明确单一工具行为，谨防undefined behavior。</p><blockquote><p>另，关于GNU&#x2F;Linux以及无底洞systemd，组合确实适合构建一些特定的工具，但是对于general-purpose类型的，面向最终用户的接口，还是提供一个相对稳定，严格的规约比较好，不过大量吞噬其他工具这一点大可不必。</p></blockquote><h2 id="经验4-自顶向下设计"><a href="#经验4-自顶向下设计" class="headerlink" title="经验4-自顶向下设计"></a>经验4-自顶向下设计</h2><p>大学以来第一个大型项目NanoOJ，很长一段时间处于漫无目的的开发阶段：知道要做的东西是什么，但是不知道现在应该做什么。不熟悉软件工程的经验教训，文档是大段废话和幻想，对于开发毫无帮助。</p><p>程序本质是数据的变换工具，因此规划出明确的数据流之后进行开发就可以了。这个阶段的前一步，是需求整理，原型设计。</p><h2 id="经验5-面向接口编程"><a href="#经验5-面向接口编程" class="headerlink" title="经验5-面向接口编程"></a>经验5-面向接口编程</h2><p>符合软件工程中需求和文档为先，驱动程序开发的架构。这也是自顶向下设计的一种，适合多人团队项目开发。前后端先约定好接口，根据数据模型进行开发。</p><p>针对前后端开发，后端可以使用测试用例驱动；前端可以使用假数据驱动开发，开发完成后对接后端即可。</p><h2 id="经验6-Linux"><a href="#经验6-Linux" class="headerlink" title="经验6-Linux"></a>经验6-Linux</h2><p>GNU&#x2F;Linux是工具的集合。不仅是gnu core-utlis，也指代它的项目源代码库，以及提供的各种库库。使用组合式的实践，可以轻松创建出来稳定可用的，属于自己的工具合集。</p><p>Linux系的发行版是越用越爽的：它提供了近乎无穷的原料，让你能尽情发挥创造力——对比Windows，你需要不断学习Windows的各种工具，并很难有手段将它们组合使用——作为用户，你难以创造。不过随着Powershell的改进，这点倒是在逐渐改善。</p><p>关于系统的学习顺序，有时间的话最好从系统的启动过程，文件系统，服务管理，网络系统管理，以及性能监测和分析这方面开始学习。如果要从其他方向开始学习也不是不行，因为Linux本身也是渐进式的：学多少基本都能用起来。比较遗憾的是，我是从搭MC服务器&#x2F;部署网页服务器开始学的（</p><h2 id="经验7-渐进式"><a href="#经验7-渐进式" class="headerlink" title="经验7-渐进式"></a>经验7-渐进式</h2><p>刚开始听说是在Vue介绍中。后来实践中理解了是什么，为什么，以及怎么做。</p><p>渐进式指功能可以被逐渐学习，逐渐集成，比如Linux，第一天删除文件时只会直接<code>rm [filename]</code>，第二天知道了后面可以跟随多个文件名，第三天知道了可以使用正则来匹配所有要删除的文件。在这个过程中，你一开始就能完成需要的功能，而之后的学习让你将大部分任务耗时降低到可接受范围内。Vue支持从JS，Web Component和SPA到SSR，SSG多种开发方式，但是你无需学完才能开始编写代码：它的各种工具和概念是相对解耦的。</p><p>为什么呢？这和一般人的学习习惯有关。最代表性的例子是数学的学习，实际上我们是顺应着数学的发展历史逐渐向时间轴正向前进学习的。刚开始使用Visual Studio开发时，我经常因为不知道这东西各个部分怎么用而打开又关闭。用VS Code就舒服多了，基本功能简单，组合插件带来各种功能的能力也很强。<strong>VS Code打开就能直接写代码，但是VS必须经过系统全面的学习才能不阻碍完整的开发流程</strong>。或者这方面，Vim可能是个更好的例子：起初只需要学会<code>i</code>，<code>Esc</code>和<code>:wq</code>以及<code>hjkl</code>就能把它当记事本简单用用，之后每学到一个键&#x2F;功能都能直接提升你的效率和体验。</p><p>在我的开发学习过程，我一般不使用完整的项目基座，而是从官方给出的最简单的底座和实例开始，一点一点向上搭建。当我做到某一部分时，我会知道这部分需要使用什么新的插件，而不是一开始就从一个打满插件的项目开始——这样的开发体验并不好。当你发现自己的项目已经和其他脚手架&#x2F;基座功能比较接近时，这时候你就有了新的选择：迁移到完善的大型框架上进行开发。这时候的开发体验应该是如鱼得水的：你理解了应如何组合工具来编写这种复杂度的项目，你也能看懂底座提供的若干功能的逻辑和目的。这个阶段，对框架的使用才是提升效率的手段。</p><p>不过这种开发方式仅适用于习阶段，实际大型项目开发最好花时间看看成熟框架的文档和实例。</p>]]></content>
    
    
    <summary type="html">过去一年，GitHub已经1186次提交了。有点时间，就看看这三年都积淀了点啥吧</summary>
    
    
    
    
    <category term="C++" scheme="https://mxts.jiujiuer.xyz/tags/C/"/>
    
    <category term="C" scheme="https://mxts.jiujiuer.xyz/tags/C/"/>
    
    <category term="Golang" scheme="https://mxts.jiujiuer.xyz/tags/Golang/"/>
    
    <category term="Vue" scheme="https://mxts.jiujiuer.xyz/tags/Vue/"/>
    
    <category term="PHP" scheme="https://mxts.jiujiuer.xyz/tags/PHP/"/>
    
    <category term="JavaScript" scheme="https://mxts.jiujiuer.xyz/tags/JavaScript/"/>
    
    <category term="Kotlin" scheme="https://mxts.jiujiuer.xyz/tags/Kotlin/"/>
    
    <category term="TypeScript" scheme="https://mxts.jiujiuer.xyz/tags/TypeScript/"/>
    
    <category term="Python" scheme="https://mxts.jiujiuer.xyz/tags/Python/"/>
    
    <category term="Dart" scheme="https://mxts.jiujiuer.xyz/tags/Dart/"/>
    
    <category term="Lua" scheme="https://mxts.jiujiuer.xyz/tags/Lua/"/>
    
    <category term="Shell" scheme="https://mxts.jiujiuer.xyz/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>API压测笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/API%E5%8E%8B%E6%B5%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2024/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/API%E5%8E%8B%E6%B5%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-18T14:41:07.000Z</published>
    <updated>2025-03-12T15:31:34.800Z</updated>
    
    <content type="html"><![CDATA[<p>API的压力测试是业务上线前的重要环节，也是对系统性能的一个量化测量，对实际业务诸方面都有重要的参考价值。</p><p>这里主要说说API压测的方法和常用手段。</p><h2 id="压测方法"><a href="#压测方法" class="headerlink" title="压测方法"></a>压测方法</h2><ul><li>go benchmark</li></ul><p>如果是golang后端，可以直接手写测试用例，然后使用go工具链自带的benchmark进行压测。</p><ul><li>ApacheBench</li></ul><p>ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。</p><p>安装<code>apache2-utils</code>即可在系统上使用<code>ab</code>命令。</p><p>作为演示，使用ab测试一个GET接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 2000 -c 1200  <span class="string">&quot;http://127.0.0.1:9999/get_result?a=10&amp;b=20&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>n: 测试轮次</p></li><li><p>c: 客户端数量</p></li><li><p>T: 内容类型</p></li><li><p>p: 包含post参数的文件</p></li><li><p>引号是必须的</p></li><li><p>wrk</p></li></ul><p>一个C编写的API压测工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t10 -c100 -d10s http://localhost:8080/api/users    <span class="comment"># 使用10个线程，100并发数，测试持续10s</span></span><br></pre></td></tr></table></figure><h2 id="开测"><a href="#开测" class="headerlink" title="开测"></a>开测</h2><p>我最后还是选了<code>wrk</code>做压测<del>因为ab装不上</del></p><p>测试接口是<code>POST http://localhost:8080/api/calc/mul</code>，payload是一个2*n的json格式的二维数组。</p><p>测试指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wrk -t 20 -c 10000 -d 180s -s bench.lua --latency <span class="string">&quot;http://localhost:8080/api/calc/mul&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## bench.lua</span></span><br><span class="line">wrk.method = <span class="string">&quot;POST&quot;</span></span><br><span class="line">wrk.body = <span class="string">&quot;[[1,2,3,1],[4,5,7,8]]&quot;</span></span><br><span class="line">wrk.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&quot;application/json&quot;</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">xeonds@ark-station:~/code/vec-calculator-server$ make bench </span><br><span class="line"><span class="built_in">cd</span> build &amp;&amp; ./vec-calc-web-linux-amd64-1.0.0 &amp; <span class="built_in">sleep</span> 1 &amp;&amp; \</span><br><span class="line">wrk -t 20 -c 10000 -d 180s -s bench.lua --latency <span class="string">&quot;http://localhost:8080/api/calc/mul&quot;</span></span><br><span class="line">Running 3m <span class="built_in">test</span> @ http://localhost:8080/api/calc/mul</span><br><span class="line">  20 threads and 10000 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    61.27ms   62.15ms   1.46s    93.06%</span><br><span class="line">    Req/Sec     9.74k     1.33k   22.11k    71.75%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   48.47ms</span><br><span class="line">     75%   66.32ms</span><br><span class="line">     90%   90.10ms</span><br><span class="line">     99%  364.05ms</span><br><span class="line">  34884275 requests <span class="keyword">in</span> 3.00m, 4.35GB <span class="built_in">read</span></span><br><span class="line">Requests/sec: 193693.29</span><br><span class="line">Transfer/sec:     24.75MB</span><br></pre></td></tr></table></figure><p>测试平台是<code>Intel Core i7-12700H</code>，可以看到并发在<code>1,0000</code>的时候，Gin的性能还是不错的，TPS保持在了19万的水准。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>该说不该说呢，以前我认为语言就是由语法和编译器&#x2F;解释器构成，但是Golang这样从语法上支持一个feature的行为让我疑惑：语言的标准库该不该算是语言特性的一部分？</p><p><code>go</code>这个关键字作为一个大大的语法糖，似乎在打破语言的库和语言本身的分界线。我也无从知晓这一方向的尽头是什么。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/609348456">API性能测试指标以及压测方式 - 最难不过二叉树 - 知乎</a></li><li><a href="https://golang.cx/go/golang%E5%8E%8B%E6%B5%8B.html">golang压测</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-benchmark-http-latency-with-wrk-on-ubuntu-14-04">How To Benchmark HTTP Latency with wrk on Ubuntu 14.04 - DigitalOcean</a></li><li><a href="https://stackoverflow.com/questions/15261612/post-request-with-wrk">POST request with wrk? - StackOverflow</a></li><li><a href="https://github.com/gin-gonic/gin/issues/267">Can I disable gin’s stdout? - GitHub Issue</a></li></ul>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
    <category term="分布式计算" scheme="https://mxts.jiujiuer.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    <category term="Benchmark" scheme="https://mxts.jiujiuer.xyz/tags/Benchmark/"/>
    
    <category term="工程化实践" scheme="https://mxts.jiujiuer.xyz/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>编译原理学习笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/compiler-note/"/>
    <id>https://mxts.jiujiuer.xyz/2024/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/compiler-note/</id>
    <published>2024-01-26T12:29:40.000Z</published>
    <updated>2025-03-12T15:31:34.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这东西很早就开始看，但是一直没有一个明晰的思路。说起来最早接触编译器，大概是第一次试着自己写一个计算器的时候吧。那会尝试使用递归来进行表达式的解析，现在想来很像下推自动机。<del>准确来说现在看着像是手写下推自动机</del></p></blockquote><h2 id="编译器纲要"><a href="#编译器纲要" class="headerlink" title="编译器纲要"></a>编译器纲要</h2><p>编译原理的根本目的是将程序设计高级语言翻译成机器硬件控制器可直接执行的二进制代码。自顶向下观测，可以从编译的阶段流程逐步深入学习。</p><p>首先是概览，理解每个阶段的输入和输出，从黑箱角度理解每一阶段的编译器组件的功能，参考龙书。简要来说：输入是人类可读的程序语言，然后经过编译器前端和后端两个大层次的多阶段翻译，逐步转换成为语言的单词（token）集合，表示语言结构的抽象语法树，带有更多附加信息的，包含语义的语法树，中间代码（可以是三地址码等等），最终生成符合目标体系架构的原生机器代码。</p><blockquote><p>或者从另一个视角来观察，CPU自身对应的就是一种有限状态模型。因此，编译的过程实质上可以理解为将一种编程模型下的程序翻译成另一种编程模型下的程序。<br>所以实质上，软件和硬件的分界点是可以变动的，这部分的trade-off和收益暂时不展开。</p></blockquote><p>其次从词法分析开始，介绍词法匹配的方法，进一步深入到本质：正则表达式（三型文法），以及NDFA，以及实质上和NDFA的表达力完全等价的DFA。这里对于自动机的定义，构造和自动机所能识别的语言的介绍，是对于语言和自动机表达力和等价性的重要讨论。</p><p>接下来是语法分析，介绍CFG和CSG，以及配套的自动机模型：下推自动机。并且证明：下推自动机PDA和DPDA（确定型下推自动机）的表达力也是一样的，并且识别的语言类型也是相同的。</p><p>这部分除了自动机，还有自上而下&#x2F;自下而上分析法，以及他们下属的各种方法，比如SLR，LALR，LL(0)等方法，以及其中包含的包括跳转表等分析技术。</p><hr><p>学到一半的感受是，对于三型文法和二型文法，都有适合他们的识别对应语言的自动机模型。理解这两种文法的识别方法，可以从理解这两种语言的自动机模型开始着手。</p><p>另外二型文法对于大多数语言来说确实够用了，一般语言识别最大的问题就是语言结构的嵌套问题，这部分理解了PDA的下推栈之后就能自己动手写出来一些简单的parser了。</p><p>语义识别的部分一般是在语法树上的非叶子节点附加操作，以及借助符号表等工具来完成。在完成这部分之后，编译器的前端部分基本就完成了。这时，可以结束开发，转而编写解释器；或者为了追求性能，继续编写以各个平台的处理器为目标产物的编译器。</p><p>编译器部分，会涉及到内存分配，链接器，地址回填等操作，算是细节很多，非常偏重实践和工业界的东西。特别是很多优化可以在体系结构无关的三地址&#x2F;四地址码，以及机器相关的机器码级别完成。优化是一个NP问题，可以一直做下去。近两年也有在优化环节引入AI来进行编译优化的工作。</p><h2 id="词法分析，状态机与正则表达式"><a href="#词法分析，状态机与正则表达式" class="headerlink" title="词法分析，状态机与正则表达式"></a>词法分析，状态机与正则表达式</h2><p>词法分析是读取输入字符流，并将它转换为</p><ul><li>字母表 元素构成的集合</li><li>符号 构成字母表的元素。例如a,b,c是符号</li><li>符号串 符号的有穷序列。例如symbol。空符号串记作$\epsilon$</li><li>符号串长度 包含符号的个数。例如x&#x3D;string，则有|x|&#x3D;6</li><li>符号串连接 xy表示这两个符号串连接</li><li>符号串集合的乘积 AB&#x3D;{xy|x∈A,y∈B}</li><li>符号串的幂运算 同一个符号串的自我连接</li><li>符号串集合的幂运算 符号串集合的自我乘积</li><li>符号串集合的正闭包 是集合1到n次幂的并集</li><li>自反闭包 正闭包和空串集合的并集</li></ul><p>通过离散数学的语言描述正则语言。</p><h2 id="文法及其分类"><a href="#文法及其分类" class="headerlink" title="文法及其分类"></a>文法及其分类</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>编译流程：词法分析，语法分析，语义分析，中间代码生成，中间代码优化，目标代码生成六步。</li><li>编译程序结构：包含上面6个步骤的对应程序，以及表格处理程序，出错处理程序。</li></ul><p>按照前后端划分，前面5个步骤属于前端，最后一个步骤属于后端，因为它依赖于特定计算机硬件系统和机器指令。</p><p>同时，编译过程也可以分为一遍和多遍。</p><p>高级语言的自编译性（自举）：允许这个语言为它自己编写编译器。自展技术可以实现这一点：它把语言分为一个核心部分和数个扩充部分。用机器语言实现核心，再用核心实现扩展功能。</p><ul><li>编译器移植：改后端为目标机器后端生成器，然后编译生成A上运行的B编译器，再用它编译自己，就得到了B上可用的编译器。</li></ul><p>翻译程序编写系统，是编译器&#x2F;翻译器的开发工具。它也曾被称为自动程序设计系统，这一概念包含规格说明，目标语言，问题范围和采用方法等。采用方法包括<strong>知识工程</strong>等。</p><h3 id="文法分类"><a href="#文法分类" class="headerlink" title="文法分类"></a>文法分类</h3><p>根据Chomsky文法分类，可以得到0,1,2,3型文法。数字越大越宽松：</p><ul><li>0：每个产生式的左部和右部都包含于N和T全并集的闭包中，且至少有一个非终结符</li><li>1（上下文有关语言CSG）：除了空产生式，均有左侧小于等于右侧</li><li>2（上下文无关语言CFG）：产生式左部只能是非终结符</li><li>3（正规语言RG）：产生式右部的非终结符统一出现在最左端&#x2F;最右端</li></ul><p>越强的语法（编号越小）的自动机越难构造。程序设计语言大多是CSG，但是我们一般用CFG描述程序设计语言，将上下文有关的部分单独分离为语义分析的部分。</p><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>语法分析相比词法分析使用的有穷自动机NDFA&#x2F;DFA，它使用下推自动机。这种自动机模型更强一些，有部分计数功能。</p><h3 id="下推自动机"><a href="#下推自动机" class="headerlink" title="下推自动机"></a>下推自动机</h3><blockquote><p>自动机原型是图灵机。其核心模型是状态转换和状态修改。</p></blockquote><p>在有限状态控制器上添加了一个信息&#x2F;状态保存栈。因此，它有简单的计数能力。</p><p>下推自动机的原理实际上就是给DFA增加了一个数据栈。形式化地说，接受三型文法的DFA的形式化定义如下：</p><p>$$<br>DFA A &#x3D; A(Q, \Sigma, \delta, q_0, F)<br>$$</p><p>其中：</p><ul><li>$Q$：状态的<strong>有穷</strong>集合</li><li>$\Sigma$：输入符号的有穷集合</li><li>$\delta$：转移函数$\delta(q, a)$</li><li>$q_0$：自动机的初始状态</li><li>$F$：自动机接受状态&#x2F;终结状态的集合</li></ul><p>那么，下推自动机PushDown Automation的形式化定义就是：</p><p>$$<br>PDA P &#x3D; P(Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)<br>$$</p><p>其中：</p><ul><li>$Q$：状态的<strong>有穷</strong>集合</li><li>$\Sigma$：输入符号的有穷集合</li><li>$\Gamma$：有限的堆栈字符表</li><li>$\delta$：转移函数，是三元函数$\delta(q, a, X)$，三个变量分别是$Q$中的状态，$\Sigma$中的输入符号或者空串$\epsilon$，$\Gamma$中的堆栈符号</li><li>$q_0$：自动机的初始状态</li><li>$Z_0$：自动机堆栈的初始符号</li><li>$F$：自动机接受状态&#x2F;终结状态的集合</li></ul><h3 id="语法分析方法"><a href="#语法分析方法" class="headerlink" title="语法分析方法"></a>语法分析方法</h3><h4 id="自上而下语法分析"><a href="#自上而下语法分析" class="headerlink" title="自上而下语法分析"></a>自上而下语法分析</h4><p>简单的说，就是不断选取产生式，尝试从根节点推导出和当前串$w$匹配的串。</p><p>从语法树的根到叶去建立语法树。步骤是试探+回溯，边推导边匹配。对输入序列，使用产生式进行最左推导，直到得到一个合法句子&#x2F;非法结构。随后从左到右扫描输入序列，自上而下建立语法树。</p><p>最大的问题是左递归，即非终结符同时出现在左部和右部左侧，会造成死循环。消除方法为引入新的非终结符进行同义转化。<strong>直接消除左递归</strong>的方法可以使用通用的算法进行解决。</p><p>另一个问题是消除文法二义性。直接的消除方法不适用于自上而下分析方法。</p><p>还有一个问题是公共前缀的提取。该行为能有效优化选择速度，提升性能和错误恢复能力。方法是引入新的非终结符来表示公共前缀的推导，再改写原来的产生式。</p><h4 id="自下而上语法分析"><a href="#自下而上语法分析" class="headerlink" title="自下而上语法分析"></a>自下而上语法分析</h4><p>简而言之就是，从串$w$着手，不断在其中寻找能用产生式规约的部分，并不断地进行规约操作。</p><p>下面是GPT的介绍：</p><blockquote><p>自下而上语法分析（bottom-up parsing）是一种从输入的最底层符号开始，逐步构造出高层结构的语法分析方法。它的目标是通过合并输入符号和中间结果，最终构造出整个输入的语法树。LR分析器是自下而上语法分析的典型代表之一。</p></blockquote><p>我们用一个简单的例子来说明自下而上语法分析的过程。假设我们有以下的语法规则：</p><ol><li>S → AB</li><li>A → a</li><li>B → b</li></ol><p>这里，S、A、B 是非终结符，a、b 是终结符。我们的输入字符串是 “ab”。</p><p>我们从输入字符串的第一个符号开始，将每个符号视为一个单独的子树：</p><p>初始状态：输入字符串 “ab” 被表示为 [a, b]。</p><ol><li>匹配并规约第一部分</li></ol><p>我们检查字符串并尝试应用规则 A → a。</p><ul><li>输入字符串中第一个符号是 a，符合规则 A → a。</li><li>我们将 a 规约为 A。</li></ul><p>此时，输入状态变为 [A, b]。</p><ol start="2"><li>匹配并规约第二部分</li></ol><p>接下来，我们检查字符串并尝试应用规则 B → b。</p><ul><li>输入字符串中第二个符号是 b，符合规则 B → b。</li><li>我们将 b 规约为 B。</li></ul><p>此时，输入状态变为 [A, B]。</p><ol start="3"><li>匹配并规约整个字符串</li></ol><p>现在，我们尝试应用规则 S → AB。</p><ul><li>当前输入状态是 [A, B]，符合规则 S → AB。</li><li>我们将 [A, B] 规约为 S。</li></ul><p>此时，输入状态变为 [S]。</p><p>此时，输入字符串已被规约为 S，表示输入字符串 “ab” 是该语法的一个有效句子。</p><p>根据上述规约过程，我们可以构造出对应的语法树：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    S</span><br><span class="line">   / \</span><br><span class="line">  <span class="selector-tag">A</span>   <span class="selector-tag">B</span></span><br><span class="line"> /     \</span><br><span class="line"><span class="selector-tag">a</span>       <span class="selector-tag">b</span></span><br></pre></td></tr></table></figure><p>有几种基于自上而下的识别方法，比如LALR和SLR。</p>]]></content>
    
    
    <summary type="html">你说的对，但是编译器是一款......</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>青岛之行</title>
    <link href="https://mxts.jiujiuer.xyz/2024/01/18/%E6%96%87%E5%AD%A6/%E6%B8%B8%E8%AE%B0/trip-to-tsingdao/"/>
    <id>https://mxts.jiujiuer.xyz/2024/01/18/%E6%96%87%E5%AD%A6/%E6%B8%B8%E8%AE%B0/trip-to-tsingdao/</id>
    <published>2024-01-18T05:53:51.000Z</published>
    <updated>2025-03-12T15:31:34.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第0天-西安市长安区"><a href="#第0天-西安市长安区" class="headerlink" title="第0天-西安市长安区"></a>第0天-西安市长安区</h2><p>这个考试月是真能破人的防，所以哥们考完试直接开润，好好抚慰以一下难绷的心智。跟哥们合计了一下，寻思着<del>去码头整点薯条</del>然后就有了去青岛溜达一圈的打算。</p><p>现在是1.18，早上随便叼个面包，拉着箱子就走了。今天早上西安的雾气挺大的，走的时候大概9点，门口不少拉箱子回家的大学生，看了一眼感觉不少大三老东西，还有一些大一大二一看就没在校门口坐过公交的。</p><p>时间过得真快啊，还没多久就只剩一年半了。</p><p>抛开有的没的，到站下车转地铁，6倒2到北站等火车。以及再次，西安北站真tm大。</p><p>顺利和彦汇合上，俩人就坐下来开始侃大山，路上风景倒是不错。刚开始计划的路线里边是经过郑州的，不过后来换了D1672然后就不走那边了，现在的路线是西安-&gt;太原-&gt;石家庄-&gt;德州-&gt;济南-&gt;青岛。全程从11点到晚上9点，车程比较长。</p><p>在动车上跟哥们干了各种事消磨时间：看时间，聊二次元等等等等，<del>听得我都想入坑ba了</del>。</p><p>下了车之后直接进了地铁站，七拐八拐到了酒店。这边地铁修的比较新，所以装潢还挺新的。</p><p>出了站之后走了点路就到了酒店。俩人一进酒店就开始开香槟，30块一晚上是这住宿条件：</p><p>更香槟开爆的一集：30多跟哥们恰烧烤外卖恰到撑。老陕震撼.jpg，这边伙食是真不戳。</p><p>就是晚上1点多给另一个哥们写代码到早上3点有点难绷</p><blockquote><p>彦：熬夜别似我旁边<br>我：无所谓我收入高</p></blockquote><h2 id="第1天-青岛海军博物馆-amp-杂七杂八"><a href="#第1天-青岛海军博物馆-amp-杂七杂八" class="headerlink" title="第1天-青岛海军博物馆&amp;杂七杂八"></a>第1天-青岛海军博物馆&amp;杂七杂八</h2><p>第二天<del>起了个大早</del>九点准时起床，身体好像已经习惯六小时睡眠了。简单收拾之后就准备出发去看看船了。放6年前彦估计更兴奋，毕竟他玩碧蓝航线。</p><blockquote><p>哎，泛二刺螈。哦，他现在玩Blue Archive。</p></blockquote><p>笑死，早起根本没用。俩人还是差点迟了。最骚的操作是我们发现时间可能赶不上然后俩啥必退票准备换时间，然后发现别的时间都满了。</p><p>tmd吓个半死，赶紧给重新定回那个时间。俩人跟俩萝卜一样，一人一个坑给剩下俩位置占满了。</p><p>不管时间是不是来不及，俩人开始往过疯狂冲刺。趁着上车的间隙，算了一下时间，刚好剩了3分钟，所幸最后没迟到。</p><p>路上路过一片小区，人建筑风格特别欧式，一度以为是殖民地残留，被哥们吐槽了。</p><blockquote><p>彦：你这得让青岛人笑话死</p></blockquote><p>赶时间所以没想到啥吐槽。穿过博物馆大厅，从扶梯下去，就是海边了。大厅后边就是黄海的海岸线了，码头停了不少待参观的船，潜艇，还有<del>来码头整点薯条的</del>海鸥，不过这会的我显然还没有意识到青岛的海风自带湿冷的魔法攻击。</p><p>没顾得上拍照，赶紧跟着哥们跑去核潜艇参观区域。俩人兴冲冲跟着引导员走到潜艇入口，准备从入口进去。不过刚进去入口的时候我就觉得不对劲了：被狠狠磕了一下脑袋。然后我才注意到，这潜艇里边的环境是真tm狭小。里边是不允许拍照的，所以这部分没有图图。很震撼，有种纯粹工业风的美感，而且还能看到生产日期跟自己爸妈一个年龄的各种粗扩庞大<del>不知道能干啥</del>不可名状的巨大机械&#x2F;管道，元素相当丰富。整体而言，环境相当压抑。居住区空间极小，而且是两层乃至三层的卧铺，躺床上只能看到压抑的上铺床板。更离谱的是，各个区域之间的连通通道不是门结构，而是环状圆盘盖子结构。想了半天，原因可能是为了进一步保证气密&#x2F;作为一种空间隔断手段而使用，以至于人过去是要钻过去的——我自己身高1米8多，已经不是脑袋磕的疼不疼的问题了，那是我弯腰过去会被卡在门上的问题。不过也能理解，毕竟从外边看体积本来就小，里边的空间更是寸土寸金。另外还看到唯一一个很大的房子，俺猜测应该是船长&#x2F;政委的？另外就是这个核动力潜艇很明显属于那种过于落后可以展示的那种，现在的潜艇长啥样子我根本不敢想象。以及这玩意的制造时间也跟我印象里边那会还在为造拖拉机发愁的轻工业为主的年代严重不符——现在回望那会的前辈，相当厉害。快60年前的东西，都能带给我如此巨大的震撼。这种旧时代的堪称疯狂的造物是我非常喜爱的，因为这背后是一个集体倾尽全力所能创造的工程学奇迹。其他宏伟的古早人工造物，比如早些时代的防空洞，那些旧时代的大型工厂，都是我的偏爱。</p><p>就是里边一些现代化电子设备比较出戏。我甚至还看到一个生产日期挺新的电风扇。</p><p>另外一点我想展开说的就是，重工业风。生活中很难见到特别粗的管道，这边有，而且尺寸范围相当大。但是你放工厂我会欣赏，放正常过道两边甚至头顶，盖得你看不到一个平整的仓壁，那就是幽闭恐惧症级别的地狱绘图了。墙上和地上，不是覆盖着，那几乎是管道和数量巨大的阀门、仪表拼接而成，被挤压的只剩下常人几乎不可能迅速通过的极度不规则的逼仄空间。另外我找了半天愣是没找到一个窗户，在这种暗无天日的地方关上不知道多久，一般人在这种地方肯定会疯。而且，潜艇的战略地位，也昭示着潜艇兵的命运：不存在侥幸，深海出故障的情况下，只有死亡这一既定而缓慢但恒定到来的命运。现代核潜艇更是战略级别的威慑，他们所面对的任何一种情况都是极度恐怖的。</p><blockquote><p>彦：这地方你待上没几天就幽闭恐惧症了<br>我：难怪人补贴空军之下第一档呢，这我是真服</p></blockquote><p>最逆天的地方来了。俩人参观完核动力部分，在看主电机的时候，里边照明电路突然断电了。以潜艇的封闭程度，一瞬间里边就陷入一片死黑。</p><blockquote><p>我：啊？<br>彦：啊？？<br>我：啊？？？<br>彦：啊？？？？</p></blockquote><p>所幸，大概十几秒后供电又恢复力。不过这一段时间对我来说长如极夜。那一刻俩啥必都以为自己要被关里头了，怂的跟受惊的兔子似的。应该是拉闸老大爷听到我俩动静了，又上电问里边有人没。俩人赶紧从出口窜出去了。</p><p>最哈人的一集。</p><p>出去之后俩人缓了会，然后上旁边开始今天的观景了。</p><p>首先是济南舰，最后是长江舰。中间回去休息了一下，看到底下一架遮住的飞机，还惊喜了半天。彦不屑一顾，我诧异半天才想起来人是瓜，啊不，三航爷。</p><p>下午拍了一组片子，顺便跟他玩了玩胶片机之后，俩人就出来去信号山旁边一个小地方恰了饭。28一份的土豆牛肉盖饭，好贵……不过胜在离景点近。可惜的是那会德国监狱旧址已经关门了，俩人就去爬旁边信号山了。有一说一，上边视野不错，也出了不少很满意的片。</p><p>最给力的是这俩老鸽：</p><p>亮灯之后拍了不少，遗憾的是树杈子太挡视野了，不太好出片。以及某人痛定思痛决定回头整个脚架。不过那边有不少望远镜，挺稳的，就是要扫码才能用。所以俩人直接用这玩意当脚架平替了。</p><blockquote><p>彦：纯，太纯了（陶醉</p></blockquote><p>之后俩人坐地铁打算去那家甜甜烧烤，可惜让百度地图坑了一回，从台北街道绕了一圈到人旧址了。找到之后发现人就在起点附近。更离谱的是进去只有一个空座，上二楼发现没位置结果下来一楼也满了。红温了.jpg</p><p>没办法，刚好也晚了，在旁边步行街吃了点小吃，坐地铁回宾馆旁边那家烧烤。线上挺好吃的，线下也可以，不过人店面似乎主营是外卖。但是实惠和味道上没让我失望，啤酒上没让我哥们失望。</p><p>干完饭，回酒店睡觉。替哥们负重前行了一天，倒头就睡。</p><h2 id="第2天-麦岛，栈桥，海鸥和薯条，以及代码"><a href="#第2天-麦岛，栈桥，海鸥和薯条，以及代码" class="headerlink" title="第2天-麦岛，栈桥，海鸥和薯条，以及代码"></a>第2天-麦岛，栈桥，海鸥和薯条，以及代码</h2><p>早上看天气预报，这边要下雪，感觉今天天气可能会有点糟……不过好在出去之后倒是没雪。这边天气这几天是冷锋过境，属于是变天如变脸的程度。</p><p>这一天睡到了自然醒。<del>早上</del>中午步行麦岛，被海风吹傻了。不过出片很多。早上一早上在宾馆写代码……至于为啥，合作项目快到ddl了。不过好在早上没出去，风大的虾仁。午饭是张亮麻辣烫和古茗，味道确实可以就是挺贵。</p><p>2点到麦岛，吹海风到3,4点。打车去栈桥<del>捉</del>喂了半天海鸥，哥们的Z50直接ISO爆炸了。6点左右俩人走着上了栈桥溜了个来回，海中间的亭子，别有景致。</p><p>步行到教堂，哥特式建筑美感别具一格，感觉薄纱半道的安妮小屋。另，青岛的地名好像真是按照全国省份起名的。</p><p>拐下去，在K和M的中门对决中选了M。</p><p>然后是1号线，体验了一把6分钟跨海，可惜啥都看不到，就是噪音特大。</p><p>看了中石油大学。石油的爷才是爷！</p><p>然后1号线回台东，路上为了我和另一个哥们的ddl疯狂写代码。居然在手机上搞定了。他也从他导师的侧目微笑里边解脱了。这期间哥们<del>遛</del>牵着我逛了这边一个步行街，规模意外的不太大。尝了下青岛啤酒原浆，苦的，喝不懂。给哥们解决了。</p><p>俩人开始乱逛，跑奥体对面五四广场乱逛听涛。</p><p>打车回宾馆了。洗漱+计划了下行程：济南&#x2F;淄博，启动！</p><p>算了先别启动了，睡觉了。</p><h2 id="第3天-海鸽子鸥，栈桥，小鱼山，德国领事馆旧址，以及夕阳"><a href="#第3天-海鸽子鸥，栈桥，小鱼山，德国领事馆旧址，以及夕阳" class="headerlink" title="第3天-海鸽子鸥，栈桥，小鱼山，德国领事馆旧址，以及夕阳"></a>第3天-海<del>鸽子</del>鸥，栈桥，小鱼山，德国领事馆旧址，以及夕阳</h2><p>这回来青岛最大的成就，就是薅到了<del>海鸽子</del>海鸥。昨天</p><h2 id="第4天-青岛：最澄澈的空与海·太美丽了淄博"><a href="#第4天-青岛：最澄澈的空与海·太美丽了淄博" class="headerlink" title="第4天-青岛：最澄澈的空与海·太美丽了淄博"></a>第4天-青岛：最澄澈的空与海·太美丽了淄博</h2><h2 id="第5天-济南-老舍你最好没骗我"><a href="#第5天-济南-老舍你最好没骗我" class="headerlink" title="第5天-济南-老舍你最好没骗我"></a>第5天-济南-老舍你最好没骗我</h2><p>md，跟老舍爆了，俩人冻的要似。</p><p>早上9点坐高铁到济南。10点多坐地铁到了宾馆。彦已经困的不行了，遂让他睡了一觉。这酒店条件确实不错，还有厨房。</p><p>另外就是济南这边地铁起码是从19年开始修的，这地方东边倒是还行，西边地铁修建难度简直地狱。地下各种复杂的地下水源，断层等等，能有地铁已经很不错了。能看得出来，济南地铁修的很新，而且也符合济南这边的特色：空间辽阔。</p><p>中午出发，先去旁边商超里边吃了一顿午饭。好久没吃米饭，俩人就恰了家石锅拌饭。</p><p>完事之后，我提出想去浪潮集团总部看看打个卡。毕竟在你电浪潮社也待了三年了，不太远（感觉比国医到你电西门的距离近一些），俩人就走过去了。</p><p>另外就是济南地铁</p><h2 id="第6天-返航-最背刺的一集"><a href="#第6天-返航-最背刺的一集" class="headerlink" title="第6天-返航-最背刺的一集"></a>第6天-返航-最背刺的一集</h2><p>早上早早起来，洗漱了下，俩人出门进地铁站。济南这边地铁修的相当新，虽然条形地铁线路比较难换乘，但是有地铁这一点已经薄纱某些地方了，而且还是直达济南东站的。赢！</p><p>最难绷的一集：俩人买票那会发现难买，进站发现人一大群小学生搁那去西安旅游……算是彻底被背刺了。</p><p>路上太原开始这段雪景很绝。白色的斑驳成片覆盖在黄色的平原上，在纯蓝天的映射下格外让人有食欲。</p><p>遂恰饭点了一顿15元高铁套餐。评价是感觉不如…海棠一楼食堂，但是好tm贵QAQ。</p><p>彦这作息跟那啥考拉一样（哎对<del>配色</del>穿搭也差不多）又开始睡了。</p><p>路上边看地图边看风景……注意到前边过黄河了，俩人扒窗边看了会，发现了最符合天气的一集：黄河整个冻住了。不过就算是冻住了风光也很不错。</p><p>另外就是山西太原附近了，风光很有意思，很多谷地，覆上雪景后别有风味。</p><p>路上还路过了香汾，小站没太在意。感知最明显的就是天空从山东沿海地区的澄澈逐渐过渡到熟悉的灰蒙蒙的天空——当然风也小了许多。</p><p>西安站倒是下去溜达了一圈，气候温和多了。就是听到一点疑似关门的动静后赶紧钻回去车里边了。车门旁边倒是还有人趁着到站抽烟的，人家就比我淡定多了。</p><p>之后不久就到站了。温度比沿海地区温和了很多，饱受折磨的俩人一下子放松下来：</p><blockquote><p>彦：这温度谁拉拉链啊<br>：笑死，根本不冷</p></blockquote><p>不过最后某人还是把拉链拉上了。</p><p>俩人混的不错，摇到一个同学开车给我俩接回去了。回去之前几个人一块来搓了一顿<del>mai</del>麦，已经是穷鬼的我必然是点了一份穷鬼套餐，顺便聊了不少时政<del>不是怎么每回的保留环节都是政治乐子啊</del>。另外，宝鸡夜色某种意义上比大明湖强。</p><hr><p>坐着同学的车到了家门口，提下箱子，关门，隔着车门和彦挥了挥手</p><p>转身，离去。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    <category term="文学" scheme="https://mxts.jiujiuer.xyz/categories/%E6%96%87%E5%AD%A6/"/>
    
    <category term="游记" scheme="https://mxts.jiujiuer.xyz/categories/%E6%96%87%E5%AD%A6/%E6%B8%B8%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库复习笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2024/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/db-review/"/>
    <id>https://mxts.jiujiuer.xyz/2024/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/db-review/</id>
    <published>2024-01-15T11:17:19.000Z</published>
    <updated>2025-03-12T15:31:34.801Z</updated>
    
    <content type="html"><![CDATA[<p>这学期学的数据库主要偏向应用，理论部分相对比较少，重点如下：</p><h2 id="数据库系统概论-大纲"><a href="#数据库系统概论-大纲" class="headerlink" title="数据库系统概论 大纲"></a>数据库系统概论 大纲</h2><ul><li>绪论<ul><li>特点，概念，发展</li><li>数据模型：层次，网状，关系</li><li>结构：三级模式，二级映像</li><li>组成</li></ul></li><li>关系数据库<ul><li>关系数据结构</li><li>关系操作！</li><li>关系完整性：实体完整性，参照完整性，用户定义的完整性</li><li>关系代数！</li></ul></li><li>SQL<ul><li>定义{模式，表，索引，数据字典} </li><li>查询：单表，连接，嵌套，集合，派生表</li><li>更新：插入，修改，删除</li><li>空值，试图</li></ul></li><li>安全性<ul><li>安全性控制：用户身份控制，存取控制，自主存取控制,授权&#x2F;收回，抢注存取控制方法</li><li>视图 - 审计 - 数据加密</li></ul></li><li>数据库完整性<ul><li>实体完整性，参照完整性，用户定义的完整性</li><li>完整性约束命名子句</li><li>断言</li><li>触发器</li></ul></li><li>关系数据理论<ul><li>规范化<ul><li>函数依赖 - 码 - 范式 - 2NF - 3NF - BCNF - 多值依赖和4NF</li></ul></li><li>数据依赖的公理系统 - 模式分解</li></ul></li><li>数据库设计<ul><li>数据字典</li><li>概念模型</li><li>E-R模型及其扩充</li></ul></li><li>数据库编程<ul><li>嵌入式SQL：处理过程，通信（游标，动态SQL）</li><li>过程化SQL</li><li>存储过程和函数</li><li>ODBC编程</li></ul></li><li>关系查询处理和查询优化<ul><li>查询处理步骤，优化</li><li>代数优化，物理优化</li></ul></li><li>数据库恢复技术<ul><li>事务概念和特点 - 恢复概述 - 故障种类，恢复技术和策略</li><li>并发控制</li></ul></li></ul><p>整理的不是特别全乎，不过也涵盖不少了。往年大题就那几道，题型相对固定，针对性做题，做会题就算复习完了。</p><p>上面的知识点里边特别重要的就那几个：<strong>关系代数，关系完整性，SQL，关系数据理论和事务与并发，查询优化</strong>这几个。其他零碎的小知识点有印象就行了。</p><p>复习方法一是做题，最好是看答案；二是看例子，例题，然后递归复习知识点，效率最高。三是下策，先看知识点，再做题，适合开始复习比较早，时间充裕的情况，也是最充分的复习，但是问题是容易动力不足。</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="CREATE-DROP-ALTER"><a href="#CREATE-DROP-ALTER" class="headerlink" title="CREATE,DROP,ALTER"></a>CREATE,DROP,ALTER</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>&quot;name&quot;<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> &quot;username&quot;;</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA &quot;name&quot; [CASCADE<span class="operator">/</span>RESTRICT];</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;name&quot;</span><br><span class="line">&#123;   Col1 <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Col2 NUMBER(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    Col3 <span class="type">INT</span> <span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> TABLE2(Sno),</span><br><span class="line">    <span class="keyword">CHECK</span>(Col1 <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> Col1 <span class="operator">&lt;</span> <span class="number">10</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> schema.tablename&#123;</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 同上</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA &quot;name&quot; <span class="keyword">AUTHORIZATION</span> &quot;user&quot; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;table1&quot;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 同上</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;name&quot; [<span class="keyword">ADD</span> <span class="keyword">COLUMN</span> name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="operator">|</span></span><br><span class="line">                    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname) <span class="operator">|</span></span><br><span class="line">                    <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(Cno) <span class="keyword">REFERENCES</span> Student(Cno) <span class="operator">|</span></span><br><span class="line">                    <span class="keyword">DROP</span> Col1 CASCADE<span class="operator">|</span>RESTRICT</span><br><span class="line">                    <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> “completeness” CASCADE<span class="operator">|</span>RESTRICT</span><br><span class="line">                    <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Col1 <span class="type">VARCHAR</span>(<span class="number">114514</span>)</span><br><span class="line">];</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &quot;name&quot; CASCADE<span class="operator">|</span>RESTRICT;</span><br></pre></td></tr></table></figure><h3 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span><span class="operator">|</span>CLUSTER INDEX &quot;index_name&quot; <span class="keyword">ON</span> tableName(Col1 <span class="keyword">DESC</span>, Col2 <span class="keyword">ASC</span>);</span><br><span class="line"><span class="keyword">ALTER</span> INDX &quot;old_index&quot; RENAME <span class="keyword">TO</span> &quot;new_index&quot;;</span><br><span class="line"><span class="keyword">DROP</span> INDEX &quot;index_name&quot;;</span><br></pre></td></tr></table></figure><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span><span class="operator">|</span><span class="keyword">ALL</span>] <span class="number">2022</span><span class="operator">-</span>table1.age,table2.Sname</span><br><span class="line"><span class="keyword">FROM</span> [&quot;table1&quot; <span class="operator">|</span> &quot;view1&quot;]</span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">5</span> <span class="keyword">AND</span><span class="operator">|</span><span class="keyword">OR</span> age<span class="operator">&lt;</span><span class="number">7</span> <span class="keyword">AND</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> age [<span class="keyword">NOT</span>]  <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span> <span class="keyword">AND</span> Sdept <span class="keyword">IN</span>(<span class="string">&#x27;CS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>) <span class="keyword">AND</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;张____&#x27;</span> <span class="keyword">AND</span> GRADE <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Col2 <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Col1 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>连接查询时，列举全部属性列，去掉相同的列就是自然连接。</p><p>单表连接查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> Course.FIRST, Course.SECOND</span><br><span class="line"><span class="keyword">SELECT</span> FIRST.Cno, SECOND.Cpno</span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno<span class="operator">=</span>SECOND.Cno;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>外连接查询</span><br><span class="line"><span class="keyword">FROM</span> table1 <span class="keyword">LEFT</span><span class="operator">|</span><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span><span class="operator">|</span><span class="keyword">USING</span>(table1.sno<span class="operator">=</span>table2.sno) <span class="operator">/</span><span class="operator">/</span> <span class="keyword">USING</span>去重</span><br></pre></td></tr></table></figure><p><code>%_</code>任意字符、一个字符，汉字<strong>长两个字符</strong></p><p>子查询使用<code>IN</code>关键字，阅读&#x2F;构造时从内部构造。下面的例子相当于是将子查询的结果作为父查询的语句的参数了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Sname, Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> Sdept</span><br><span class="line">    <span class="keyword">FROM</span> Student</span><br><span class="line">    <span class="keyword">WHERE</span> Sname<span class="operator">=</span><span class="string">&#x27;lex&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> xxx;</span><br></pre></td></tr></table></figure><p>还有<code>EXISTS</code>子查询，跟上边<code>IN</code>差不多，不过意思是将”至少存在一个查询结果“作为查询选择器的条件。</p><p>多个查询可以用<code>UNION,, INTERSECT, EXCEPT</code>分别进行并，交，差三个集合运算，目标的数据结构必须相同。</p><h3 id="INSERT-UPDATE-DELETE"><a href="#INSERT-UPDATE-DELETE" class="headerlink" title="INSERT,UPDATE,DELETE"></a>INSERT,UPDATE,DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(Col1, Col2) [</span><br><span class="line">    <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;4&#x27;</span>) <span class="operator">|</span> </span><br><span class="line">    <span class="keyword">SELECT</span> xxx <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> xxx <span class="keyword">GROUP</span> <span class="keyword">BY</span> xxx</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SET</span> Col1<span class="operator">=</span>xxx</span><br><span class="line"><span class="keyword">WHERE</span> cond;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> cond;</span><br></pre></td></tr></table></figure><h3 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vname(Col1,Coln)</span><br><span class="line"><span class="keyword">AS</span> 子查询</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> xxx;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> vname CASCADE</span><br></pre></td></tr></table></figure><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx <span class="keyword">IS</span> [<span class="keyword">NOT</span>] <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2023这一年</title>
    <link href="https://mxts.jiujiuer.xyz/2023/12/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E8%B0%88/2023%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <id>https://mxts.jiujiuer.xyz/2023/12/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E8%B0%88/2023%E8%BF%99%E4%B8%80%E5%B9%B4/</id>
    <published>2023-12-31T12:30:31.000Z</published>
    <updated>2025-03-12T15:31:34.798Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快啊。一转眼已经过去5&#x2F;8个大学了。</p><span id="more"></span><p>记得去年这个时候，我还是和同学在语音里闲聊着，一起等着跨年。然后，2023，就在我们几个的闲聊中拉开了序幕。比较幸运的是，放开之后，没啥大的折腾，nCov-19终于慢慢销声匿迹了。还好，终于能有个比较正常的大学生活了。</p><p>冷清的窗外，忽的传来几声烟花爆裂的声音，提醒着我，这一年确实是过去了。家里只有父母和奶奶，静悄悄的。大人们都早早睡下了，毕竟还要工作。深冬的寒夜里我依旧在思考，但又不知道在想什么。或许只是借助思考打发孤独罢了。</p><p>哦对了，去年那会差点喜提新机：跟某同学去完市图书馆之后，回家放东西的时候手没拿稳直接drop it了。还好机器主体没啥问题，就是屏幕漏液痛失360元。不过当时脑子一抽打开2077看了下效果，嗯，更沉浸了。</p><h2 id="一，二月"><a href="#一，二月" class="headerlink" title="一，二月"></a>一，二月</h2><p>过年前还跟哥们出去浪了一会，顺便被一个南科大的哥们请恰了一顿饭。毕竟帮人家搞定了课程大作业确实挺不容易的，就是不知道这孩子有啥想不开的，一个学金融的非要选Java……反正逛的是挺爽的：顶着刚疫情还没恢复的身子去爬山差点没给我爬入土了。后面几天有一天在发小家里聊到好晚，还带了一袋子自己炸的薯条分而啖之。他很喜欢米家的游戏，<del>倒是跟我刚好相反</del>反正跟原切割了。不过这不重要，反正见面的话题永远聊不完：两个天差地别的专业，聊啥都是新鲜的；更重要的是，还好现在远没到拉家常的年纪，我们暂且都还是比较有趣的人。</p><p>转眼就是过年。现在春节用春晚作为背景音的都很少了，拜完年串完门，烧纸的烧纸，上坟的上坟。村子里的人是一年比一年少，有些房子变新了，也变冷清了；有些房子门前已经满是杂草，无人打理许久了。偶尔请些亲戚来家里做客才能稍微驱逐些寂寥，有点小孩就更热闹了——可惜，现在他们对于手机更感兴趣。</p><p>跟哥们一块看了《流浪地球2》，感觉比1提升不小。导演功力到位，华仔演技在线，剧情不错，就是叙事节奏有改进空间。在这之后，ChatGPT就第一次问世了。</p><h2 id="三，四月"><a href="#三，四月" class="headerlink" title="三，四月"></a>三，四月</h2><p>机械性的春节后，该上学的上学，该上班的上班，一切照旧。去年没有考的试就放到了开春来考，队友想专心复习，顶不住压力，就放弃了美赛。临阵垮台，于是参加美赛的机会从三次变成了两次。如果想要给考研加点分的话，那就只能指望大三寒假咯。队友不太好意思，遂请我们吃了个<del>散伙</del>饭。想说些啥，但是也没啥好说的。那会的大学时间还有不少，机会也是。</p><p>到这里，节奏基本还行，但是对于大二下的恶毒我还是始料不及。三月，四月，又是期中考试，实验陆续开始。西电的传统是实验报告大多手写，于是免不了应付这些繁文缛节。加上课内作业，而且最重要的是，我还是选了最累的活法：打了一堆毛毛雨一般的竞赛。最忙的时候，手头同时有6，7个任务得搞定。</p><p>我发现我好像那个什么抖m，净喜欢给自己找罪受。</p><p>不过这些倒还好，属于是有惊无险地都干完了。真正难绷的事情才刚刚开始。虽然没有rx那么强的开发效率，但是我还是接下了同学拉我去做的烂摊子。那本来是个挺简单的vue+springBoot标准前后端项目，最后做的我怀疑人生，差点放弃前端。那项目我打5月接手的时候看了下需求，感觉多是多，但是能做——然后我就被另一个哥们封装的，小山包一样的屎山代码糊脸了。这个后面说。另外那段时间也把鸽了整一年的OJ拉出来重新写了，刚好能用上新学的东西，这会应该算是真正开始熟悉了Vue和Golang这俩现代开发语言的用法。</p><p>不得不提的还有大模型，人类史上用户量最快达到一亿的玩意，没有学术上的美感，有的只是空前庞大的恐怖算力，工业界的暴力美学所创造出的前所未有的奇迹——能力只有文字接龙，但是能力强到让许多人开始担心自己的饭碗，甚至有人认为它的智能快达到临界点了。</p><p>以及就是业余无线电能力测试。一晚上速通，拿上A证了。上了两年大学，好在应试能力留了一些。</p><h2 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h2><p>5月是实验的谎言。一个月天天是实验，周周有实验报告要写。好在有几个能直接提交电子打印版的，借助历史的积淀秒了。不过实验本身也够占时间的，导致我错过了半个晒你祭（恼）。5.13早上当了会门口引导的志愿者之后，把俩<del>二刺螈</del>同学从隔壁瓜大领进去光了会，拍了几个coser，就被电子线路实验带走了。俩小时速通之后，展子还在，但是不剩啥节目了。事后同学表示，这Live神中神，特别是那个鼓手定得一批。</p><blockquote><p>我：我tm在做实验没听到啊啊啊啊<br>：你这辈子就是让实验给害了</p></blockquote><p>不过还好，4月还是3月喜提新哥们，还是意外盒到的酷安群u（甚至刚好还是个潜在越共）,5月初有长安THO，就给他拽过去逛车万展子了。好像之后还陪着他娶了个新旧电脑（无误），他的古董电子产品收集喜加一。也是他的影响让我开始怀疑我对算力需求的必要性了。也是月初，发小还去上海逛cp29（还是多少）了，买周边就花了小1k。只能感叹某些二次元的行动力真的强，一个人从西安跑上海还跟特种兵似的，基本所有重要地方都打卡过了。</p><p>这个月还跟浪潮的朋友们出去团建了。19级的学长到这个点也基本都未来既定了，值得庆祝的是学长们去向还都相当可以。西电保研清华的老学长还来回来逛了一圈，可惜比较社恐也就没聊几句。感叹一句，浪潮这些学长水平真的都好强啊。</p><p>还有一回是得知西安的亲戚住院了，很震惊，顶着大雨跑雁塔去看望了。越发感叹身体的重要性，尤其叔叔他上的班还是长期熬夜那种，很伤身体。于是之后也下定决心少熬夜<del>但是只有一点点</del>。巧的是这地方刚好离你电老校区不远，就顺便跑过去逛了一圈。刚开始在家属区里溜达了半天，最后才找着进去学校的路。刚好去听了个EDA公司的校企合作实验室揭榜，顺便第一回线下见到了你电的校长<del>之一</del>。可惜的是去晚了，没白嫖到讲座送的礼盒。</p><p>后面雨突然特别大，打着伞都给你打一身溅射伤害那种，于是刚好趁这个时间逛了下你电的老图书馆。好像那种老楼都喜欢修得很高，这玩意外边看着还行，里边有足足十一层。看了下都是些研究生学长学姐在自习&#x2F;看书&#x2F;写论文，座位倒是比南校区多很多。随机roll到本Hadoop的书看了下，然后就下楼了。</p><p>在雨里边看着路边树上挂的一排诗歌的牌子，还有你电老校区的老苏式宿舍楼，感觉有种回到小时候的感觉。</p><p>不过雨太大了，于是跑到食堂去了。老校区食堂还不错，便宜大碗。然后也不知道怎么突然想起来，也是去年这几天，袁隆平院士走了。然后出门看着雨都变了个滋味。</p><h2 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h2><p>之后就是复习，考试了。这之间学校里边“报复式”地办了不少活动，比如什么大学生音乐节。完事之后也到六月了，刚好也到19级老东西们爆金币的时候了。说起来去年这会刚送走小梦，现在看电表还在维护，真是感慨万千。当时学原生安卓开发，还是向小梦哥哥请教的很多问题。现在学长已经在字节干了快一年半两年了，希望一切都顺利吧。</p><p>另外就是，把原来那个B450的AMD平台板U条套装换成了RD450X的Intel Xeon平台的板U套装了。不过因为电源输出端口不够的原因，买了个电源在路上还没运回来。一直拖到下个月才装好。不过有一说一，双路E5真的爽啊，特别是拿来跑各种数据挖掘算法的时候，那速度真的吊着普通消费级处理器打，12700H要跑十几分钟的k-means聚类，这玩意只要几十秒；编译的时候<code>make -j56</code>更是爽的一批。</p><p>考试完了之后也算是去逛一逛，光速约了一堆哥们（重大失误，约人的时候尽量少点，特别里边不少都不是特别熟的人）跑去爬华山。上山的过程嘛很爽，跟几个好朋友一路边吐槽边往上走，晚上山上风景倒是也别有风味，尤其是看着一路上一条条光点连成的线条，以及山脚下<del>万家</del>灯火，有种说不出来的震撼。几个哥们爬到中峰就爬不动了，我倒是莽上去东峰了，就是半路上两条腿轮流抽筋实在有点酸爽。</p><p>最后倒是亲眼看到了完整的日出，太阳从一个小点慢慢变得越来越红火，越来越大，感觉一晚上的努力也值了。</p><p>下山实在不想说了，建议是千万别人多的时候爬山，真的够你喝一壶了，氪金都不能速通的那种痛（虽然主要是因为一晚上没睡觉）。乱七八糟的事让这事虎头蛇尾地结束了，也从此对华山这地方有了ptsd。这种景区建议最好先对周边了解清楚之后再去。</p><p>然后回了学校，就是为期一周的军训。大学的军训比印象中高中那会红河谷那次水多了，基本就是每天上午8点集合，站一个上午军姿&#x2F;学走正步&#x2F;整队之类的。教官和我们同岁，所以也比较仁慈<del>放水</del>。最后军训完了之后，也刚好到暑假了。</p><h2 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h2><p>跟好哥们去网安大楼天台上溜达了一圈，风景真的不错。夕阳刚好，空无一物的天空让人心情无比平静，很大程度上也排解了之前的糟心事的影响。小赵真的是个很好的人，希望他未来能被世界温柔以待吧。后来也跟他合作整过一个小项目，我写前端，他做硬件。不得不说，这还是我第二次做一个这么贴近硬件的项目。可能以后遇到硬件方面的需求的话，我真的能用一个esp32整出不少活吧。</p><p>之后几天，跟隔壁瓜大两个哥们线下联机打了一段时间的MC Java原版生存。这游戏也陪着我走过了起码快十年了吧？小学玩过，初中玩过，高中也跟舍友玩过，大学了还在玩，可能这就是开放世界的魅力吧。当然，我们三个彩笔打了两三天还没通关，光停下来造房子造基地了，末地门都还没找到呢。趁着这段时间，顺便逛了一圈<del>瓜大</del>东大村，评价是比你电周边丰富多了。以及西工大校内，虽然学校地方比较偏僻，但是瓜大的校内生活似乎也还行。特别是同学宿舍晚上基本不关门这点薄纱你电，以及瓜大的风景真不是吹的，到处都是好机位，依山傍水，出图书馆就是四时之景。而且瓜大的图书馆真的大，里边甚至有商超那种大电动扶梯，一堆自习位置，靠窗的位置学累了还能看会风景。另外关于这点，彦的自习常用位置是四个书架合围的一个小空间里边。</p><blockquote><p>：你是不喜欢看风景吗<br>彦：学习要讲究一个氛围<br>：嗯所以呢<br>彦：你想想mc里边附魔台周围都要围一圈书呢<br>：合着你给你自个附魔呢是</p></blockquote><p>中间有一回回学校拿电脑（mc果然得几个人联机才有意思），顺便带他俩在学校里（再次）溜达了一圈。中间带他俩去部室打了会sdvx差点给主线任务忘了<del>音批是这样的</del>。那之后带他们rua了会大鹅，以及在B楼底下不定期出没的黑子，拿上电脑恰了个饭，就打车回瓜大了。然后几个彩笔被循声守卫轮流锤死不知道多少次。之后不知道为啥瓜的<del>唐</del>航小天莫名其妙火了，然后莫名其妙跟你电的<del>唐</del>西小电联动了（？）</p><blockquote><p><del>唐</del>航小天可爱捏</p></blockquote><p>另外就是另一个鸽子精那会也从哈尔滨回来了。摇了几个朋友出去小聚了一下。后面基本就只剩下天天写代码肝外包项目了。哦对，还有偶尔去学校游泳池游个泳啥的。顺带还带着一个同学大概学会了怎么在水里扑腾（</p><p>这个假期最主要的就是俩外包项目，硬是把github commits从不到300刷到了600+。接了俩外包，在学校干了俩月。靠着外包挣的一点钱给整了个平板，升级了服务器，整了个便携屏，给笔记本升级到32+8的抽象内存组合了。8月份，同学来打电赛省赛，还迎带同学溜达了一圈。那阵子雨天挺多的，一阵秋雨一阵凉，感觉西安这地方只有夏天跟冬天俩季节。中间回家了一趟，好在家里没啥大问题。在宝鸡拉着同学出去溜达了一圈，比较离谱的是他们见到了个核酸检测点之后集体发电，不存在的记忆增加了.jpg</p><p>后面回了西安之后，还遇到高中同学来西安逛。俩人聊天聊了一个通宵。回去之后不知道咋想的突然就想给电脑换个Arch<del>然后就找到目前最理想的系统了</del>。</p><h2 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h2><p>ISC招新，感受到自己已经确实是个大三老东西了。趁着开学听了好多校招会，虽然本科大概率没有直接就业的想法。比较幸运的一点是，小米的校招会上还抽到个Xiaomi Sounds Pro。可惜不是声学发烧友，倒是让几个好哥们爽了一回。</p><p>月中跟哥们去看了奥本海默，确实是好片，没别人说的那么难懂，就是太过沉迷剧情，两个人三回标题都没拍下来打卡，最后只拍下来个龙标，笑死。后来跟他速通了下西安理工金花校区，苏联老楼给我留下了极其深刻的印象<del>有种回家的错觉</del>。</p><blockquote><p>回来没两天就是湖人哥一战成名的时刻了。</p></blockquote><p>后面就是第一回参加开源社区活动，壮着胆子讲了回Linux，起码没翻车。顺便线下了好多酷安&#x2F;OSC群的群u<del>当然最后也是没逃过来自群u的盒打击</del>。后一天去车万组活现场瞅了一眼，在放漫才，确实很有节目效果。</p><p>之后就是星铁&#x2F;崩坏的啥活动，俩哥们跑去线下打卡来着，顺便又聚了一回，又三个人速通了回西安理工新校区。一个崩批一个铁批行动力是真强，晚上嗯走七个打卡点打卡，我在干啥，我那会好像在边走边在给电脑装Arch<del>Arch To Go</del>。顺便几个人吐槽了一波西安依托的地面交通。</p><p>月底，那个外包项目也因为各种问题凉了。说实话心里很不是滋味，并且对于这种任务之后心里都没了底。说不上来是好是坏。</p><p>25号，一个20级研究生学姐跳了，在此之前西电好像已经十几年都没跳的了。不知道是什么让她做出了这样的选择。对她的行为我不应也不想做出评价，对于这个结果还是希望逝者安息吧。</p><h2 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h2><p>国庆+中秋调休，回去家里参加了邻家姐姐的婚礼。后面又和几个同学在宝鸡的小地方到处乱逛了一回，作为国庆的收尾。</p><p>这个月后面的就是音乐会，迎新歌会之类的。活动确实不少，还跟高中来打比赛的学弟们见了回面，时间真快啊。</p><p>后面14号是浪潮的迎新晚会，15号还有你电的百团大战。现场特别热闹，酷安群的抽象海报和那张顶针专辑的关注度挺高的。</p><blockquote><p>早知道，还是原道.jpg<del>触发悔恨之泪</del></p></blockquote><p>后面跟着彦和辰出去溜达，没处去的时候<del>骗</del>带他俩来打maimai，俩人打得倒是不亦乐乎。后面看到一个用币随机抽天子手办的机器之后就走不动道了，把白嫖的币用完也没拿到qaq</p><p>这个月也发布了不少手机平板之类的。米14发布那天同学还拉着我去线下摸了真机器，还有华子那个特别大的平板冲击力也不小。</p><h2 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h2><p>这个月也挺魔幻的，以一个重大删库事件为开端。不过实际影响并没有那么大，毕竟开源什么时候死过。</p><p>中间去电信的陕西主干IDC机房参观过。现代化的工业美学，真的帅的顶天。包括垂直化冗余能源设计，应急热交换塔（真的是个塔），特大号的备用发电机组机房和热交换机组机房，帅惨了。反倒是核心的业务机房，特别规整，<del>环境优美</del>倒是没啥特别突出的，不过单就这一间机房的装机量以及那个密堆叠，加上天花板走线，真的帅。这机房的数据吞吐量更是恐怖，出口时延&lt;2ms，出口带宽16.4T（没见标注的单位是啥，应该是bps吧）。，</p><p>比较难绷的是介绍企业文化的时候，听到那个半部电台起家还以为在讲你电校史呢。另外比较惊喜的就是展示产品的时候，一个陈列墙上挂了很多相当大时间跨度的移动通信终端，甚至还有大哥大。回了学校之后刚好赶上各种国企的校招，就去凑了个热闹。</p><p>之后就是贴吧高校头像异变事件了。隔壁瓜大唐小天火遍全网，你电唐小电也一触即发。最后俩cp学校吧头官宣联动了。</p><p>月中，籽岷的工作站组装好了，然后子建就顺道来西安送东西+装机&#x2F;溜达了。刚好有人电脑有问题，子建就把家伙拿上了。来都来了不拿个电脑顺带清清灰说不过去，但是因为服务器全塔实在背不动就只拿了俩笔记本。先给兆廷把液金换成了7958sp，然后某人就得液金ptsd了。更难绷的是兆廷电脑的热管因为玄学的剪切力弯了，不过无伤大雅，某人也没时间倒腾这问题了。</p><p>当天晚上我们几个还是继续推主线任务，给籽岷把他的工作站部署好顺带给一群人的电脑清灰+换硅脂<del>反正7958sp又放不住不用白不用</del>。但是离谱的是遇到玄学问题，明明子建拿来的时候已经给系统+专业软件都装好了，结果突然不能开机了。没办法，我跟子建就轮流干清灰&#x2F;debug的活。最后整了半天没找出来问题，灰倒是都清完了。更离谱的是我俩一堆WinPE一个都进不去，然后我脑子一抽打算进我U盘上自带的Arch LiveCD试试。感谢Linux启动日志，我很快就把问题锁定到那个蓝盘上了。果然，替换法试了下，那个蓝盘莫名其妙挂了。</p><p>完事之后已经快早上五六点了，本来说完事打打mc呢也没时间了，睡吧。好在我们仨在东大村找了个宾馆住了一晚上，休息的也还行。第二天起来让籽岷换个固态，另一个哥们则是完全被整麻了。不过好在之后换了盘之后，远程指导同学分区装系统打驱动，一遍过。</p><p>事后彦看着我们当晚的工作场面照，评价说我们跟一群准备攻打瓜大的黑客一样。没绷住。另外就是被霓虹的场子做工震撼到了，那个松下的机子我第一回见到那么分体式的主板，而且也是我继G15之后见到的第二个风扇装主办背面的笔记本。换硅脂的时候我如履薄冰战战兢兢生怕抠的太用力给晶圆一块带走了，因为这东西硅脂已经彻底硬化了，估计是从16年到现在就没换过硅脂。好在有惊无险地清理完了。下午带子建在瓜大逛了一下午，以及中间难绷的是彦差点被他们点名拿下一血，好在没事。刚好这回来的时候他们在修飞机展示区，虽然不太了解军事但是这堆真货是真的帅。</p><p>以及后面清完灰之后发现手上这个松下的本子安静过头了，本来想赞扬下子建清灰手法高超，直到我拆开机器之后发现：</p><blockquote><p>哥们忘插风扇电源了，那能不安静吗.jpg<br>狠狠拷打.jpg</p></blockquote><p>之后就是各种上机&#x2F;实验了，给我时间全占完了基本，导致瓜大的车万展子咱都没去成。哦月底还感冒了一回，不过还好是普通感冒，来得快去得也快，可能也是因为这学期报的散打强度比较大提升了免疫力？月末的电子线路课设差点给我带走，不过还好有惊无险过了。</p><p>29号酷安群线下k70发布会，印象最深的不是手机而是chi哥的发型。</p><h2 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h2><p>ISC这个月开了几次讲座，有我提议的Linux基础，还有AI那边发起的机器学习概论。质量都不错，场面也挺热闹的。</p><p>顺便几次差一点线下了Dimole，不过这孩子好像挺多灾多难的，希望人没事.jpg</p><p>然后月初带家里人来学校里逛了回，月中<del>被大一学弟带</del>带大一学弟打了星火杯。</p><p>12.15 今年的第一场雪。</p><p>12.16 三刷六级，微原实验，以及生日。</p><p>12.18 23:59 第一次被地震警报吵醒，希望甘肃同胞平安。</p><p>12.19 和好朋友去设了台，算是半个HAM了。</p><blockquote><p>没想到的是西电湖人的落幕带来的是西电冰人的出现，电专学子永远是会整活的。</p></blockquote><p>月底出去跟朋友溜达了一次，圣诞节跟一个未知的朋友交换了礼物，忙了一个月的各种ddl，</p><p>12.30 跟同学出去溜达就当提前跨年了。先是和彦在香积寺里边做了一下午的光影猎手，然后和兆廷在师大万科恰了顿饭，时间真快。</p><p>月初很忙，月末也忙，忙忙碌碌的一个月。</p><hr><p>这篇流水账从28号开始写，到现在也刚好3天了，再过几个小时，人类又要庆祝自己小小的行星绕着恒星走过了一圈。年年如此，未来也将如此。</p><p>这个敲了半天的薄膜键盘，是我在高考完那个暑假买的，一个普通的键盘。它连上过我的老台式机，笔记本，以及现在这个松下笔记本，快三年了，它也老了：大部分按键因为写代码的摧残，已经被磨成了白色。左Shift也因为频繁使用，已经卡的吱吱嘎嘎的响。</p><p>看着键盘，想想我自己，好像也差不多。本科排课问题的摧残，jwc烂活的摧残，跟甲方搏斗的摧残，在某些方面我也逐渐迟钝起来，行动力也不如从前。似乎高考前那阵子是我行动力最强的时候，一个人凭着兴趣就写了快四千行代码，给自己和朋友们做了个小玩具。或许这也是一种磨损？</p><p>有时候真觉得自己老了，写不动了。不过这两年写的其实也并不少，甚至就那个因为各种原因烂尾的项目，我提交的代码可能都有几万行。相比于几年前，我确实进步了不少：纯粹依靠自己一个人做到的东西，上限越来越高了。特别是视野开拓了不少，现在能用很多学科的知识去解决实际问题了。不过最重要的还是热情，这几年挖过不少坑，甚至还在酷安发过自己编写的应用，给开源社区贡献了一个博客聚合系统的实现，也被收到了水表里边，作为博客星球的后端，在讲座上讲过两次技术相关的内容。竞赛也打了不少，奖也是。</p><p>不过，即使面对天堑我也不想停下，因为我就是想做到我想做的事。和自己和解能解决很多问题，但是我不想，只因为我不服这个自己。所以我一次次挑战自己。即使陷入迷惘，也不想停下步伐，因为这比找不到路更可怕。</p><p>现在已经是晚上了，冬天的太阳落山早，天已经黑了。舍友一个回家了，一个出去跨年了。宿舍只剩我一个，宿舍空荡荡的，也没开灯。对着空荡荡的Vim敲了半天，心里有种说不上来的孤独。这算不算是一种孤独编程？（笑）</p><p>还没感叹完呢，那几个哥们已经在商量着连麦跨年了。白孤独了（x</p><p>变的倒是很多，不变的也挺多。至少在外边，还有这些狐朋狗友陪着我，不是吗？</p><hr><p>你好，2024。有什么展望的话，希望明年写流水账的时候，能来点更精彩的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时间过得真快啊。一转眼已经过去5&amp;#x2F;8个大学了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>函数式编程范式</title>
    <link href="https://mxts.jiujiuer.xyz/2023/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/functional-thinking/"/>
    <id>https://mxts.jiujiuer.xyz/2023/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/functional-thinking/</id>
    <published>2023-12-11T14:00:41.000Z</published>
    <updated>2025-03-12T15:31:34.808Z</updated>
    
    <content type="html"><![CDATA[<p>对于大部分场合而言，优化不需要过早，到了需要优化的时候自然会意识到必要性。过早的优化只会带来负担。</p><p>最近JS写多了，都快不会写算法题了。其实不怪JS，只是绝大多数具体业务的实现一般很少需要用到什么重要算法。不过我遇到的问题是代码写烦了：这里写一坨那里写一坨，写一些忘一些，最后就成了一大坨，看着多但是实际功能并没多少。这让我想到了代码表达力的问题，于是我开始寻找方法去提高代码的表达力：写更少的代码，实现更多的功能。代码变得紧凑对于检查和维护来说也能降低一部分负担。</p><p>于是，我自然而然地正式接触到了函数式编程。对于当前的需求，这似乎就是答案。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>下面这段是我和LLM一块写的</p></blockquote><p>函数式编程（Functional Programming）是一种编程范式，区别于命令式编程关注指令和操作，函数式编程更加关注函数本身，函数的组合、副作用，流程和代码可读性。函数作为一等公民，基本上可以在任何位置上出现。它关注函数的施用，而非具体操作的实现。这种编程风格强调将数据抽象为函数，将函数作为基本构建块来构建复杂的计算。函数式编程的优势包括：可读性、可维护性、可重用性等。</p><p>首先为啥叫函数式，因为函数就是核心，一切围绕函数展开。刚上手时，我对它的印象就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.<span class="title function_">map</span>(...).<span class="title function_">filter</span>(...).<span class="title function_">reduce</span>(...)</span><br><span class="line">data.<span class="title function_">forEach</span>(...)</span><br></pre></td></tr></table></figure><p>这样的。只用这几个函数对数据进行操作就能完成大部分数据操作，这对于处理各种返回值得到裁剪&#x2F;过滤过的目标数据而言，十分高效简洁。在这两个例子里边，代码将数据处理作为一个流程对待，我们只需要描述<strong>如何</strong>处理这个数据源，以及处理的规则，其他的都无需我们参与。同样的需求，使用命令式编程，我们需要：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> processed=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;data.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">MATCHING_COND</span>)</span><br><span class="line">        processed.<span class="title function_">push</span>(data[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么？因为上面的<code>map</code>，<code>reduce</code>，<code>filter</code>和<code>forEach</code>等都是高阶函数，它们可以被应用于数据源，接受一个函数作为参数，并使用函数处理数据。它们封装了常用的处理数据的流程，比如<code>map</code>会将数据的每一项使用传入的函数进行变换，并将它输出到新的数组中；<code>filter</code>会使用传入函数处理每一项，根据返回值是否为真将数据放入一个新的数组中并返回，等等。每一个高阶函数都是对于一个具体的数据处理流程的抽象描述，而这部分就是传统的命令式编程难以解决的问题——它们关注具体指令，你需要依靠具体的指令来解决你面对的问题，并自己编写具体的处理过程。</p><p>在上面传统的解决方法中，我们创建了变量<code>processed</code>，创建了用于循环的变量<code>i</code>，还使用了循环并规定了循环的结束条件，在循环体中规定了将结果加入循环的条件和流程。这些操作都在函数式操作中被抽象成了若干个高阶函数，我们无需再关心具体如何实现<code>map</code>和<code>filter</code>等操作，更不用自己去管理其中的状态（比如循环变量和用于保存中间处理结果的变量），实现了<del>降本增效</del>用少量代码完成常见需求，并减少了我们花费在状态管理（循环变量的创建，自增，临时变量的创建和改变等）和具体实现上的细节，而让我们只专注于和任务本身相关的部分。</p><p>并且，我们使用传递参数的方式将它们<strong>组合</strong>在一起，而非通过继承将它们<strong>耦合</strong>在一起。这一点意味着函数式编程降低了代码的耦合度，并且提高了代码的复用率：比起来面向对象按照类，通过继承进行复用，函数式编程将复用粒度降低到函数的级别，这也显著减少了无用代码。不过继承除了复用，还有规范和约束实现的作用。函数式编程如何解决这个问题我暂时还不太清楚。不过函数式编程，面向对象编程以及元编程，这三者属于是几乎正交的关系，所以完全可以交叉使用没啥问题。</p><p>另外还有一点上面的例子并没有表现出来，那就是关于副作用这一点。这个说法应该和不可变这一点放在一起来讲：上面的循环变量<code>i</code>就是一个可变的变量，循环的副作用就是改变了这个变量的值。再比如C指针的经典例子：通过<code>swap</code>交换两个变量的值，这就是一个典型的有副作用的函数，它改变了传入参数的值。函数式编程之所以排斥这样做，就是因为它在尽量避免函数的副作用，试图将所有函数变为纯函数：函数的执行结果只依赖于输入的值，而和外部状态无关，并且不改变外部的状态。它借此消除副作用带来的不确定性。而数据的不可变是它消除不确定性的另一个方法，这里就是函数式编程的精髓了：没有可变变量要怎么迭代&#x2F;处理数据？不用迭代了，用递归就行。使用递归也提供了另一个观察问题的方式，比如对上面的迭代筛选例子，我们就可以用递归来改写，从而避免使用循环变量<code>i</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> processed=[]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">iter</span>=(<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(data.<span class="property">length</span>==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[<span class="number">0</span>] <span class="variable constant_">MATCHES_COND</span>)</span><br><span class="line">            <span class="keyword">return</span> data[<span class="number">0</span>] + <span class="title function_">iter</span>(data[<span class="number">1</span>:]);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">iter</span>(data[<span class="number">1</span>:])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码没用任何可变变量，也完成了数据源的筛选。虽然初次接触不太好想，但是解决大部分问题时，另一种视角确实有时会有意想不到的便利。以及不可变变量的好处也挺多的，比如天然没有竞争和并发问题。</p><p>另外关于递归的性能问题，用尾递归可以在受到递归优化的编程语言中得到不输迭代的性能。比如经典的斐波那契数列计算函数，就可以通过尾递归的写法结合语言的优化，达到和迭代写法基本一致的性能。</p><blockquote><p>下边这例子是LLM写的，暂时没验证</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个高阶函数，用于计算两个数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用高阶函数组合两个函数，用于计算两个数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculator</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶函数组合器，并传入两个数字作为参数</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">calculator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶函数组合器，并传入两个数字作为参数</span></span><br><span class="line"><span class="keyword">const</span> subtract = <span class="title function_">calculator</span>(<span class="function"><span class="params">a</span> =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶函数组合器，并传入两个数字作为参数</span></span><br><span class="line"><span class="keyword">const</span> multiply = <span class="title function_">calculator</span>(<span class="function"><span class="params">a</span> =&gt;</span> a * b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶函数组合器，并传入两个数字作为参数</span></span><br><span class="line"><span class="keyword">const</span> divide = <span class="title function_">calculator</span>(<span class="function"><span class="params">a</span> =&gt;</span> a / b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试计算器函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 输出 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">divide</span>(<span class="number">10</span>, <span class="number">2</span>)); <span class="comment">// 输出 5</span></span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>组合和继承，都是复用代码的重要手段。组合简洁，继承稍微冗杂一些。</p><p>组合的概念就是将一些现有的单元组合到一起，形成新的工具去解决具体问题，而组合这个动作的适用对象就不止是函数那么简单了。它可以是函数的组合，可以是类型的组合，也可以是状态和函数的组合。</p><p>借<del>从某大佬那里偷来的</del>一个说法，大多数新的语法结构就是让人们更合理地去使用固定范式的GOTO，而Algebraic Effect就是其中最合理<del>那个佬最推崇</del>的一个。从我的视角看来，主流编程语言的演进都是朝着可读可写且尽可能兼顾效率的方向发展的。在这个过程中，损失的一部分就是语言的”Tricks”，或者说是语言的灵活性&#x2F;可能性等。比如GOTO受到的接连削弱，它从一个十分灵活的结构变成了一堆固定但是更理智的语法结构，以一部分灵活性为代价换取了语言的可读性，以此提升可维护性。</p><p>组合呢？组合也是一种对于GOTO的封装。甚至更底层的，汇编中的GOTO，（部分）也就是jmp，它在汇编中也有对应的封装：子程序。而这些说法，对于指针这个原始的内存模型中的概念同样适用。封装提高了可读性，限制GOTO的直接使用限制了代码的可写性。二者的矛盾在足够优秀的语法结构出现前基本上是一对难以调和的矛盾。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>winget换源</title>
    <link href="https://mxts.jiujiuer.xyz/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/winget/"/>
    <id>https://mxts.jiujiuer.xyz/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/winget/</id>
    <published>2023-12-09T12:35:48.000Z</published>
    <updated>2025-03-12T15:31:34.802Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://unicom.mirrors.ustc.edu.cn/help/winget-source.html">winget 是 Windows 的一个包管理器，可以用来安装、卸载、更新和搜索软件。winget 默认使用的是 Microsoft Store 的源，但是也可以换成其他的源，比如中科大的源。</a><a href="https://unicom.mirrors.ustc.edu.cn/help/winget-source.html">1</a><a href="https://www.zhihu.com/question/509903409">2</a></p><p>如果您想换源，您需要以管理员身份运行终端，然后使用以下命令：</p><ul><li>删除默认的源：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget <span class="built_in">source</span> remove winget</span><br></pre></td></tr></table></figure><ul><li>添加中科大的源：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget <span class="built_in">source</span> add winget https://mirrors.ustc.edu.cn/winget-source</span><br></pre></td></tr></table></figure><ul><li>重置为官方的源：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget <span class="built_in">source</span> reset winget</span><br></pre></td></tr></table></figure><p><a href="https://unicom.mirrors.ustc.edu.cn/help/winget-source.html"></a><a href="https://unicom.mirrors.ustc.edu.cn/help/winget-source.html">1</a><a href="https://unicom.mirrors.ustc.edu.cn/help/winget-source.html">: WinGet 源使用帮助 — USTC Mirror Help 文档</a> <a href="https://www.zhihu.com/question/509903409">2</a>: winget是否可以用国内镜像？ - 知乎</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pandoc初窥</title>
    <link href="https://mxts.jiujiuer.xyz/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/pandoc_note/"/>
    <id>https://mxts.jiujiuer.xyz/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/pandoc_note/</id>
    <published>2023-12-09T12:10:50.000Z</published>
    <updated>2025-03-12T15:31:34.802Z</updated>
    
    <content type="html"><![CDATA[<p>pandoc 是一个使用 Haskell 语言编写的一款跨平台、自由开源及命令行界面的标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀。pandoc 支持的输入和输出格式范围广泛，包括但不限于 Markdown、HTML、DOCX、PDF、LaTeX、EPUB 等。</p><p>pandoc 不是 python 的库，但是有一个 python 的封装，叫做 pypandoc，可以在 python 代码中调用 pandoc 的功能。pypandoc 可以使用 pip 命令安装，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pypandoc</span><br></pre></td></tr></table></figure><p>pandoc 的日常用法主要是通过命令行来转换文档，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc input.md -o output.html</span><br></pre></td></tr></table></figure><p>这个命令就是将 input.md 这个 Markdown 文件转换为 output.html 这个 HTML 文件。pandoc 还有很多其他的选项和参数，可以参考 pandoc 的文档。</p><p>pandoc 也可以在 python 代码中使用 pypandoc 来转换文档，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pypandoc</span><br><span class="line">output = pypandoc.convert_file(<span class="string">&#x27;input.md&#x27;</span>, <span class="string">&#x27;html&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><p>这段代码就是将 input.md 这个 Markdown 文件转换为 HTML 字符串，并打印出来。pypandoc 还有其他的方法和参数，可以参考 pypandoc 的<a href="https://blog.csdn.net/VN520/article/details/129120364">文档</a>。</p><p>pandoc 是一个非常强大和灵活的文档转换工具，可以帮助你在不同的文档格式之间进行转换，特别是对于 Markdown 这种简洁易用的标记语言，可以轻松地生成 PDF、电子书、幻灯片等多种形式的文档。</p><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><p>刚好今天得提交个Word报告，但是写东西我还是喜欢Vim，于是就打算写完转换成Word。正打算手动转换&#x2F;网页在线转换的时候想起来了这个玩意——</p><p>然后就一行秒了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -o $(OUTPUT) -f markdown -t docx $(MARKDOWN) </span><br></pre></td></tr></table></figure><p>我直接从Makefile里摘出来的。用Makefile的话，写完敲个make就行。</p><p>最让我吃惊的是这玩意速度奇快,转换个快4000字的Markdown到Word，几乎跟我echo个字符串一样快，这还是我在7代intel移动端平台上测试的(?A?)</p><ul><li>Markdown转Tex，速度也很快<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -w latex ./test.md -o test.tex</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机视觉学习笔记</title>
    <link href="https://mxts.jiujiuer.xyz/2023/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://mxts.jiujiuer.xyz/2023/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-06T12:02:29.000Z</published>
    <updated>2025-03-12T15:31:34.809Z</updated>
    
    <content type="html"><![CDATA[<p>之前导论课程上学的基本都是思想和原理，到这里就开始接触真正数学和工程的方法了。</p><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>这门课的研究思路很清晰，就是围绕标题，自底向上，借助数学工具，一步一步实现各种复杂的功能以及算法，最终一步步接近让计算机拥有“视觉”的目标。</p><p>首先是数据的表示，概念的抽象，如何用离散的数据去近似抽象的视觉这个概念。这个过程通过直观理解和数学工具，以及建模方法，为计算机视觉提供了一种可行的数学上的表示和运算方法：像素，以及基于像素的一系列运算，比如滤波，仿射变换，更高自由度的变换，基于像素颜色值的变换等等，以及由这一系列变换得到的图像特征。</p><p>其次，是研究在图像的像素模型下，利用数学方法去研究分析以及利用图像特征的方法。这其中，就有诸如角点检测，边缘检测，全景图拼接以及处理等命题。</p><h2 id="生成对抗网络GAN"><a href="#生成对抗网络GAN" class="headerlink" title="生成对抗网络GAN"></a>生成对抗网络GAN</h2><p>通俗来说就是让两个网络作为对抗组，比如说生成图片的NN和鉴别图片的NN，两方轮流作为输入输出（也就是交替训练），在循环中不断提升两个网络的效果，最终达到生成内容以假乱真的效果。NN炼丹的关键是其中的loss函数设计，不过他们的做法是直接用另一个NN作为这个NN的loss函数来回馈训练效果。</p><p>目前比较突出的成果一个就是近几年的Stable Diffusion，算是这里边比较突出的一个了。这东西在图像的有损压缩里边用的也多，至于有损压缩的应用嘛，一般在一些需要使用算力去换带宽的场合很适用，比如卫星数据传输。其他应用就是图像的填充和补全，比如合理推测图像的缺失部分内容。另外就是，网络的输入不一定是噪声，输出也不一定是真假。改变其输入和输出的类型，可以赋予NN以不少是实用场景。</p><p>GAN的优点是效果好，比以前用的高斯模糊的效果都很好。但是问题也很突出，就是GAN很难训练。GAN的两方是生成器和判别器，训练的结果很大程度上与两方的能力是否足够接近有很大关系。</p><p>另外就是GAN的思想重点在对抗，并没有要求其他的条件。所以比如说可以有多个判别方，有多个生成方等。</p><h2 id="Attention-Is-All-You-Need"><a href="#Attention-Is-All-You-Need" class="headerlink" title="Attention Is All You Need"></a>Attention Is All You Need</h2><p>注意力机制一开始是应用于机器翻译领域，通过一个合适的重点词语权重标注机制，让算法更有重点地提取概要。如今的GPT也很大程度上受到注意力机制的启发才产生了不断预测下一个词向量概率的朴素思想。</p><p>注意力机制可以理解成给分词加上权重。将一个句子进行分词作为一个向量，将这个词语向量通过Softmax这样的激活函数进行处理之后，再借助矩阵进行变换，从而得到处理后的，带有权重的词向量。处理后的词向量，权重总和为1。加权后的句子，再进行翻译，效果就会好很多了。</p><p>至于将Attention思想迁移到CV领域进行应用的方法，关键是将图像”语义化“。一个常用的方法是将图像分割，分割成小块，对每个小块采用相同的思想。这就是VIT（Vision Transformer）的思想。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><h3 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h3><p>Softmax函数是一种常用的激活函数,主要用于将多分类问题中的输出值转换为概率分布。在神经网络中,输出层通常使用softmax函数,将输出值转换为每个类别概率。</p><p>Softmax函数的定义如下:<br>$$<br>Softmax(x) &#x3D; e^(x_i) &#x2F; (e^(x_1) + e^(x_2) + … + e^(x_n))<br>$$<br>其中,x是一个K维向量,Softmax函数的输出也是一个K维向量,并且每个元素的范围都在0到1之间,并且所有元素的和为1。</p><p>在多分类问题中,假设输出层有K个神经元,每个神经元代表一个类别。Softmax函数的作用是将输出层的输出转换为每个类别对应的概率。例如,如果输出层输出为[1.2, 2.3, 3.1],则对应的概率为[0.21, 0.34, 0.45]。</p><p>Softmax函数可以解决输出值非常大的问题,因为它可以防止输出值过大而导致的梯度消失或梯度爆炸。此外,Softmax函数还可以进行归一化,使得概率和为1,使得概率分布更加合理。</p><h2 id="期末划重点咯"><a href="#期末划重点咯" class="headerlink" title="期末划重点咯"></a>期末划重点咯</h2><blockquote><p><code>sudo 老师给我分</code></p></blockquote><p>有个压缩包，里边画红钩的都是重点</p><p>占比大概NN和传统方法4-6开</p><ul><li>Chap 1 没啥重点<ul><li>什么是光， 可见光谱的范围这些的</li><li>人的视觉系统这些概念啥的</li><li>三色光的相关内容</li></ul></li><li>Chap 3 重点<ul><li>灰度图（取值范围），RGB</li><li>图像两种基本运算</li><li>矩阵的运算</li><li>滤波概念，高斯滤波</li><li>卷积，点乘积，性质，计算过程strike, padding计算结果图像尺寸这些的</li></ul></li><li>Chap 4 边缘检测<ul><li>边缘定义,为啥是边缘</li><li>图像的梯度</li><li>噪声</li><li>边缘检测器：sobel算子,roberts算子,prewwit算子等</li><li>边缘存在的问题：噪声，拟合等</li></ul></li><li>Chap 6 图像插值<ul><li>线性插值，上下采样等，高斯金字塔</li><li>图像放大的插值算法（超分）<ul><li>最近邻，双线性，三次插值。不过现在都用GNN做超分了</li></ul></li></ul></li><li>Chap ? 特征匹配<ul><li>典型特征匹配计算方法</li><li>特征和特真不变性：啥特征的啥不变性 SIFT特征</li></ul></li><li>Chap 7 图像变换<ul><li>几种变换方式</li><li>线性变换：变灰度，变尺度等</li><li>按照变换剧烈程度递增：平移，旋转，仿射，投影</li><li>得记得变换矩阵的特征,大概得看明白</li></ul></li><li>Chap 8 图像配准 没啥讲的</li><li>Chap 11 单视图建模<ul><li>消失线和消失点等 得会计算</li></ul><ul><li>双试图立体视觉：视差和深度计算</li><li>窗口配准</li><li>极点极线极面</li><li>本质矩阵，基本矩阵是谁到谁的映射</li><li>深度估计</li></ul></li><li>Chap 14 图像三维重建<ul><li>一个相机转着拍 内参矩阵不变，为了配窗</li><li>重复的问题</li></ul></li><li>Chap 16 机器视觉<ul><li>激活函数和矩阵计算</li><li>神经网络结构</li><li>卷积网络的池化操作</li></ul><ul><li>反向传播：对w求导而非对x求导，而且得会算反向传播函数</li></ul></li><li>Chap 18 图像分割<ul><li>语义分割和实例分割</li><li>分割手段：边缘检测,聚类等方法</li></ul></li><li>Chap 19 目标检测与分类<ul><li>输出：中心型，边界型</li><li>两个方法：两步法，一步法（Yolo）</li></ul></li><li>Chap 21 实操<ul><li>玩玩pytorch</li></ul></li><li>Chap 23 神经网络前沿<ul><li>GAN</li><li>Attention(q,k,v)<ul><li>Softmax</li></ul></li></ul></li></ul><h2 id="计算机视觉复习"><a href="#计算机视觉复习" class="headerlink" title="计算机视觉复习"></a>计算机视觉复习</h2><p>找到一个学长的复习笔记如下</p><h3 id="图像和图像滤波"><a href="#图像和图像滤波" class="headerlink" title="图像和图像滤波"></a>图像和图像滤波</h3><ul><li><p>什么是滤波</p><blockquote><p>形成一个新的图像，其像素是原始像素的组合</p></blockquote></li><li><p>什么时候利用滤波</p><ul><li>&#x3D;&#x3D;<strong>增强图像：</strong>&#x3D;&#x3D; 降噪、锐化</li><li><strong>&#x3D;&#x3D;提取信息：&#x3D;&#x3D;</strong> 提取边缘或轮廓</li></ul></li></ul><p><strong>滤波的种类：</strong></p><ul><li><p>线性滤波：用相邻的线性组合 （加权和）替换每个像素</p><ul><li>线性组合的系数称为权重核</li></ul><p><strong>卷积：</strong>(权重核反转（水平和垂直）)<br>$$<br>G [ i , j ] &#x3D; \sum _ { u &#x3D; - k } ^ { k } \sum _ { v &#x3D; - k } ^ { k } H [ u , v ] F [ i - u , j - v ]<br>$$<br>记为<br>$$<br>G&#x3D;H*F<br>$$<br><strong>相关：</strong><br>$$<br>G [ i , j ] &#x3D; \sum _ { u &#x3D; - k } ^ { k } \sum _ { v &#x3D; - k } ^ { k } H [ u , v ] F [ i + u , j + v ]<br>$$<br>记为：<br>$$<br>G &#x3D; H \otimes F<br>$$</p></li><li><p>高斯滤波</p><blockquote><p>&#x3D;&#x3D;从图像中删除 「高频」分量 （低通滤波器）&#x3D;&#x3D;</p></blockquote><p>&#x3D;&#x3D;高斯核函数&#x3D;&#x3D;：<br>$$<br>G _ { \sigma } &#x3D; \frac { 1 } { 2 \pi \sigma ^ { 2 } } e ^ { - \frac { \left( x ^ { 2 } + y ^ { 2 } \right) } { 2 \sigma ^ { 2 } } }<br>$$</p></li></ul><p><strong>滤波的应用</strong></p><ul><li><p>锐化滤波器：<br>$$<br>F + \alpha (F-F*H)<br>$$</p></li><li><p>阈值滤波器<br>$$<br>g ( m , n ) &#x3D; \left{ \begin{array} { c c } { 255 , } &amp; { f ( m , n ) &gt; A } \ { 0 } &amp; { \text { otherwise } } \end{array} \right.<br>$$<br>&#x3D;&#x3D;阈值滤波器不是线性滤波&#x3D;&#x3D;</p></li><li><p>相关和卷积的定义和关系</p></li><li><p>高斯核</p><ul><li>调节哪个参数</li></ul></li><li><p>什么是线性滤波器</p></li><li><p>去燥使用什么滤波</p></li></ul><h3 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h3><h4 id="边缘的特征"><a href="#边缘的特征" class="headerlink" title="边缘的特征"></a>边缘的特征</h4><blockquote><p>怎样通过导数来反映边缘</p></blockquote><ul><li>&#x3D;&#x3D;对于图像强度的一阶导数，边缘对应于导数的极值&#x3D;&#x3D;</li></ul><p><strong>如何计算数字图像的导数？</strong></p><ol><li><p>重建连续图像，然后计算导数</p></li><li><p>采用离散导数（有限差分）: &#x3D;&#x3D;图像的梯度相当于两个相邻像素之间的差值&#x3D;&#x3D;<br>$$<br>\frac { \partial f } { \partial x } [ x , y ] \approx F [ x + 1 , y ] - F [ x , y ]<br>$$<br>可以使用线性滤波器实现</p><p>&#x3D;&#x3D;梯度的方向 <strong>垂直于边缘的方向</strong>&#x3D;&#x3D;，梯度的方向是 图像函数 f(x,y) 变化最快的方向，当图像中存在边缘时，一定有较大的梯度</p></li></ol><h4 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h4><p>图像梯度是图像函数在 x ,y 两个方向的导数，</p><p>幅值:<br>$$<br>| \nabla f | &#x3D; \sqrt { \left( \frac { \partial f } { \partial x } \right) ^ { 2 } + \left( \frac { \partial f } { \partial y } \right) ^ { 2 } }<br>$$<br>方向：<br>$$<br>\theta &#x3D; \tan ^ { - 1 } \left( \frac { \partial f } { \partial y } &#x2F; \frac { \partial f } { \partial x } \right)<br>$$<br><strong>&#x3D;&#x3D;要计算图像梯度，首先要图像去噪，使用高斯核在图像上卷积，平滑图像&#x3D;&#x3D;</strong></p><p>可以将两次滤波 （高斯滤波、差分滤波）合成一步实现</p><p><img src="http://media.sumblog.cn/blog/20190102/XhVYP5it42Yb.png?imageslim" alt="mark"></p><h5 id="二维边缘检测使用的图像算子："><a href="#二维边缘检测使用的图像算子：" class="headerlink" title="二维边缘检测使用的图像算子："></a>二维边缘检测使用的图像算子：</h5><ol><li><p>Sobel 算子</p><p><img src="http://media.sumblog.cn/blog/20190102/PIUiMGyShLVT.png?imageslim" alt="mark"></p></li></ol><h4 id="非最大抑制"><a href="#非最大抑制" class="headerlink" title="非最大抑制"></a>非最大抑制</h4><p>检查像素是否为<strong>沿梯度方向的局部最大值</strong> （需要进行像素差值？）</p><ol start="2"><li><p>&#x3D;&#x3D;Canny 边缘检测器&#x3D;&#x3D;</p><ol><li>用高斯导数滤波</li><li>获得梯度的幅值和方向</li><li>非最大抑制</li><li>连接与滞后阈值化：<ul><li>定义高低两个阈值</li><li>用&#x3D;&#x3D;高阈值来寻找边缘曲线的起点，用低阈值来确定后继点&#x3D;&#x3D;，进行连接</li></ul></li></ol><p><strong>Canny 边缘检测器的参数：</strong></p><ul><li>$\sigma:$ 高斯模糊的宽度：大的 $\sigma$ 可以检测大尺度边缘，$\sigma$ &#x3D;&#x3D;越小，能检测到的细微边缘就越多&#x3D;&#x3D;</li><li>高阈值</li><li>低阈值</li></ul></li></ol><ul><li>图像的导数</li><li>图像的梯度是什么 （两个方向的导数）（复制和方向）</li><li>去噪</li><li>二维边缘检测<ul><li>列举几个图像算子</li></ul></li><li>费最大值抑制</li><li>边缘检测器</li></ul><h3 id="图像的插值和重采样"><a href="#图像的插值和重采样" class="headerlink" title="图像的插值和重采样"></a>图像的插值和重采样</h3><h4 id="图像采样"><a href="#图像采样" class="headerlink" title="图像采样"></a>图像采样</h4><ul><li><p>采样率</p><p>&#x3D;&#x3D;<strong>奈奎斯特采样率：</strong> 采样率 &gt;&#x3D; 2*图像中的最大频率&#x3D;&#x3D;</p></li></ul><p><strong>若原始图像的频率过高，先对图像滤波，然后子采样</strong>，构建高斯金字塔</p><h4 id="图像插值"><a href="#图像插值" class="headerlink" title="图像插值"></a>图像插值</h4><ul><li>最近邻差值：重复 n 次</li><li><strong>双线性插值</strong>： 利用输入图像中与输出图像像素点映射位置最邻近的4个像素点的颜色值(或灰度值)计算输出图像中像素点的颜色值(或灰度值)</li><li>双三次插值：为了得到更精确的(x’,y’)的颜色值(或灰度值)g(x’,y’),就不仅需要考虑与(x’,y’)点最邻近的四个点对它的影响,还要考虑到该点周围16个相邻点的颜色值(或灰度值)对它的影响。</li></ul><h3 id="角点检测"><a href="#角点检测" class="headerlink" title="角点检测"></a>角点检测</h3><p>Harris 角点检测：将窗口平移，比较平移前后 w 内每个像素的差异平方和（SSD）<br>$$<br>E ( u , v ) &#x3D; \sum _ { ( x , y ) \in W } [ I ( x + u , y + v ) - I ( x , y ) ] ^ { 2 }<br>$$</p><p>$$<br>\begin{aligned} E ( u , v ) &#x3D; &amp; \sum _ { ( x , y ) \in W } [ I ( x + u , y + v ) - I ( x , y ) ] ^ { 2 } \ \approx &amp; \sum _ { ( x , y ) \in W } \left[ I ( x , y ) + I _ { x } u + I _ { y } v - I ( x , y ) \right] ^ { 2 } \ \approx &amp; \sum _ { ( x , y ) \in W } \left[ I _ { x } u + I _ { y } v \right] ^ { 2 }\  \approx Au^2+2Buv +Cv^2\ \end{aligned}<br>$$</p><p>$$<br>A &#x3D; \sum _ { ( x , y ) \in W } I _ { x } ^ { 2 } \quad B &#x3D; \sum _ { ( x , y ) \in W } I _ { x } I _ { y } \quad C &#x3D; \sum _ { ( x , y ) \in W } I _ { y } ^ { 2 }<br>$$</p><p><strong>算法实现：</strong></p><ol><li><p>计算图像在 X， Y 两个方向的梯度</p></li><li><p>计算两个方向上梯度的乘积</p></li><li><p>使用高斯函数对 $I_x^2,I_y^2,I_xI_y$ 进行高斯加权，生成矩阵的元素 A，B，C</p></li><li><p>计算每个像素的 Harris 响应值 R， 并对小于某个阈值的 R 置 0<br>$$<br>R &#x3D; \left{ R : \operatorname { det } M - \alpha ( \operatorname { trace } M ) ^ { 2 } &lt; t \right}<br>$$</p></li><li><p>在邻域内进行非最大抑制，局部最大值即为图像的角点</p></li></ol><h3 id="特征不变性"><a href="#特征不变性" class="headerlink" title="特征不变性"></a>特征不变性</h3><p>我们希望角点的位置对光度变换具有不变性 （图像变换之后，角点位置不变），对几何变换具有协变性 （相应位置检测到同一特征）</p><p><strong>不变性：</strong></p><ul><li>对平移、旋转协变</li><li>对强度平移具有不变性，对强度缩放不具有不变性</li><li>对缩放不具有不变性<ul><li>需要同时在位置和尺度上查找：自动尺度选择</li></ul></li></ul><p><strong>自动尺度选择：</strong></p><ul><li>在高斯金字塔中使用固定大小的窗口，寻找具有局部最大值的尺度</li></ul><p><strong>斑点检测：</strong></p><blockquote><p>斑点是指二维图像中和周围颜色有颜色差异和灰度差异的区域,因为斑点代表的是一个区域,所以其相对于单纯的角点,具有更好的稳定性和更好的抗干扰能力.</p></blockquote><ul><li><p>核函数：</p><ul><li><p>高斯拉普拉斯：<br>$$<br>\nabla ^ { 2 } g &#x3D; \frac { \partial ^ { 2 } g } { \partial x ^ { 2 } } + \frac { \partial ^ { 2 } g } { \partial y ^ { 2 } }<br>$$</p></li><li><p>高斯差分函数<br>$$<br>D o G &#x3D; G ( x , y , k \sigma ) - G ( x , y , \sigma )<br>$$</p></li></ul></li><li><p>当 $$\sigma &#x3D; r&#x2F;\sqrt{2}$$ 时，响应最大，图像黑白反向时，响应最小，因此将高斯拉普拉斯算子响应达到峰值的 $\sigma$ 值，称为特征尺度</p></li><li><p>怎么实现特征的不变</p></li><li><p>Harris 检测的步骤</p></li></ul><h3 id="特征描述与匹配"><a href="#特征描述与匹配" class="headerlink" title="特征描述与匹配"></a>特征描述与匹配</h3><h4 id="特征描述符"><a href="#特征描述符" class="headerlink" title="特征描述符"></a>特征描述符</h4><ul><li><p><strong>MOPS</strong>:</p><ol><li>选取特征点周围 40*40 的方形窗口</li><li>缩放到 1&#x2F;5 大小</li><li>旋转特征向量方向到水平</li><li>在以特征为中心的 8*8 方形窗口内采样</li><li>规格化 （强度减去平均值，除以标准差，均值为0，方差为1）</li></ol></li><li><p><strong>SIFT：</strong>尺度不变特征转换</p><p><img src="http://media.sumblog.cn/blog/20190102/52PLX111WYbj.png?imageslim" alt="mark"></p><ol><li>在所检测的特征周围取 16*16 的窗口</li><li>为每个像素计算边缘方向</li><li>去除弱的边缘方向（设定阈值）</li><li>为剩余边缘方向建立直方图</li></ol></li></ul><h4 id="特征匹配"><a href="#特征匹配" class="headerlink" title="特征匹配"></a>特征匹配</h4><ul><li><p>特征距离</p><ul><li><p>更好的方法：距离比</p><p>$f_2$ 是 $f_1$ 在 $I_2$ 中最好的 SSD 匹配，$f_2^\prime$ 次之<br>$$<br>距离比 &#x3D; \frac{||f_1-f_2||}{||f_1-f_2^\prime||}<br>$$</p></li></ul></li><li><p>测量特征匹配的性能</p><ul><li>真正例率（TPR） （召回率） &#x3D; 匹配到的真正例数 &#x2F; 所有真正例数</li><li>假正例率 （FPR） &#x3D; 匹配到的假正例数&#x2F;所有真正例数</li><li>ROC 曲线：以 FPR 为横轴，TPR 为纵轴</li><li>AUC：曲线下的面积，越大越好</li></ul></li></ul><h3 id="变换与卷绕"><a href="#变换与卷绕" class="headerlink" title="变换与卷绕"></a>变换与卷绕</h3><p>什么是图像卷绕：<strong>更改图像的定义域</strong></p><p><strong>常见的变换</strong></p><ul><li>平移</li><li>欧式变换：平移+旋转</li><li>相似变换：平移+旋转+等比放缩</li><li>仿射变换：平移+旋转+等比放缩+剪切</li><li>投影变换：原来平行的线不再平行，但还是保持直线性</li></ul><h4 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h4><ul><li>等比缩放： 比例S</li><li>旋转角度 </li><li>剪切</li><li>镜像</li></ul><blockquote><p><strong>线性变换的性质</strong></p><p>原点到原点</p><p>直线到直线</p><p>平行线保持平行</p><p>比率被保持</p><p>线性变换的组合是线性变换</p></blockquote><p>平移不是 2D 坐标上的线性变换，我们需要 <strong>添加一个坐标</strong> -&gt; <strong>齐次坐标</strong></p><h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p><strong>任何最后一行 为 [0,0,1] 的 3·3 矩阵表示的转换称为仿射变换</strong>，<strong>仿射变换是线性变换和平移的组合</strong></p><p>变换完成后，平面位置不变</p><p>基本的仿射变换：</p><ul><li><p><strong>平移、缩放、2D 平面旋转、剪切</strong> </p><p><img src="http://media.sumblog.cn/blog/20190105/Je0CygVwaYrM.png?imageslim" alt="mark"></p></li><li><p><strong>仿射变换是线性变换 + 平移</strong></p></li></ul><p><strong>性质</strong></p><ul><li>原点不一定到原点</li><li>直线到直线</li><li>平行还平行</li><li>保持比率</li><li>闭包</li></ul><h3 id="透视变换、投影变换、同态映射"><a href="#透视变换、投影变换、同态映射" class="headerlink" title="透视变换、投影变换、同态映射"></a>透视变换、投影变换、同态映射</h3><blockquote><p>最后一元素固定为1 ，共有8个参数， <strong>是成像平面的变换</strong>，仿射变换是特例</p></blockquote><ul><li>原点不一定映射到原点</li><li>平行线不一定保持平行</li><li>不保持比率</li><li>闭包</li></ul><h4 id="卷绕"><a href="#卷绕" class="headerlink" title="卷绕"></a>卷绕</h4><p>卷绕有两种：</p><ol><li>前向卷绕</li><li>反向卷绕</li></ol><p>变换后的像素位置如果不是整数： <strong>将像素值分配给四个最近邻，记录每个点的权重并在最后归一化</strong></p><blockquote><p>效果：混叠与模糊</p></blockquote><ul><li><p><strong>反向卷绕</strong></p><p>先获取每个像素在原图像中对应的位置处的像素值 （逆变换）</p><p>如果像素位置不是整数，利用原来相邻像素值插值</p><ul><li>可能的插值滤波器<ul><li>最近邻</li><li>双线性</li><li>双三次</li><li>窗 sinc</li></ul></li><li>需要防止锯齿和混叠（需要预先滤波）</li></ul></li><li><p>变换有哪几种</p></li><li><p>卷绕有两种</p><p>卷绕之后产生了非整数值怎么办</p></li><li><p>常见的变换</p><ul><li>旋转</li><li>平移</li><li>基本仿射变换</li><li><strong>仿射变换的含义是什么</strong></li></ul></li></ul><h3 id="图像配准"><a href="#图像配准" class="headerlink" title="图像配准"></a>图像配准</h3><p>配准算法的流程，怎么实现</p><ul><li>特征提取</li><li>匹配</li><li>反向变换</li><li>插值</li></ul><p>优化方式</p><p><strong>最小二乘法</strong></p><h4 id="图像配准算法"><a href="#图像配准算法" class="headerlink" title="图像配准算法"></a>图像配准算法</h4><p><strong>给定图像 A 和 B</strong></p><ol><li>计算 A、B 的图像特征</li><li>匹配 A、B 之间的特征</li><li>使用匹配集计算 A 到 B 的单应映射矩阵的最小二乘解</li></ol><h4 id="最小化残差平方和"><a href="#最小化残差平方和" class="headerlink" title="最小化残差平方和"></a>最小化残差平方和</h4><p>定义残差：<br>$$<br>\begin{array} { l } { r _ { \mathbf { x } _ { i } } \left( \mathbf { x } _ { t } \right) &#x3D; \left( \mathbf { x } _ { i } + \mathbf { x } _ { t } \right) - \mathbf { x } _ { i } ^ { \prime } } \ { r _ { \mathbf { y } _ { i } } \left( \mathbf { y } _ { t } \right) &#x3D; \left( \mathbf { y } _ { i } + \mathbf { y } _ { t } \right) - \mathbf { y } _ { i } ^ { \prime } } \end{array}<br>$$<br>将 n 个点形成的 2n 个方程写成矩阵方程：<br>$$<br>\left[ \begin{array} { l l } { 1 } &amp; { 0 } \ { 0 } &amp; { 1 } \ { 1 } &amp; { 0 } \ { 0 } &amp; { 1 } \ { 0 } &amp; { 1 } \ { \vdots } \ { 1 } &amp; { 0 } \ { 0 } &amp; { 1 } \end{array} \right] \left[ \begin{array} { l } { x _ { t } }  \ { y _ { t } } \end{array} \right] &#x3D; \left[ \begin{array} { c } { x _ { 1 } ^ { \prime } - x _ { 1 } } \ { y _ { 1 } ^ { \prime } - y _ { 1 } } \ { x _ { 1 } ^ { \prime } - x _ { 2 } } \ { y _ { 2 } ^ { \prime } - y _ { 2 } } \ { \vdots } \ { x _ { n } ^ { \prime } - x _ { n } } \ { y _ { n } ^ { \prime } - y _ { n } } \end{array} \right]<br>$$</p><p>$$<br>At &#x3D;b<br>$$</p><p>找到 t ，最大限度的减少<br>$$<br>| \mathbf { A } \mathbf { t } - \mathbf { b } | ^ { 2 }<br>$$</p><p>$$<br>\begin{array} { c } { \mathbf { A } ^ { \mathrm { T } } \mathbf { A } \mathbf { t } &#x3D; \mathbf { A } ^ { \mathrm { T } } \mathbf { b } } \ { \mathbf { t } &#x3D; \left( \mathbf { A } ^ { \mathrm { T } } \mathbf { A } \right) ^ { - 1 } \mathbf { A } ^ { \mathrm { T } } \mathbf { b } } \end{array}<br>$$</p><p>对于仿射变换：<br>$$<br>\left[ \begin{array} { l } { x ^ { \prime } } \ { y ^ { \prime } } \ { 1 } \end{array} \right] &#x3D; \left[ \begin{array} { l l l } { a } &amp; { b } &amp; { c } \ { d } &amp; { e } &amp; { f } \ { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right] \left[ \begin{array} { l } { x } \ { y } \ { 1 } \end{array} \right]<br>$$<br>有六个未知数，每个匹配有两个方程，我们需要三个匹配</p><p>残差：<br>$$<br>\begin{aligned} r _ { x _ { i } } ( a , b , c , d , e , f ) &amp; &#x3D; \left( a x _ { i } + b y _ { i } + c \right) - x _ { i } ^ { \prime } \ r _ { y _ { i } } ( a , b , c , d , e , f ) &amp; &#x3D; \left( d x _ { i } + e y _ { i } + f \right) - y _ { i } ^ { \prime } \end{aligned}<br>$$<br>对于同态映射（透视变换）<br>$$<br>\left[ \begin{array} { c } { x _ { i } ^ { \prime } } \ { y _ { i } ^ { \prime } } \ { 1 } \end{array} \right] \cong \left[ \begin{array} { l l l } { h _ { 00 } } &amp; { h _ { 01 } } &amp; { h _ { 02 } } \ { h _ { 10 } } &amp; { h _ { 11 } } &amp; { h _ { 12 } } \ { h _ { 20 } } &amp; { h _ { 21 } } &amp; { h _ { 22 } } \end{array} \right] \left[ \begin{array} { c } { x _ { i } } \ { y _ { i } } \ { 1 } \end{array} \right]<br>$$</p><p>$$<br>\begin{aligned} x _ { i } ^ { \prime } \left( h _ { 20 } x _ { i } + h _ { 21 } y _ { i } + h _ { 22 } \right) &amp; &#x3D; h _ { 00 } x _ { i } + h _ { 01 } y _ { i } + h _ { 02 } \ y _ { i } ^ { \prime } \left( h _ { 20 } x _ { i } + h _ { 21 } y _ { i } + h _ { 22 } \right) &amp; &#x3D; h _ { 10 } x _ { i } + h _ { 11 } y _ { i } + h _ { 12 } \end{aligned}<br>$$</p><p><img src="http://media.sumblog.cn/blog/20190105/LyDbpPwVzvUz.png?imageslim" alt="mark"></p><p>Ah &#x3D; 0 的非平凡最小二乘解，即为 $A^TA$ 具有最小特征值的特征向量</p><h3 id="RANSAC-随机抽样一致"><a href="#RANSAC-随机抽样一致" class="headerlink" title="RANSAC 随机抽样一致"></a>RANSAC 随机抽样一致</h3><p>如何计算</p><ul><li>随机抽取</li><li>计算匹配误差</li></ul><h4 id="Ransac-算法"><a href="#Ransac-算法" class="headerlink" title="Ransac 算法"></a>Ransac 算法</h4><ol><li>随机选择 S 个样本<ul><li>通常 s 等于可以求解模型的最少样本数量</li></ul></li><li>使用这 s 个样本求得一个解</li><li>计数符合模型的 inliers 数</li><li>重复 N 次</li><li>选择具有最多 inliers 数的模型</li><li>使用所有的 inliers 点，采用最小平方拟合</li></ol><h4 id="实验轮数的确定"><a href="#实验轮数的确定" class="headerlink" title="实验轮数的确定"></a>实验轮数的确定</h4><ul><li>$p$ 数内点的概率</li><li>$s$ 是每次实验使用样本点的数目</li><li>$P$ 为实验最终成功找到正确解的概率</li><li>$R$ 为实验轮数</li></ul><p>$$<br>\begin{array} { l } </p>]]></content>
    
    
    <summary type="html">这学期报了计算机视觉这门课，和大一停留在理论上的导论课比起来总算是多了一些实质性的内容和算法。几个lab设计也不错，对理解其本质有所帮助，就是这个讲课和PPT有点(*/ω＼*)</summary>
    
    
    
    
    <category term="Python" scheme="https://mxts.jiujiuer.xyz/tags/Python/"/>
    
    <category term="计算机视觉" scheme="https://mxts.jiujiuer.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个本地镜像源</title>
    <link href="https://mxts.jiujiuer.xyz/2023/10/16/setup-local-linux-mirror/"/>
    <id>https://mxts.jiujiuer.xyz/2023/10/16/setup-local-linux-mirror/</id>
    <published>2023-10-16T15:23:51.000Z</published>
    <updated>2025-03-12T15:31:34.797Z</updated>
    
    <content type="html"><![CDATA[<p>最近好哥们沉迷pocketchip，但是苦于架构比较古老（ARM-V7a但是能跑Linux Mainline），所以镜像站特别稀少，只有个国外的站点还开着。所以嘛，闲着也是闲着，就打算自己搭建一个镜像站咯。</p><p>顺便还能好好玩玩那个ESXi服务器。毕竟现在就只跑了一个OpenWRT和一个Ubuntu Server，实在没利用起来（</p><p>或许回头整个本地镜像源还能试试刷新一下Arch安装速度记录（逃</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先需要足够的硬盘空间和一个Linux计算机，以及差不多的网络环境。</p><p>然后是一些<del>神秘妙妙</del>工具：<code>apache2, debmirror, gnupg, xz-utils, rsync(recommend)</code></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先，因为同步的数据量会比较大，所以建议使用一块单独的硬盘或者看具体情况分个区都行。硬盘处理好后，可以将它挂载到<code>/mount/</code>下，随后创建我们的镜像站仓库目录们。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mirror/debmirror/&#123;amd64,keyring&#125;</span><br><span class="line"><span class="built_in">mkdir</span> -p /mirror/scripts        <span class="comment"># 各种镜像站工具脚本</span></span><br></pre></td></tr></table></figure><p>随后安装GPG keyrnig：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --no-default-keyring --keyring /mirror/debmirror/mirrorkeyring/trustedkeys.gpg --import /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>安装完成后，在Web服务器站点根目录创建符号链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line"><span class="built_in">ln</span> -s /mirror/debmirror/amd64 ubuntu</span><br></pre></td></tr></table></figure><p>在这之后，我们还需要配置debmirror才能实现自动同步upstream等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mirror/scripts</span><br><span class="line">wget https://louwrentius.com/files/debmirroramd64.sh.txt -O debmirroramd64.sh </span><br><span class="line"><span class="built_in">chmod</span> +x debmirroramd64.sh</span><br></pre></td></tr></table></figure><p>接着修改脚本设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GNUPGHOME=/mirror/debmirror/mirrorkeyring</span><br><span class="line">release=focal,focal-security,focal-updates,focal-backports,jammy,jammy-security,jammy-updates,jammy-backports</span><br><span class="line">server=nl.archive.ubuntu.com</span><br><span class="line">proto=rsync</span><br><span class="line">outPath=/mirror/debmirror/amd64</span><br><span class="line"><span class="comment">#bwlimit=1000               # 设置rsync的带宽限速为1000KB/s，如果要启用这个限制，还需要取消注释下面的行：</span></span><br><span class="line">--rsync-options <span class="string">&quot;-aIL --partial --bwlimit=<span class="variable">$bwlimit</span>&quot;</span> \</span><br></pre></td></tr></table></figure><p>完成后，你可以先运行一次脚本来完成第一次同步。<strong>同步完成后</strong>，再在crontab里边加上自动任务（不然你的同步进程时间过长，可能会干扰cron任务）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /mirror/scripts/debmirroramd64.sh</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://louwrentius.com/how-to-setup-a-local-or-private-ubuntu-mirror.html">Louwrentius - How to Setup a Local or Private Ubuntu Mirror</a><br><a href="https://www.debian.org/mirror/ftpmirror">Debian - Setting up a Debian archive mirror</a></p></blockquote>]]></content>
    
    
    <summary type="html">来玩pocketchip(OWO)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CSDN复制解禁</title>
    <link href="https://mxts.jiujiuer.xyz/2023/10/12/csdn-copy/"/>
    <id>https://mxts.jiujiuer.xyz/2023/10/12/csdn-copy/</id>
    <published>2023-10-12T06:18:34.000Z</published>
    <updated>2025-03-12T15:31:34.797Z</updated>
    
    <content type="html"><![CDATA[<p>省流不看：F12开发者工具终端执行<code>document.designMode=&#39;on&#39;</code>。</p><p>原理嘛，就是利用浏览器的DOM启用设计模式来允许选择元素。关于DOM的详细介绍在下边：</p><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>在浏览器中，<code>document</code>对象是一个非常重要的对象，它代表了当前页面的文档。<code>document.DesignMode</code>属性是<code>document</code>对象的一个属性，它用于指定页面的设计模式。</p><p>设计模式主要有两种：</p><ol><li>模式（常态）：页面在正常模式下运行，用户可以正常查看和操作页面元素。  </li><li>layouter 模式（布局模式）：页面在 layouter 模式下运行，用户无法正常查看和操作页面元素，只能查看页面的布局和结构。</li></ol><p>这两种设计模式主要用于开发者调试和测试网页布局。通常，开发者会在开发过程中将页面切换到 layouter 模式，以便更好地查看和调整页面布局。当开发完成后，页面会自动切换回正常模式。</p><p>在页面加载时，浏览器会自动设置<code>document.DesignMode</code>属性的值。开发者也可以通过 JavaScript 代码来修改这个属性的值，从而实现在不同设计模式之间的切换。</p><p>除了<code>DesignMode</code>属性之外，<code>document</code>对象还有许多其他的属性和方法，它们可以用来完成各种网页开发任务。例如：</p><ol><li><code>document.body</code>：表示页面的主体部分，包含了所有的 HTML 元素。  </li><li><code>document.title</code>：表示页面的标题，通常显示在浏览器的标签页上。  </li><li><code>document.getElementById()</code>：通过元素的 ID 获取指定元素。  </li><li><code>document.getElementsByClassName()</code>：通过元素的类名获取指定元素集合。  </li><li><code>document.getElementsByTagName()</code>：通过元素的标签名获取指定元素集合。  </li><li><code>document.querySelector()</code>：通过 CSS 选择器获取指定元素。  </li><li><code>document.querySelectorAll()</code>：通过 CSS 选择器获取指定元素集合。</li></ol><p>此外，<code>document</code>对象还提供了许多用于操作 DOM 的方法，如<code>createElement()</code>、<code>appendChild()</code>、<code>removeChild()</code>、<code>insertBefore()</code>等，以及用于处理事件的方法，如<code>addEventListener()</code>、<code>removeEventListener()</code>等。</p><p>总之，<code>document</code>对象是浏览器中最重要的对象之一，它为网页开发者提供了丰富的属性和方法，使得开发者可以更加方便地完成各种网页开发任务。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>联邦学习的投毒和攻防方法</title>
    <link href="https://mxts.jiujiuer.xyz/2023/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8A%95%E6%AF%92%E5%92%8C%E6%94%BB%E9%98%B2%E6%96%B9%E6%B3%95/"/>
    <id>https://mxts.jiujiuer.xyz/2023/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8A%95%E6%AF%92%E5%92%8C%E6%94%BB%E9%98%B2%E6%96%B9%E6%B3%95/</id>
    <published>2023-10-11T10:59:46.000Z</published>
    <updated>2025-03-12T15:31:34.808Z</updated>
    
    <content type="html"><![CDATA[<p>十分的交叉学科。具体而言就是机器学习领域的数据安全问题。</p><p>首先是标题 说的大概是一种新的人工智能学习范式。在这种防方式里也有攻击方式和相应的防御方式。</p><h2 id="联邦学习简介"><a href="#联邦学习简介" class="headerlink" title="联邦学习简介"></a>联邦学习简介</h2><ul><li>definition 联邦学习：一种分布式学习方法。解决的问题主要针对数据量不够&#x2F;数据获取途径（成本问题），数据难以集中(法律问题和隐私问题)。一种时间方法是在本地进行小规模训练，然后将训练得到的模型参数上传汇总。不但规避了隐私版权问题，也保证了训练效果。</li></ul><p>根据以样本和特征分别作为基准，联邦学习又分为横向&#x2F;纵向：同特征不同样本&#x2F;同样本不同特征。它们各自有着相当不同的模型参数聚合方法。后者通常发生在大型企业之间，而前者通常发生在用户&#x2F;公司之间，双方并非信任关系。</p><p>前者的聚合方法有简单的加权平均FedAvg，有离群点修复FedProx，还有SCAFFOLD等。而后者则利用隐私求交集PSI来完成加密实体对齐。典型的纵向联邦学习框架有SecureBoost。</p><p>但是数据特征仍然是反映在梯度参数中的，通过深度梯度泄漏方法DLG，可以恢复训练数据，这样就间接泄漏了训练数据的隐私。</p><h2 id="隐私数据保护方法"><a href="#隐私数据保护方法" class="headerlink" title="隐私数据保护方法"></a>隐私数据保护方法</h2><p>防止梯度泄露的方法主要是两类：密码学方法和差分隐私（Differential Privacy）.前者有MPC和HE等，通信开销和计算量较大，但是精度较高。后者则有噪声问题的困扰。</p><h2 id="联邦学习的攻击方法"><a href="#联邦学习的攻击方法" class="headerlink" title="联邦学习的攻击方法"></a>联邦学习的攻击方法</h2><p>目的就是使训练模型很难收敛，破坏联邦学习模型的性能和可信度。</p><ul><li>投毒攻击，给本地数据添加错误，来弱化学习效果；或者更改分布式训练的模型参数。攻击者的知识、能力越强则攻击能力越强</li></ul><p>但是太离谱的数据会被数据清洗过滤掉，太小的数据又没啥效果。</p><ul><li><p>目标&#x2F;非目标攻击：针对特定&#x2F;随即目标进行数据编造投毒攻击。</p></li><li><p>数据打乱：比如对于不同群体的用户数据，互换他们attribute的结果，最终使得结果在不同群体上相反。</p></li></ul><h2 id="投毒攻击的检测"><a href="#投毒攻击的检测" class="headerlink" title="投毒攻击的检测"></a>投毒攻击的检测</h2><p>这种检测难度不小：投毒攻击检测和隐私保护间的矛盾、数据非独立分布、攻击隐蔽性。</p><p>比较朴素的思路就是使用数据挖掘的清洗方法，对离群点等进行清洗。比如说有一些聚合方法：Krum, Bulyan, Trimmed mean（修整均值）, Medium（中位数）等，都是一些经典的鲁棒性聚合规则。</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>首先是基于统计学的方法。但是它的局限性是只有少部分客户端被控制。</p><p>其次是用验证用数据集进行验证。不过这样纯粹的数据集很难找。</p><p>再者就是用机器学习方法1-AE进行检验。它首先在本地预训练一个自编码器模型，然后正式训练过程中基于自编码器计算各节点模型更新的重构误差。</p><p>2-GAN：可以用GAN尝试恢复出来训练样本来生成本地训练集，从而验证模型参数是否正常。但是缺陷是，无法应对在训练初期就发动攻击的方式。</p><p>区块链1-FLChain：由部分节点进行数据检测再进行上传，从而保证参数的正确性。问题是这部分节点如何选择，以及是否正常。解决方法可以是动态更新这部分成员结点，通过一系列置信度去更新这部分节点。</p><h2 id="研究成果：神经网络模型水印"><a href="#研究成果：神经网络模型水印" class="headerlink" title="研究成果：神经网络模型水印"></a>研究成果：神经网络模型水印</h2><p>初始模型嵌入水印，并对水印进行检测。缺点是上传的模型不能加密。当然也可以允许加密，不过可以聚合模型，用聚合后的模型检验上传者。或者，可以比对上传者的历史行为数据，以此检测上传节点是否异常。</p><p>时间有限，基本就到这里了。</p>]]></content>
    
    
    <summary type="html">(*/ω＼*)</summary>
    
    
    
    
  </entry>
  
</feed>
